package file

import (
	"log"
	"strings"

	"ecodepost/resource-svc/pkg/invoker"
	"ecodepost/resource-svc/pkg/invoker/alioss"
	"ecodepost/resource-svc/pkg/service"

	userv1 "ecodepost/pb/user/v1"

	"github.com/ego-component/ek8s"
	k8sregistry "github.com/ego-component/ek8s/registry"
	cegrpc "github.com/gotomicro/ego/client/egrpc"

	filev1 "ecodepost/pb/file/v1"

	"github.com/BurntSushi/toml"
	"github.com/ego-component/egorm"
	"github.com/ego-component/eredis"
	"github.com/gotomicro/ego/core/econf"
	"github.com/gotomicro/ego/server/egrpc"
)

// svc generated by protoc-gen-go-test, you should not edit it.
// @Override=true
var svc *egrpc.Component

// init generated by protoc-gen-go-test, you can fill initial logic by yourself.
// @Override=true
func init() {
	conf := `

`
	// 加载配置
	err := econf.LoadFromReader(strings.NewReader(conf), toml.Unmarshal)
	if err != nil {
		log.Fatalf("init exited with error: %v", err)
	}
	k8sregistry.Load("registry").Build(k8sregistry.WithClient(ek8s.Load("k8s").Build()))
	userConn := cegrpc.Load("grpc.usersvc").Build()
	invoker.GrpcUser = userv1.NewUserClient(userConn)
	invoker.Db = egorm.Load("mysql").Build()
	invoker.Redis = eredis.Load("redis").Build()
	invoker.AliOss = alioss.Load("alioss").Build()
	service.Init()
	// 初始化bufnet gRPC的测试服务
	svc = Server()

	err = svc.Init()
	if err != nil {
		log.Fatalf("init server with error: %v", err)
	}

	go func() {
		// 启动服务
		if err = svc.Start(); err != nil {
			log.Fatalf("Server exited with error: %v", err)
		}
	}()
}

func Server() *egrpc.Component {
	grpcCmp := egrpc.Load("server.grpc").Build()
	filev1.RegisterFileServer(grpcCmp.Server, &GrpcServer{})
	return grpcCmp
}
