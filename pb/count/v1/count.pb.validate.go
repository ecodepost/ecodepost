// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: count/v1/count.proto

package countv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.CNT_ACT(0)
)

// Validate checks the field values on Tdetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tdetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tdetail with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TdetailMultiError, or nil if none found.
func (m *Tdetail) ValidateAll() error {
	return m.validate(true)
}

func (m *Tdetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for Num

	// no validation rules for RealNum

	// no validation rules for Status

	if len(errors) > 0 {
		return TdetailMultiError(errors)
	}

	return nil
}

// TdetailMultiError is an error wrapping multiple validation errors returned
// by Tdetail.ValidateAll() if the designated constraints aren't met.
type TdetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TdetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TdetailMultiError) AllErrors() []error { return m }

// TdetailValidationError is the validation error returned by Tdetail.Validate
// if the designated constraints aren't met.
type TdetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TdetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TdetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TdetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TdetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TdetailValidationError) ErrorName() string { return "TdetailValidationError" }

// Error satisfies the builtin error interface
func (e TdetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTdetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TdetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TdetailValidationError{}

// Validate checks the field values on MsgEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgEventMultiError, or nil
// if none found.
func (m *MsgEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for Tid

	// no validation rules for Biz

	// no validation rules for Act

	// no validation rules for Val

	// no validation rules for Cycle

	// no validation rules for MsgTime

	if len(errors) > 0 {
		return MsgEventMultiError(errors)
	}

	return nil
}

// MsgEventMultiError is an error wrapping multiple validation errors returned
// by MsgEvent.ValidateAll() if the designated constraints aren't met.
type MsgEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgEventMultiError) AllErrors() []error { return m }

// MsgEventValidationError is the validation error returned by
// MsgEvent.Validate if the designated constraints aren't met.
type MsgEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgEventValidationError) ErrorName() string { return "MsgEventValidationError" }

// Error satisfies the builtin error interface
func (e MsgEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgEventValidationError{}

// Validate checks the field values on SetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetReqMultiError, or nil if none found.
func (m *SetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFid()) < 1 {
		err := SetReqValidationError{
			field:  "Fid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTid()) < 1 {
		err := SetReqValidationError{
			field:  "Tid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Biz

	// no validation rules for Act

	// no validation rules for Acti

	// no validation rules for Val

	// no validation rules for Ip

	// no validation rules for Ct

	// no validation rules for Did

	// no validation rules for MaxVal

	if len(errors) > 0 {
		return SetReqMultiError(errors)
	}

	return nil
}

// SetReqMultiError is an error wrapping multiple validation errors returned by
// SetReq.ValidateAll() if the designated constraints aren't met.
type SetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetReqMultiError) AllErrors() []error { return m }

// SetReqValidationError is the validation error returned by SetReq.Validate if
// the designated constraints aren't met.
type SetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetReqValidationError) ErrorName() string { return "SetReqValidationError" }

// Error satisfies the builtin error interface
func (e SetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetReqValidationError{}

// Validate checks the field values on SetRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetResMultiError, or nil if none found.
func (m *SetRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for Tid

	// no validation rules for Num

	// no validation rules for RealNum

	// no validation rules for Status

	if len(errors) > 0 {
		return SetResMultiError(errors)
	}

	return nil
}

// SetResMultiError is an error wrapping multiple validation errors returned by
// SetRes.ValidateAll() if the designated constraints aren't met.
type SetResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetResMultiError) AllErrors() []error { return m }

// SetResValidationError is the validation error returned by SetRes.Validate if
// the designated constraints aren't met.
type SetResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetResValidationError) ErrorName() string { return "SetResValidationError" }

// Error satisfies the builtin error interface
func (e SetResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetResValidationError{}

// Validate checks the field values on GetTdetailsByTidsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTdetailsByTidsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTdetailsByTidsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTdetailsByTidsReqMultiError, or nil if none found.
func (m *GetTdetailsByTidsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTdetailsByTidsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for Biz

	// no validation rules for Act

	// no validation rules for MaxFids

	if len(errors) > 0 {
		return GetTdetailsByTidsReqMultiError(errors)
	}

	return nil
}

// GetTdetailsByTidsReqMultiError is an error wrapping multiple validation
// errors returned by GetTdetailsByTidsReq.ValidateAll() if the designated
// constraints aren't met.
type GetTdetailsByTidsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTdetailsByTidsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTdetailsByTidsReqMultiError) AllErrors() []error { return m }

// GetTdetailsByTidsReqValidationError is the validation error returned by
// GetTdetailsByTidsReq.Validate if the designated constraints aren't met.
type GetTdetailsByTidsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTdetailsByTidsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTdetailsByTidsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTdetailsByTidsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTdetailsByTidsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTdetailsByTidsReqValidationError) ErrorName() string {
	return "GetTdetailsByTidsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTdetailsByTidsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTdetailsByTidsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTdetailsByTidsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTdetailsByTidsReqValidationError{}

// Validate checks the field values on GetTdetailsByTidsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTdetailsByTidsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTdetailsByTidsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTdetailsByTidsResMultiError, or nil if none found.
func (m *GetTdetailsByTidsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTdetailsByTidsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMap()))
		i := 0
		for key := range m.GetMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMap()[key]
			_ = val

			// no validation rules for Map[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetTdetailsByTidsResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetTdetailsByTidsResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetTdetailsByTidsResValidationError{
						field:  fmt.Sprintf("Map[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetTdetailsByTidsResMultiError(errors)
	}

	return nil
}

// GetTdetailsByTidsResMultiError is an error wrapping multiple validation
// errors returned by GetTdetailsByTidsRes.ValidateAll() if the designated
// constraints aren't met.
type GetTdetailsByTidsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTdetailsByTidsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTdetailsByTidsResMultiError) AllErrors() []error { return m }

// GetTdetailsByTidsResValidationError is the validation error returned by
// GetTdetailsByTidsRes.Validate if the designated constraints aren't met.
type GetTdetailsByTidsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTdetailsByTidsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTdetailsByTidsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTdetailsByTidsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTdetailsByTidsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTdetailsByTidsResValidationError) ErrorName() string {
	return "GetTdetailsByTidsResValidationError"
}

// Error satisfies the builtin error interface
func (e GetTdetailsByTidsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTdetailsByTidsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTdetailsByTidsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTdetailsByTidsResValidationError{}

// Validate checks the field values on GetTdetailsByFidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTdetailsByFidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTdetailsByFidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTdetailsByFidReqMultiError, or nil if none found.
func (m *GetTdetailsByFidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTdetailsByFidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFid()) < 1 {
		err := GetTdetailsByFidReqValidationError{
			field:  "Fid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Biz

	// no validation rules for Act

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetTdetailsByFidReqMultiError(errors)
	}

	return nil
}

// GetTdetailsByFidReqMultiError is an error wrapping multiple validation
// errors returned by GetTdetailsByFidReq.ValidateAll() if the designated
// constraints aren't met.
type GetTdetailsByFidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTdetailsByFidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTdetailsByFidReqMultiError) AllErrors() []error { return m }

// GetTdetailsByFidReqValidationError is the validation error returned by
// GetTdetailsByFidReq.Validate if the designated constraints aren't met.
type GetTdetailsByFidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTdetailsByFidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTdetailsByFidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTdetailsByFidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTdetailsByFidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTdetailsByFidReqValidationError) ErrorName() string {
	return "GetTdetailsByFidReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTdetailsByFidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTdetailsByFidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTdetailsByFidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTdetailsByFidReqValidationError{}

// Validate checks the field values on GetTdetailsByFidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTdetailsByFidRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTdetailsByFidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTdetailsByFidResMultiError, or nil if none found.
func (m *GetTdetailsByFidRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTdetailsByFidRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTdetailsByFidResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTdetailsByFidResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTdetailsByFidResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTdetailsByFidResMultiError(errors)
	}

	return nil
}

// GetTdetailsByFidResMultiError is an error wrapping multiple validation
// errors returned by GetTdetailsByFidRes.ValidateAll() if the designated
// constraints aren't met.
type GetTdetailsByFidResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTdetailsByFidResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTdetailsByFidResMultiError) AllErrors() []error { return m }

// GetTdetailsByFidResValidationError is the validation error returned by
// GetTdetailsByFidRes.Validate if the designated constraints aren't met.
type GetTdetailsByFidResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTdetailsByFidResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTdetailsByFidResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTdetailsByFidResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTdetailsByFidResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTdetailsByFidResValidationError) ErrorName() string {
	return "GetTdetailsByFidResValidationError"
}

// Error satisfies the builtin error interface
func (e GetTdetailsByFidResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTdetailsByFidRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTdetailsByFidResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTdetailsByFidResValidationError{}

// Validate checks the field values on GetFidsTdetailByTidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidsTdetailByTidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidsTdetailByTidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidsTdetailByTidReqMultiError, or nil if none found.
func (m *GetFidsTdetailByTidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidsTdetailByTidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	if utf8.RuneCountInString(m.GetTid()) < 1 {
		err := GetFidsTdetailByTidReqValidationError{
			field:  "Tid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Biz

	// no validation rules for Act

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetFidsTdetailByTidReqMultiError(errors)
	}

	return nil
}

// GetFidsTdetailByTidReqMultiError is an error wrapping multiple validation
// errors returned by GetFidsTdetailByTidReq.ValidateAll() if the designated
// constraints aren't met.
type GetFidsTdetailByTidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidsTdetailByTidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidsTdetailByTidReqMultiError) AllErrors() []error { return m }

// GetFidsTdetailByTidReqValidationError is the validation error returned by
// GetFidsTdetailByTidReq.Validate if the designated constraints aren't met.
type GetFidsTdetailByTidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidsTdetailByTidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidsTdetailByTidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidsTdetailByTidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidsTdetailByTidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidsTdetailByTidReqValidationError) ErrorName() string {
	return "GetFidsTdetailByTidReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidsTdetailByTidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidsTdetailByTidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidsTdetailByTidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidsTdetailByTidReqValidationError{}

// Validate checks the field values on GetFidsTdetailByTidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidsTdetailByTidRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidsTdetailByTidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidsTdetailByTidResMultiError, or nil if none found.
func (m *GetFidsTdetailByTidRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidsTdetailByTidRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for Num

	// no validation rules for RealNum

	// no validation rules for Status

	if len(errors) > 0 {
		return GetFidsTdetailByTidResMultiError(errors)
	}

	return nil
}

// GetFidsTdetailByTidResMultiError is an error wrapping multiple validation
// errors returned by GetFidsTdetailByTidRes.ValidateAll() if the designated
// constraints aren't met.
type GetFidsTdetailByTidResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidsTdetailByTidResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidsTdetailByTidResMultiError) AllErrors() []error { return m }

// GetFidsTdetailByTidResValidationError is the validation error returned by
// GetFidsTdetailByTidRes.Validate if the designated constraints aren't met.
type GetFidsTdetailByTidResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidsTdetailByTidResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidsTdetailByTidResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidsTdetailByTidResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidsTdetailByTidResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidsTdetailByTidResValidationError) ErrorName() string {
	return "GetFidsTdetailByTidResValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidsTdetailByTidResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidsTdetailByTidRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidsTdetailByTidResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidsTdetailByTidResValidationError{}

// Validate checks the field values on BAK with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *BAK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BAK with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BAKMultiError, or nil if none found.
func (m *BAK) ValidateAll() error {
	return m.validate(true)
}

func (m *BAK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for Act

	if len(errors) > 0 {
		return BAKMultiError(errors)
	}

	return nil
}

// BAKMultiError is an error wrapping multiple validation errors returned by
// BAK.ValidateAll() if the designated constraints aren't met.
type BAKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BAKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BAKMultiError) AllErrors() []error { return m }

// BAKValidationError is the validation error returned by BAK.Validate if the
// designated constraints aren't met.
type BAKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BAKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BAKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BAKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BAKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BAKValidationError) ErrorName() string { return "BAKValidationError" }

// Error satisfies the builtin error interface
func (e BAKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBAK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BAKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BAKValidationError{}

// Validate checks the field values on GetTnumByBaksAndTidsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTnumByBaksAndTidsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTnumByBaksAndTidsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTnumByBaksAndTidsReqMultiError, or nil if none found.
func (m *GetTnumByBaksAndTidsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTnumByBaksAndTidsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetBaks()) < 1 {
		err := GetTnumByBaksAndTidsReqValidationError{
			field:  "Baks",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetBaks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTnumByBaksAndTidsReqValidationError{
						field:  fmt.Sprintf("Baks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTnumByBaksAndTidsReqValidationError{
						field:  fmt.Sprintf("Baks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTnumByBaksAndTidsReqValidationError{
					field:  fmt.Sprintf("Baks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTnumByBaksAndTidsReqMultiError(errors)
	}

	return nil
}

// GetTnumByBaksAndTidsReqMultiError is an error wrapping multiple validation
// errors returned by GetTnumByBaksAndTidsReq.ValidateAll() if the designated
// constraints aren't met.
type GetTnumByBaksAndTidsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTnumByBaksAndTidsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTnumByBaksAndTidsReqMultiError) AllErrors() []error { return m }

// GetTnumByBaksAndTidsReqValidationError is the validation error returned by
// GetTnumByBaksAndTidsReq.Validate if the designated constraints aren't met.
type GetTnumByBaksAndTidsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTnumByBaksAndTidsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTnumByBaksAndTidsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTnumByBaksAndTidsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTnumByBaksAndTidsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTnumByBaksAndTidsReqValidationError) ErrorName() string {
	return "GetTnumByBaksAndTidsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetTnumByBaksAndTidsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTnumByBaksAndTidsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTnumByBaksAndTidsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTnumByBaksAndTidsReqValidationError{}

// Validate checks the field values on TargetActsCount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TargetActsCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetActsCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetActsCountMultiError, or nil if none found.
func (m *TargetActsCount) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetActsCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Map

	if len(errors) > 0 {
		return TargetActsCountMultiError(errors)
	}

	return nil
}

// TargetActsCountMultiError is an error wrapping multiple validation errors
// returned by TargetActsCount.ValidateAll() if the designated constraints
// aren't met.
type TargetActsCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetActsCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetActsCountMultiError) AllErrors() []error { return m }

// TargetActsCountValidationError is the validation error returned by
// TargetActsCount.Validate if the designated constraints aren't met.
type TargetActsCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetActsCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetActsCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetActsCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetActsCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetActsCountValidationError) ErrorName() string { return "TargetActsCountValidationError" }

// Error satisfies the builtin error interface
func (e TargetActsCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetActsCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetActsCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetActsCountValidationError{}

// Validate checks the field values on GetTnumByBaksAndTidsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTnumByBaksAndTidsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTnumByBaksAndTidsRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTnumByBaksAndTidsResMultiError, or nil if none found.
func (m *GetTnumByBaksAndTidsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTnumByBaksAndTidsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMap()))
		i := 0
		for key := range m.GetMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMap()[key]
			_ = val

			// no validation rules for Map[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetTnumByBaksAndTidsResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetTnumByBaksAndTidsResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetTnumByBaksAndTidsResValidationError{
						field:  fmt.Sprintf("Map[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetTnumByBaksAndTidsResMultiError(errors)
	}

	return nil
}

// GetTnumByBaksAndTidsResMultiError is an error wrapping multiple validation
// errors returned by GetTnumByBaksAndTidsRes.ValidateAll() if the designated
// constraints aren't met.
type GetTnumByBaksAndTidsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTnumByBaksAndTidsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTnumByBaksAndTidsResMultiError) AllErrors() []error { return m }

// GetTnumByBaksAndTidsResValidationError is the validation error returned by
// GetTnumByBaksAndTidsRes.Validate if the designated constraints aren't met.
type GetTnumByBaksAndTidsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTnumByBaksAndTidsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTnumByBaksAndTidsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTnumByBaksAndTidsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTnumByBaksAndTidsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTnumByBaksAndTidsResValidationError) ErrorName() string {
	return "GetTnumByBaksAndTidsResValidationError"
}

// Error satisfies the builtin error interface
func (e GetTnumByBaksAndTidsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTnumByBaksAndTidsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTnumByBaksAndTidsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTnumByBaksAndTidsResValidationError{}

// Validate checks the field values on GetTanumReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTanumReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTanumReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTanumReqMultiError, or
// nil if none found.
func (m *GetTanumReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTanumReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for Biz

	// no validation rules for Act

	if len(errors) > 0 {
		return GetTanumReqMultiError(errors)
	}

	return nil
}

// GetTanumReqMultiError is an error wrapping multiple validation errors
// returned by GetTanumReq.ValidateAll() if the designated constraints aren't met.
type GetTanumReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTanumReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTanumReqMultiError) AllErrors() []error { return m }

// GetTanumReqValidationError is the validation error returned by
// GetTanumReq.Validate if the designated constraints aren't met.
type GetTanumReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTanumReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTanumReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTanumReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTanumReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTanumReqValidationError) ErrorName() string { return "GetTanumReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTanumReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTanumReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTanumReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTanumReqValidationError{}

// Validate checks the field values on GetTanumRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTanumRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTanumRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTanumResMultiError, or
// nil if none found.
func (m *GetTanumRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTanumRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Num

	// no validation rules for RealNum

	if len(errors) > 0 {
		return GetTanumResMultiError(errors)
	}

	return nil
}

// GetTanumResMultiError is an error wrapping multiple validation errors
// returned by GetTanumRes.ValidateAll() if the designated constraints aren't met.
type GetTanumResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTanumResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTanumResMultiError) AllErrors() []error { return m }

// GetTanumResValidationError is the validation error returned by
// GetTanumRes.Validate if the designated constraints aren't met.
type GetTanumResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTanumResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTanumResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTanumResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTanumResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTanumResValidationError) ErrorName() string { return "GetTanumResValidationError" }

// Error satisfies the builtin error interface
func (e GetTanumResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTanumRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTanumResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTanumResValidationError{}

// Validate checks the field values on TidList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TidList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TidList with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TidListMultiError, or nil if none found.
func (m *TidList) ValidateAll() error {
	return m.validate(true)
}

func (m *TidList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TidListMultiError(errors)
	}

	return nil
}

// TidListMultiError is an error wrapping multiple validation errors returned
// by TidList.ValidateAll() if the designated constraints aren't met.
type TidListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TidListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TidListMultiError) AllErrors() []error { return m }

// TidListValidationError is the validation error returned by TidList.Validate
// if the designated constraints aren't met.
type TidListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TidListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TidListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TidListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TidListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TidListValidationError) ErrorName() string { return "TidListValidationError" }

// Error satisfies the builtin error interface
func (e TidListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTidList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TidListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TidListValidationError{}

// Validate checks the field values on BatchGetTidRealNumReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetTidRealNumReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetTidRealNumReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetTidRealNumReqMultiError, or nil if none found.
func (m *BatchGetTidRealNumReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetTidRealNumReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetBakToTids()))
		i := 0
		for key := range m.GetBakToTids() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBakToTids()[key]
			_ = val

			// no validation rules for BakToTids[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, BatchGetTidRealNumReqValidationError{
							field:  fmt.Sprintf("BakToTids[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, BatchGetTidRealNumReqValidationError{
							field:  fmt.Sprintf("BakToTids[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return BatchGetTidRealNumReqValidationError{
						field:  fmt.Sprintf("BakToTids[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return BatchGetTidRealNumReqMultiError(errors)
	}

	return nil
}

// BatchGetTidRealNumReqMultiError is an error wrapping multiple validation
// errors returned by BatchGetTidRealNumReq.ValidateAll() if the designated
// constraints aren't met.
type BatchGetTidRealNumReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetTidRealNumReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetTidRealNumReqMultiError) AllErrors() []error { return m }

// BatchGetTidRealNumReqValidationError is the validation error returned by
// BatchGetTidRealNumReq.Validate if the designated constraints aren't met.
type BatchGetTidRealNumReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetTidRealNumReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetTidRealNumReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetTidRealNumReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetTidRealNumReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetTidRealNumReqValidationError) ErrorName() string {
	return "BatchGetTidRealNumReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetTidRealNumReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetTidRealNumReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetTidRealNumReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetTidRealNumReqValidationError{}

// Validate checks the field values on Tanum with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tanum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tanum with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TanumMultiError, or nil if none found.
func (m *Tanum) ValidateAll() error {
	return m.validate(true)
}

func (m *Tanum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Num

	// no validation rules for RealNum

	if len(errors) > 0 {
		return TanumMultiError(errors)
	}

	return nil
}

// TanumMultiError is an error wrapping multiple validation errors returned by
// Tanum.ValidateAll() if the designated constraints aren't met.
type TanumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TanumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TanumMultiError) AllErrors() []error { return m }

// TanumValidationError is the validation error returned by Tanum.Validate if
// the designated constraints aren't met.
type TanumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TanumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TanumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TanumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TanumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TanumValidationError) ErrorName() string { return "TanumValidationError" }

// Error satisfies the builtin error interface
func (e TanumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTanum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TanumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TanumValidationError{}

// Validate checks the field values on TidToTanum with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TidToTanum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TidToTanum with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TidToTanumMultiError, or
// nil if none found.
func (m *TidToTanum) ValidateAll() error {
	return m.validate(true)
}

func (m *TidToTanum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMap()))
		i := 0
		for key := range m.GetMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMap()[key]
			_ = val

			// no validation rules for Map[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TidToTanumValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TidToTanumValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TidToTanumValidationError{
						field:  fmt.Sprintf("Map[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return TidToTanumMultiError(errors)
	}

	return nil
}

// TidToTanumMultiError is an error wrapping multiple validation errors
// returned by TidToTanum.ValidateAll() if the designated constraints aren't met.
type TidToTanumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TidToTanumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TidToTanumMultiError) AllErrors() []error { return m }

// TidToTanumValidationError is the validation error returned by
// TidToTanum.Validate if the designated constraints aren't met.
type TidToTanumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TidToTanumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TidToTanumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TidToTanumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TidToTanumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TidToTanumValidationError) ErrorName() string { return "TidToTanumValidationError" }

// Error satisfies the builtin error interface
func (e TidToTanumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTidToTanum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TidToTanumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TidToTanumValidationError{}

// Validate checks the field values on BatchGetTidRealNumRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetTidRealNumRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetTidRealNumRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetTidRealNumResMultiError, or nil if none found.
func (m *BatchGetTidRealNumRes) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetTidRealNumRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMap()))
		i := 0
		for key := range m.GetMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMap()[key]
			_ = val

			// no validation rules for Map[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, BatchGetTidRealNumResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, BatchGetTidRealNumResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return BatchGetTidRealNumResValidationError{
						field:  fmt.Sprintf("Map[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return BatchGetTidRealNumResMultiError(errors)
	}

	return nil
}

// BatchGetTidRealNumResMultiError is an error wrapping multiple validation
// errors returned by BatchGetTidRealNumRes.ValidateAll() if the designated
// constraints aren't met.
type BatchGetTidRealNumResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetTidRealNumResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetTidRealNumResMultiError) AllErrors() []error { return m }

// BatchGetTidRealNumResValidationError is the validation error returned by
// BatchGetTidRealNumRes.Validate if the designated constraints aren't met.
type BatchGetTidRealNumResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetTidRealNumResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetTidRealNumResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetTidRealNumResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetTidRealNumResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetTidRealNumResValidationError) ErrorName() string {
	return "BatchGetTidRealNumResValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetTidRealNumResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetTidRealNumRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetTidRealNumResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetTidRealNumResValidationError{}

// Validate checks the field values on GetFidsByTidDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidsByTidDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidsByTidDetailReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidsByTidDetailReqMultiError, or nil if none found.
func (m *GetFidsByTidDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidsByTidDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for Tid

	// no validation rules for Biz

	// no validation rules for Act

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFidsByTidDetailReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFidsByTidDetailReqValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFidsByTidDetailReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFidsByTidDetailReqMultiError(errors)
	}

	return nil
}

// GetFidsByTidDetailReqMultiError is an error wrapping multiple validation
// errors returned by GetFidsByTidDetailReq.ValidateAll() if the designated
// constraints aren't met.
type GetFidsByTidDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidsByTidDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidsByTidDetailReqMultiError) AllErrors() []error { return m }

// GetFidsByTidDetailReqValidationError is the validation error returned by
// GetFidsByTidDetailReq.Validate if the designated constraints aren't met.
type GetFidsByTidDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidsByTidDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidsByTidDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidsByTidDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidsByTidDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidsByTidDetailReqValidationError) ErrorName() string {
	return "GetFidsByTidDetailReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidsByTidDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidsByTidDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidsByTidDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidsByTidDetailReqValidationError{}

// Validate checks the field values on GetFidsByTidDetailRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidsByTidDetailRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidsByTidDetailRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidsByTidDetailResMultiError, or nil if none found.
func (m *GetFidsByTidDetailRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidsByTidDetailRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFidsByTidDetailResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFidsByTidDetailResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFidsByTidDetailResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFidsByTidDetailResMultiError(errors)
	}

	return nil
}

// GetFidsByTidDetailResMultiError is an error wrapping multiple validation
// errors returned by GetFidsByTidDetailRes.ValidateAll() if the designated
// constraints aren't met.
type GetFidsByTidDetailResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidsByTidDetailResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidsByTidDetailResMultiError) AllErrors() []error { return m }

// GetFidsByTidDetailResValidationError is the validation error returned by
// GetFidsByTidDetailRes.Validate if the designated constraints aren't met.
type GetFidsByTidDetailResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidsByTidDetailResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidsByTidDetailResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidsByTidDetailResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidsByTidDetailResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidsByTidDetailResValidationError) ErrorName() string {
	return "GetFidsByTidDetailResValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidsByTidDetailResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidsByTidDetailRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidsByTidDetailResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidsByTidDetailResValidationError{}

// Validate checks the field values on GetFidsByTidDetailItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidsByTidDetailItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidsByTidDetailItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidsByTidDetailItemMultiError, or nil if none found.
func (m *GetFidsByTidDetailItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidsByTidDetailItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for ActTime

	if len(errors) > 0 {
		return GetFidsByTidDetailItemMultiError(errors)
	}

	return nil
}

// GetFidsByTidDetailItemMultiError is an error wrapping multiple validation
// errors returned by GetFidsByTidDetailItem.ValidateAll() if the designated
// constraints aren't met.
type GetFidsByTidDetailItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidsByTidDetailItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidsByTidDetailItemMultiError) AllErrors() []error { return m }

// GetFidsByTidDetailItemValidationError is the validation error returned by
// GetFidsByTidDetailItem.Validate if the designated constraints aren't met.
type GetFidsByTidDetailItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidsByTidDetailItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidsByTidDetailItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidsByTidDetailItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidsByTidDetailItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidsByTidDetailItemValidationError) ErrorName() string {
	return "GetFidsByTidDetailItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidsByTidDetailItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidsByTidDetailItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidsByTidDetailItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidsByTidDetailItemValidationError{}

// Validate checks the field values on GetFidToTidsStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidToTidsStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidToTidsStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidToTidsStatusReqMultiError, or nil if none found.
func (m *GetFidToTidsStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidToTidsStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for Biz

	// no validation rules for Act

	// no validation rules for NeedFids

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetFidToTidsStatusReqMultiError(errors)
	}

	return nil
}

// GetFidToTidsStatusReqMultiError is an error wrapping multiple validation
// errors returned by GetFidToTidsStatusReq.ValidateAll() if the designated
// constraints aren't met.
type GetFidToTidsStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidToTidsStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidToTidsStatusReqMultiError) AllErrors() []error { return m }

// GetFidToTidsStatusReqValidationError is the validation error returned by
// GetFidToTidsStatusReq.Validate if the designated constraints aren't met.
type GetFidToTidsStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidToTidsStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidToTidsStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidToTidsStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidToTidsStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidToTidsStatusReqValidationError) ErrorName() string {
	return "GetFidToTidsStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidToTidsStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidToTidsStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidToTidsStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidToTidsStatusReqValidationError{}

// Validate checks the field values on GetFidToTidsStatusRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidToTidsStatusRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidToTidsStatusRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidToTidsStatusResMultiError, or nil if none found.
func (m *GetFidToTidsStatusRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidToTidsStatusRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMap()))
		i := 0
		for key := range m.GetMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMap()[key]
			_ = val

			// no validation rules for Map[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetFidToTidsStatusResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetFidToTidsStatusResValidationError{
							field:  fmt.Sprintf("Map[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetFidToTidsStatusResValidationError{
						field:  fmt.Sprintf("Map[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetFidToTidsStatusResMultiError(errors)
	}

	return nil
}

// GetFidToTidsStatusResMultiError is an error wrapping multiple validation
// errors returned by GetFidToTidsStatusRes.ValidateAll() if the designated
// constraints aren't met.
type GetFidToTidsStatusResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidToTidsStatusResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidToTidsStatusResMultiError) AllErrors() []error { return m }

// GetFidToTidsStatusResValidationError is the validation error returned by
// GetFidToTidsStatusRes.Validate if the designated constraints aren't met.
type GetFidToTidsStatusResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidToTidsStatusResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidToTidsStatusResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidToTidsStatusResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidToTidsStatusResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidToTidsStatusResValidationError) ErrorName() string {
	return "GetFidToTidsStatusResValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidToTidsStatusResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidToTidsStatusRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidToTidsStatusResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidToTidsStatusResValidationError{}

// Validate checks the field values on GetFidToTidsStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFidToTidsStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFidToTidsStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFidToTidsStatusMultiError, or nil if none found.
func (m *GetFidToTidsStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFidToTidsStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	// no validation rules for Tid

	// no validation rules for Num

	// no validation rules for RealNum

	// no validation rules for Status

	if len(errors) > 0 {
		return GetFidToTidsStatusMultiError(errors)
	}

	return nil
}

// GetFidToTidsStatusMultiError is an error wrapping multiple validation errors
// returned by GetFidToTidsStatus.ValidateAll() if the designated constraints
// aren't met.
type GetFidToTidsStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFidToTidsStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFidToTidsStatusMultiError) AllErrors() []error { return m }

// GetFidToTidsStatusValidationError is the validation error returned by
// GetFidToTidsStatus.Validate if the designated constraints aren't met.
type GetFidToTidsStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFidToTidsStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFidToTidsStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFidToTidsStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFidToTidsStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFidToTidsStatusValidationError) ErrorName() string {
	return "GetFidToTidsStatusValidationError"
}

// Error satisfies the builtin error interface
func (e GetFidToTidsStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFidToTidsStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFidToTidsStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFidToTidsStatusValidationError{}

// Validate checks the field values on DBGetTdetailsByFidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DBGetTdetailsByFidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DBGetTdetailsByFidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DBGetTdetailsByFidReqMultiError, or nil if none found.
func (m *DBGetTdetailsByFidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DBGetTdetailsByFidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFid()) < 1 {
		err := DBGetTdetailsByFidReqValidationError{
			field:  "Fid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Biz

	// no validation rules for Act

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DBGetTdetailsByFidReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DBGetTdetailsByFidReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DBGetTdetailsByFidReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DBGetTdetailsByFidReqMultiError(errors)
	}

	return nil
}

// DBGetTdetailsByFidReqMultiError is an error wrapping multiple validation
// errors returned by DBGetTdetailsByFidReq.ValidateAll() if the designated
// constraints aren't met.
type DBGetTdetailsByFidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DBGetTdetailsByFidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DBGetTdetailsByFidReqMultiError) AllErrors() []error { return m }

// DBGetTdetailsByFidReqValidationError is the validation error returned by
// DBGetTdetailsByFidReq.Validate if the designated constraints aren't met.
type DBGetTdetailsByFidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBGetTdetailsByFidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBGetTdetailsByFidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBGetTdetailsByFidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DBGetTdetailsByFidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBGetTdetailsByFidReqValidationError) ErrorName() string {
	return "DBGetTdetailsByFidReqValidationError"
}

// Error satisfies the builtin error interface
func (e DBGetTdetailsByFidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBGetTdetailsByFidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBGetTdetailsByFidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DBGetTdetailsByFidReqValidationError{}

// Validate checks the field values on DBGetTdetailsByFidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DBGetTdetailsByFidRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DBGetTdetailsByFidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DBGetTdetailsByFidResMultiError, or nil if none found.
func (m *DBGetTdetailsByFidRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DBGetTdetailsByFidRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DBGetTdetailsByFidResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DBGetTdetailsByFidResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DBGetTdetailsByFidResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DBGetTdetailsByFidResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DBGetTdetailsByFidResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DBGetTdetailsByFidResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DBGetTdetailsByFidResMultiError(errors)
	}

	return nil
}

// DBGetTdetailsByFidResMultiError is an error wrapping multiple validation
// errors returned by DBGetTdetailsByFidRes.ValidateAll() if the designated
// constraints aren't met.
type DBGetTdetailsByFidResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DBGetTdetailsByFidResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DBGetTdetailsByFidResMultiError) AllErrors() []error { return m }

// DBGetTdetailsByFidResValidationError is the validation error returned by
// DBGetTdetailsByFidRes.Validate if the designated constraints aren't met.
type DBGetTdetailsByFidResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBGetTdetailsByFidResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBGetTdetailsByFidResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBGetTdetailsByFidResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DBGetTdetailsByFidResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBGetTdetailsByFidResValidationError) ErrorName() string {
	return "DBGetTdetailsByFidResValidationError"
}

// Error satisfies the builtin error interface
func (e DBGetTdetailsByFidResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBGetTdetailsByFidRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBGetTdetailsByFidResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DBGetTdetailsByFidResValidationError{}

// Validate checks the field values on DBGetFidsTdetailByTidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DBGetFidsTdetailByTidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DBGetFidsTdetailByTidReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DBGetFidsTdetailByTidReqMultiError, or nil if none found.
func (m *DBGetFidsTdetailByTidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DBGetFidsTdetailByTidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fid

	if utf8.RuneCountInString(m.GetTid()) < 1 {
		err := DBGetFidsTdetailByTidReqValidationError{
			field:  "Tid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Biz

	// no validation rules for Act

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DBGetFidsTdetailByTidReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DBGetFidsTdetailByTidReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DBGetFidsTdetailByTidReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DBGetFidsTdetailByTidReqMultiError(errors)
	}

	return nil
}

// DBGetFidsTdetailByTidReqMultiError is an error wrapping multiple validation
// errors returned by DBGetFidsTdetailByTidReq.ValidateAll() if the designated
// constraints aren't met.
type DBGetFidsTdetailByTidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DBGetFidsTdetailByTidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DBGetFidsTdetailByTidReqMultiError) AllErrors() []error { return m }

// DBGetFidsTdetailByTidReqValidationError is the validation error returned by
// DBGetFidsTdetailByTidReq.Validate if the designated constraints aren't met.
type DBGetFidsTdetailByTidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBGetFidsTdetailByTidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBGetFidsTdetailByTidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBGetFidsTdetailByTidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DBGetFidsTdetailByTidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBGetFidsTdetailByTidReqValidationError) ErrorName() string {
	return "DBGetFidsTdetailByTidReqValidationError"
}

// Error satisfies the builtin error interface
func (e DBGetFidsTdetailByTidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBGetFidsTdetailByTidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBGetFidsTdetailByTidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DBGetFidsTdetailByTidReqValidationError{}

// Validate checks the field values on DBGetFidsTdetailByTidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DBGetFidsTdetailByTidRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DBGetFidsTdetailByTidRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DBGetFidsTdetailByTidResMultiError, or nil if none found.
func (m *DBGetFidsTdetailByTidRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DBGetFidsTdetailByTidRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tid

	// no validation rules for Num

	// no validation rules for RealNum

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DBGetFidsTdetailByTidResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DBGetFidsTdetailByTidResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DBGetFidsTdetailByTidResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DBGetFidsTdetailByTidResMultiError(errors)
	}

	return nil
}

// DBGetFidsTdetailByTidResMultiError is an error wrapping multiple validation
// errors returned by DBGetFidsTdetailByTidRes.ValidateAll() if the designated
// constraints aren't met.
type DBGetFidsTdetailByTidResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DBGetFidsTdetailByTidResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DBGetFidsTdetailByTidResMultiError) AllErrors() []error { return m }

// DBGetFidsTdetailByTidResValidationError is the validation error returned by
// DBGetFidsTdetailByTidRes.Validate if the designated constraints aren't met.
type DBGetFidsTdetailByTidResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DBGetFidsTdetailByTidResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DBGetFidsTdetailByTidResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DBGetFidsTdetailByTidResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DBGetFidsTdetailByTidResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DBGetFidsTdetailByTidResValidationError) ErrorName() string {
	return "DBGetFidsTdetailByTidResValidationError"
}

// Error satisfies the builtin error interface
func (e DBGetFidsTdetailByTidResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDBGetFidsTdetailByTidRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DBGetFidsTdetailByTidResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DBGetFidsTdetailByTidResValidationError{}

// Validate checks the field values on GetTnumByFidsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTnumByFidsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTnumByFidsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTnumByFidsReqMultiError, or nil if none found.
func (m *GetTnumByFidsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTnumByFidsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Biz

	// no validation rules for Act

	if len(errors) > 0 {
		return GetTnumByFidsReqMultiError(errors)
	}

	return nil
}

// GetTnumByFidsReqMultiError is an error wrapping multiple validation errors
// returned by GetTnumByFidsReq.ValidateAll() if the designated constraints
// aren't met.
type GetTnumByFidsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTnumByFidsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTnumByFidsReqMultiError) AllErrors() []error { return m }

// GetTnumByFidsReqValidationError is the validation error returned by
// GetTnumByFidsReq.Validate if the designated constraints aren't met.
type GetTnumByFidsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTnumByFidsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTnumByFidsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTnumByFidsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTnumByFidsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTnumByFidsReqValidationError) ErrorName() string { return "GetTnumByFidsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTnumByFidsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTnumByFidsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTnumByFidsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTnumByFidsReqValidationError{}

// Validate checks the field values on GetTnumByFidsRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTnumByFidsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTnumByFidsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTnumByFidsResMultiError, or nil if none found.
func (m *GetTnumByFidsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTnumByFidsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Map

	if len(errors) > 0 {
		return GetTnumByFidsResMultiError(errors)
	}

	return nil
}

// GetTnumByFidsResMultiError is an error wrapping multiple validation errors
// returned by GetTnumByFidsRes.ValidateAll() if the designated constraints
// aren't met.
type GetTnumByFidsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTnumByFidsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTnumByFidsResMultiError) AllErrors() []error { return m }

// GetTnumByFidsResValidationError is the validation error returned by
// GetTnumByFidsRes.Validate if the designated constraints aren't met.
type GetTnumByFidsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTnumByFidsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTnumByFidsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTnumByFidsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTnumByFidsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTnumByFidsResValidationError) ErrorName() string { return "GetTnumByFidsResValidationError" }

// Error satisfies the builtin error interface
func (e GetTnumByFidsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTnumByFidsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTnumByFidsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTnumByFidsResValidationError{}
