// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package countv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountClient is the client API for Count service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountClient interface {
	// Set 增加计数关系 add、subtract、update
	// 使用场景：源用户A Follow 目标用户B；此时A是B的Follower，B是A的Followee
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRes, error)
	// GetTdetailsByTids 批量获取多个 tid 的指定业务动作计数结果
	// 使用场景：查询多个用户(B\B1\B2...)的计数详情列表
	//         查询A对多个用户(B\B1\B2...)的动作状态(是否Follow)
	GetTdetailsByTids(ctx context.Context, in *GetTdetailsByTidsReq, opts ...grpc.CallOption) (*GetTdetailsByTidsRes, error)
	// GetTdetailsByFid 批量获取 fid 的指定业务动作计数结果
	// 使用场景：查询用户A的Followings列表
	GetTdetailsByFid(ctx context.Context, in *GetTdetailsByFidReq, opts ...grpc.CallOption) (*GetTdetailsByFidRes, error)
	// GetFidsByTid 获取单个 tid 的指定业务动作 fids
	// 使用场景：查询用户B的Followers计数详情列表,及用户A对每个B状态(TODO 拆分成两个rpc)
	GetFidsTdetailByTid(ctx context.Context, in *GetFidsTdetailByTidReq, opts ...grpc.CallOption) (*GetFidsTdetailByTidRes, error)
	// [暂无需使用] BatchGetTdetails 批量获取 tid 指定业务动作计数结果
	// 使用场景：查询多个用户被Follow总数和被Watch总数
	GetTnumByBaksAndTids(ctx context.Context, in *GetTnumByBaksAndTidsReq, opts ...grpc.CallOption) (*GetTnumByBaksAndTidsRes, error)
	// 类似 GetTdetailsByFid，不过是从数据库查询，可以查询完整列表
	// 使用场景：查询一个用户的Following列表，列表包含每个following的详情数据
	DBGetTdetailsByFid(ctx context.Context, in *DBGetTdetailsByFidReq, opts ...grpc.CallOption) (*DBGetTdetailsByFidRes, error)
	// 类似 GetFidsTdetailByTid，不过是从数据库查询，可以查询完整列表
	// 使用场景：查询一个用户的Followers ids，如果需要查询follower的详情数据，需要使用DBGetTdetailsByFid接口
	DBGetFidsTdetailByTid(ctx context.Context, in *DBGetFidsTdetailByTidReq, opts ...grpc.CallOption) (*DBGetFidsTdetailByTidRes, error)
	// 使用场景：查询多个用户(A\A1\A2...)的TargetNum
	GetTnumByFids(ctx context.Context, in *GetTnumByFidsReq, opts ...grpc.CallOption) (*GetTnumByFidsRes, error)
}

type countClient struct {
	cc grpc.ClientConnInterface
}

func NewCountClient(cc grpc.ClientConnInterface) CountClient {
	return &countClient{cc}
}

func (c *countClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRes, error) {
	out := new(SetRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) GetTdetailsByTids(ctx context.Context, in *GetTdetailsByTidsReq, opts ...grpc.CallOption) (*GetTdetailsByTidsRes, error) {
	out := new(GetTdetailsByTidsRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/GetTdetailsByTids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) GetTdetailsByFid(ctx context.Context, in *GetTdetailsByFidReq, opts ...grpc.CallOption) (*GetTdetailsByFidRes, error) {
	out := new(GetTdetailsByFidRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/GetTdetailsByFid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) GetFidsTdetailByTid(ctx context.Context, in *GetFidsTdetailByTidReq, opts ...grpc.CallOption) (*GetFidsTdetailByTidRes, error) {
	out := new(GetFidsTdetailByTidRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/GetFidsTdetailByTid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) GetTnumByBaksAndTids(ctx context.Context, in *GetTnumByBaksAndTidsReq, opts ...grpc.CallOption) (*GetTnumByBaksAndTidsRes, error) {
	out := new(GetTnumByBaksAndTidsRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/GetTnumByBaksAndTids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) DBGetTdetailsByFid(ctx context.Context, in *DBGetTdetailsByFidReq, opts ...grpc.CallOption) (*DBGetTdetailsByFidRes, error) {
	out := new(DBGetTdetailsByFidRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/DBGetTdetailsByFid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) DBGetFidsTdetailByTid(ctx context.Context, in *DBGetFidsTdetailByTidReq, opts ...grpc.CallOption) (*DBGetFidsTdetailByTidRes, error) {
	out := new(DBGetFidsTdetailByTidRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/DBGetFidsTdetailByTid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) GetTnumByFids(ctx context.Context, in *GetTnumByFidsReq, opts ...grpc.CallOption) (*GetTnumByFidsRes, error) {
	out := new(GetTnumByFidsRes)
	err := c.cc.Invoke(ctx, "/count.v1.Count/GetTnumByFids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountServer is the server API for Count service.
// All implementations should embed UnimplementedCountServer
// for forward compatibility
type CountServer interface {
	// Set 增加计数关系 add、subtract、update
	// 使用场景：源用户A Follow 目标用户B；此时A是B的Follower，B是A的Followee
	Set(context.Context, *SetReq) (*SetRes, error)
	// GetTdetailsByTids 批量获取多个 tid 的指定业务动作计数结果
	// 使用场景：查询多个用户(B\B1\B2...)的计数详情列表
	//         查询A对多个用户(B\B1\B2...)的动作状态(是否Follow)
	GetTdetailsByTids(context.Context, *GetTdetailsByTidsReq) (*GetTdetailsByTidsRes, error)
	// GetTdetailsByFid 批量获取 fid 的指定业务动作计数结果
	// 使用场景：查询用户A的Followings列表
	GetTdetailsByFid(context.Context, *GetTdetailsByFidReq) (*GetTdetailsByFidRes, error)
	// GetFidsByTid 获取单个 tid 的指定业务动作 fids
	// 使用场景：查询用户B的Followers计数详情列表,及用户A对每个B状态(TODO 拆分成两个rpc)
	GetFidsTdetailByTid(context.Context, *GetFidsTdetailByTidReq) (*GetFidsTdetailByTidRes, error)
	// [暂无需使用] BatchGetTdetails 批量获取 tid 指定业务动作计数结果
	// 使用场景：查询多个用户被Follow总数和被Watch总数
	GetTnumByBaksAndTids(context.Context, *GetTnumByBaksAndTidsReq) (*GetTnumByBaksAndTidsRes, error)
	// 类似 GetTdetailsByFid，不过是从数据库查询，可以查询完整列表
	// 使用场景：查询一个用户的Following列表，列表包含每个following的详情数据
	DBGetTdetailsByFid(context.Context, *DBGetTdetailsByFidReq) (*DBGetTdetailsByFidRes, error)
	// 类似 GetFidsTdetailByTid，不过是从数据库查询，可以查询完整列表
	// 使用场景：查询一个用户的Followers ids，如果需要查询follower的详情数据，需要使用DBGetTdetailsByFid接口
	DBGetFidsTdetailByTid(context.Context, *DBGetFidsTdetailByTidReq) (*DBGetFidsTdetailByTidRes, error)
	// 使用场景：查询多个用户(A\A1\A2...)的TargetNum
	GetTnumByFids(context.Context, *GetTnumByFidsReq) (*GetTnumByFidsRes, error)
}

// UnimplementedCountServer should be embedded to have forward compatible implementations.
type UnimplementedCountServer struct {
}

func (UnimplementedCountServer) Set(context.Context, *SetReq) (*SetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCountServer) GetTdetailsByTids(context.Context, *GetTdetailsByTidsReq) (*GetTdetailsByTidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTdetailsByTids not implemented")
}
func (UnimplementedCountServer) GetTdetailsByFid(context.Context, *GetTdetailsByFidReq) (*GetTdetailsByFidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTdetailsByFid not implemented")
}
func (UnimplementedCountServer) GetFidsTdetailByTid(context.Context, *GetFidsTdetailByTidReq) (*GetFidsTdetailByTidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFidsTdetailByTid not implemented")
}
func (UnimplementedCountServer) GetTnumByBaksAndTids(context.Context, *GetTnumByBaksAndTidsReq) (*GetTnumByBaksAndTidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTnumByBaksAndTids not implemented")
}
func (UnimplementedCountServer) DBGetTdetailsByFid(context.Context, *DBGetTdetailsByFidReq) (*DBGetTdetailsByFidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DBGetTdetailsByFid not implemented")
}
func (UnimplementedCountServer) DBGetFidsTdetailByTid(context.Context, *DBGetFidsTdetailByTidReq) (*DBGetFidsTdetailByTidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DBGetFidsTdetailByTid not implemented")
}
func (UnimplementedCountServer) GetTnumByFids(context.Context, *GetTnumByFidsReq) (*GetTnumByFidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTnumByFids not implemented")
}

// UnsafeCountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountServer will
// result in compilation errors.
type UnsafeCountServer interface {
	mustEmbedUnimplementedCountServer()
}

func RegisterCountServer(s grpc.ServiceRegistrar, srv CountServer) {
	s.RegisterService(&Count_ServiceDesc, srv)
}

func _Count_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_GetTdetailsByTids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTdetailsByTidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).GetTdetailsByTids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/GetTdetailsByTids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).GetTdetailsByTids(ctx, req.(*GetTdetailsByTidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_GetTdetailsByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTdetailsByFidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).GetTdetailsByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/GetTdetailsByFid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).GetTdetailsByFid(ctx, req.(*GetTdetailsByFidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_GetFidsTdetailByTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFidsTdetailByTidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).GetFidsTdetailByTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/GetFidsTdetailByTid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).GetFidsTdetailByTid(ctx, req.(*GetFidsTdetailByTidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_GetTnumByBaksAndTids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTnumByBaksAndTidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).GetTnumByBaksAndTids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/GetTnumByBaksAndTids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).GetTnumByBaksAndTids(ctx, req.(*GetTnumByBaksAndTidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_DBGetTdetailsByFid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBGetTdetailsByFidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).DBGetTdetailsByFid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/DBGetTdetailsByFid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).DBGetTdetailsByFid(ctx, req.(*DBGetTdetailsByFidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_DBGetFidsTdetailByTid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBGetFidsTdetailByTidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).DBGetFidsTdetailByTid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/DBGetFidsTdetailByTid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).DBGetFidsTdetailByTid(ctx, req.(*DBGetFidsTdetailByTidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_GetTnumByFids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTnumByFidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).GetTnumByFids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/count.v1.Count/GetTnumByFids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).GetTnumByFids(ctx, req.(*GetTnumByFidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Count_ServiceDesc is the grpc.ServiceDesc for Count service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Count_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "count.v1.Count",
	HandlerType: (*CountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Count_Set_Handler,
		},
		{
			MethodName: "GetTdetailsByTids",
			Handler:    _Count_GetTdetailsByTids_Handler,
		},
		{
			MethodName: "GetTdetailsByFid",
			Handler:    _Count_GetTdetailsByFid_Handler,
		},
		{
			MethodName: "GetFidsTdetailByTid",
			Handler:    _Count_GetFidsTdetailByTid_Handler,
		},
		{
			MethodName: "GetTnumByBaksAndTids",
			Handler:    _Count_GetTnumByBaksAndTids_Handler,
		},
		{
			MethodName: "DBGetTdetailsByFid",
			Handler:    _Count_DBGetTdetailsByFid_Handler,
		},
		{
			MethodName: "DBGetFidsTdetailByTid",
			Handler:    _Count_DBGetFidsTdetailByTid_Handler,
		},
		{
			MethodName: "GetTnumByFids",
			Handler:    _Count_GetTnumByFids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "count/v1/count.proto",
}
