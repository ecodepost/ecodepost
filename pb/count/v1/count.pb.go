// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: count/v1/count.proto

package countv1

import (
	v1 "ecodepost/pb/common/v1"
	_ "ecodepost/pb/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 目标的某个ACT计数详情
type Tdetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务目标id(比如:评论id，资讯id)
	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务计数总数
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// 业务真实计数总数
	RealNum int64 `protobuf:"varint,3,opt,name=realNum,proto3" json:"realNum,omitempty"`
	// 返回当前状态值 (如是否收藏,是否关注) 0:未记录,1:已操作 2:已撤销操作
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 业务来源id(比如用户id)
	Fids []string `protobuf:"bytes,5,rep,name=fids,proto3" json:"fids,omitempty"`
}

func (x *Tdetail) Reset() {
	*x = Tdetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tdetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tdetail) ProtoMessage() {}

func (x *Tdetail) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tdetail.ProtoReflect.Descriptor instead.
func (*Tdetail) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{0}
}

func (x *Tdetail) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *Tdetail) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Tdetail) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

func (x *Tdetail) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Tdetail) GetFids() []string {
	if x != nil {
		return x.Fids
	}
	return nil
}

type MsgEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fid 业务来源id(比如用户id、文章id、活动id) (必填)
	Fid string `protobuf:"bytes,2,opt,name=fid,proto3" json:"fid,omitempty"`
	// tid 业务目标id(比如评论id，资讯id) (必填)
	Tid string `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务类型
	Biz v1.CMN_BIZ `protobuf:"varint,4,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型 (必填)
	Act v1.CNT_ACT `protobuf:"varint,5,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// val 增量值，如果是ADD/SUB则val值固定为1; 如果是RESET，则val值将被忽略; 如果是UPDATE，则val为正数表示增加多少，val为复数表示减少多少
	Val int32 `protobuf:"varint,7,opt,name=val,proto3" json:"val,omitempty"`
	// cycle 榜单型计算周期，如果count_type=3时，cycle必填，默认空 (可选)
	Cycle string `protobuf:"bytes,8,opt,name=cycle,proto3" json:"cycle,omitempty"`
	// 消息创建时间
	MsgTime int64 `protobuf:"varint,9,opt,name=msgTime,proto3" json:"msgTime,omitempty"`
}

func (x *MsgEvent) Reset() {
	*x = MsgEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEvent) ProtoMessage() {}

func (x *MsgEvent) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgEvent.ProtoReflect.Descriptor instead.
func (*MsgEvent) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{1}
}

func (x *MsgEvent) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *MsgEvent) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *MsgEvent) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *MsgEvent) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *MsgEvent) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *MsgEvent) GetCycle() string {
	if x != nil {
		return x.Cycle
	}
	return ""
}

func (x *MsgEvent) GetMsgTime() int64 {
	if x != nil {
		return x.MsgTime
	}
	return 0
}

type SetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id) (必填)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id) (必填)
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务类型区分 比如(文章、活动) (必填)
	Biz v1.CMN_BIZ `protobuf:"varint,3,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,4,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 动作指令，1:增加 2:减少 3:取消操作 4:直接更新 5:重置用户所有关系,慎用(会清空用户所有的操作记录) (必填)
	Acti v1.CNT_ACTI `protobuf:"varint,5,opt,name=acti,proto3,enum=common.v1.CNT_ACTI" json:"acti,omitempty"`
	// val 计数更新值，如果是ADD/SUB则val值固定为1，如果是RESET，则val值固定将被忽略，如果是UPDATE，则val有效
	Val int32 `protobuf:"varint,6,opt,name=val,proto3" json:"val,omitempty"`
	// 操作来源ip (必填)
	Ip string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	// 客户端类型 (可选)
	Ct string `protobuf:"bytes,8,opt,name=ct,proto3" json:"ct,omitempty"`
	// 用户设备id (可选)
	Did string `protobuf:"bytes,9,opt,name=did,proto3" json:"did,omitempty"`
	// maxVal (可选) 默认：0,不限制  计数最大值，当计数超过阈值时接口响应失败
	MaxVal int32 `protobuf:"varint,11,opt,name=maxVal,proto3" json:"maxVal,omitempty"`
}

func (x *SetReq) Reset() {
	*x = SetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReq) ProtoMessage() {}

func (x *SetReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReq.ProtoReflect.Descriptor instead.
func (*SetReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{2}
}

func (x *SetReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *SetReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SetReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *SetReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *SetReq) GetActi() v1.CNT_ACTI {
	if x != nil {
		return x.Acti
	}
	return v1.CNT_ACTI_INVALID
}

func (x *SetReq) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *SetReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SetReq) GetCt() string {
	if x != nil {
		return x.Ct
	}
	return ""
}

func (x *SetReq) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *SetReq) GetMaxVal() int32 {
	if x != nil {
		return x.MaxVal
	}
	return 0
}

type SetRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id)
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 返回当前计数值
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	// realNum 真实数
	RealNum int64 `protobuf:"varint,4,opt,name=realNum,proto3" json:"realNum,omitempty"`
	// 返回当前状态值 (如是否收藏,是否关注) 0:未记录,1:已操作 2:已撤销操作
	Status int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetRes) Reset() {
	*x = SetRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRes) ProtoMessage() {}

func (x *SetRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRes.ProtoReflect.Descriptor instead.
func (*SetRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{3}
}

func (x *SetRes) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *SetRes) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *SetRes) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SetRes) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

func (x *SetRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetTdetailsByTidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id)(可选:来源ID不为空则返回当前来源ID的add/sub状态)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id) (必填)
	Tids []string `protobuf:"bytes,2,rep,name=tids,proto3" json:"tids,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数) (必填)
	Biz v1.CMN_BIZ `protobuf:"varint,3,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,4,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 业务目标id(比如评论id，资讯id)对应的来源ID列表长度限制 (必填)
	MaxFids int32 `protobuf:"varint,6,opt,name=maxFids,proto3" json:"maxFids,omitempty"`
}

func (x *GetTdetailsByTidsReq) Reset() {
	*x = GetTdetailsByTidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTdetailsByTidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTdetailsByTidsReq) ProtoMessage() {}

func (x *GetTdetailsByTidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTdetailsByTidsReq.ProtoReflect.Descriptor instead.
func (*GetTdetailsByTidsReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{4}
}

func (x *GetTdetailsByTidsReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetTdetailsByTidsReq) GetTids() []string {
	if x != nil {
		return x.Tids
	}
	return nil
}

func (x *GetTdetailsByTidsReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetTdetailsByTidsReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *GetTdetailsByTidsReq) GetMaxFids() int32 {
	if x != nil {
		return x.MaxFids
	}
	return 0
}

type GetTdetailsByTidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结果map,<tid>:<Target>
	Map map[string]*Tdetail `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTdetailsByTidsRes) Reset() {
	*x = GetTdetailsByTidsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTdetailsByTidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTdetailsByTidsRes) ProtoMessage() {}

func (x *GetTdetailsByTidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTdetailsByTidsRes.ProtoReflect.Descriptor instead.
func (*GetTdetailsByTidsRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{5}
}

func (x *GetTdetailsByTidsRes) GetMap() map[string]*Tdetail {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetTdetailsByFidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id) (必填)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数) (必填)
	Biz v1.CMN_BIZ `protobuf:"varint,2,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,3,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 偏移量 (必填)
	Offset int32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// 查询条数 (必填)
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetTdetailsByFidReq) Reset() {
	*x = GetTdetailsByFidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTdetailsByFidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTdetailsByFidReq) ProtoMessage() {}

func (x *GetTdetailsByFidReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTdetailsByFidReq.ProtoReflect.Descriptor instead.
func (*GetTdetailsByFidReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{6}
}

func (x *GetTdetailsByFidReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetTdetailsByFidReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetTdetailsByFidReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *GetTdetailsByFidReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTdetailsByFidReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTdetailsByFidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结果list
	List []*Tdetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetTdetailsByFidRes) Reset() {
	*x = GetTdetailsByFidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTdetailsByFidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTdetailsByFidRes) ProtoMessage() {}

func (x *GetTdetailsByFidRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTdetailsByFidRes.ProtoReflect.Descriptor instead.
func (*GetTdetailsByFidRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{7}
}

func (x *GetTdetailsByFidRes) GetList() []*Tdetail {
	if x != nil {
		return x.List
	}
	return nil
}

type GetFidsTdetailByTidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id)(可选:来源ID不为空则返回当前来源ID的add/sub状态)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id)(必填)
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数)(必填)
	Biz v1.CMN_BIZ `protobuf:"varint,3,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,4,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 偏移量 (必填)
	Offset int32 `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	// 查询条数 (必填)
	Limit int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetFidsTdetailByTidReq) Reset() {
	*x = GetFidsTdetailByTidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidsTdetailByTidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidsTdetailByTidReq) ProtoMessage() {}

func (x *GetFidsTdetailByTidReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidsTdetailByTidReq.ProtoReflect.Descriptor instead.
func (*GetFidsTdetailByTidReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{8}
}

func (x *GetFidsTdetailByTidReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetFidsTdetailByTidReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetFidsTdetailByTidReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetFidsTdetailByTidReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *GetFidsTdetailByTidReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFidsTdetailByTidReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// GetFidsTdetailByTidRes 即 Tdetail
type GetFidsTdetailByTidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务目标id(比如:评论id，资讯id)
	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务计数总数
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// 业务真实计数总数
	RealNum int64 `protobuf:"varint,3,opt,name=realNum,proto3" json:"realNum,omitempty"`
	// 返回当前状态值 (如是否收藏,是否关注) 0:未记录,1:已操作 2:已撤销操作
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 业务来源id(比如用户id)
	Fids []string `protobuf:"bytes,5,rep,name=fids,proto3" json:"fids,omitempty"`
}

func (x *GetFidsTdetailByTidRes) Reset() {
	*x = GetFidsTdetailByTidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidsTdetailByTidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidsTdetailByTidRes) ProtoMessage() {}

func (x *GetFidsTdetailByTidRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidsTdetailByTidRes.ProtoReflect.Descriptor instead.
func (*GetFidsTdetailByTidRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{9}
}

func (x *GetFidsTdetailByTidRes) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetFidsTdetailByTidRes) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetFidsTdetailByTidRes) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

func (x *GetFidsTdetailByTidRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetFidsTdetailByTidRes) GetFids() []string {
	if x != nil {
		return x.Fids
	}
	return nil
}

// 业务动作唯一key
type BAK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务类型
	Biz v1.CMN_BIZ `protobuf:"varint,1,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,2,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
}

func (x *BAK) Reset() {
	*x = BAK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BAK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BAK) ProtoMessage() {}

func (x *BAK) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BAK.ProtoReflect.Descriptor instead.
func (*BAK) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{10}
}

func (x *BAK) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *BAK) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

type GetTnumByBaksAndTidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务目标id(比如评论id，资讯id)(必填)["xxxxx","bbbbbbb]
	Tids []string `protobuf:"bytes,1,rep,name=tids,proto3" json:"tids,omitempty"`
	// 动作唯一Key列表
	Baks []*BAK `protobuf:"bytes,2,rep,name=baks,proto3" json:"baks,omitempty"`
}

func (x *GetTnumByBaksAndTidsReq) Reset() {
	*x = GetTnumByBaksAndTidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTnumByBaksAndTidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTnumByBaksAndTidsReq) ProtoMessage() {}

func (x *GetTnumByBaksAndTidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTnumByBaksAndTidsReq.ProtoReflect.Descriptor instead.
func (*GetTnumByBaksAndTidsReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{11}
}

func (x *GetTnumByBaksAndTidsReq) GetTids() []string {
	if x != nil {
		return x.Tids
	}
	return nil
}

func (x *GetTnumByBaksAndTidsReq) GetBaks() []*BAK {
	if x != nil {
		return x.Baks
	}
	return nil
}

// 目标多种ACT计数值
type TargetActsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key: bizKey: <biz>_<act>
	// val: 计数值
	Map map[string]uint64 `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TargetActsCount) Reset() {
	*x = TargetActsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetActsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetActsCount) ProtoMessage() {}

func (x *TargetActsCount) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetActsCount.ProtoReflect.Descriptor instead.
func (*TargetActsCount) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{12}
}

func (x *TargetActsCount) GetMap() map[string]uint64 {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetTnumByBaksAndTidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 响应结果信息, key:tid
	Map map[string]*TargetActsCount `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTnumByBaksAndTidsRes) Reset() {
	*x = GetTnumByBaksAndTidsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTnumByBaksAndTidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTnumByBaksAndTidsRes) ProtoMessage() {}

func (x *GetTnumByBaksAndTidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTnumByBaksAndTidsRes.ProtoReflect.Descriptor instead.
func (*GetTnumByBaksAndTidsRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{13}
}

func (x *GetTnumByBaksAndTidsRes) GetMap() map[string]*TargetActsCount {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetTanumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务目标id(比如评论id，资讯id)(必填)
	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数)(必填) "rec","browse","collect"
	Biz v1.CMN_BIZ `protobuf:"varint,2,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,3,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
}

func (x *GetTanumReq) Reset() {
	*x = GetTanumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTanumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTanumReq) ProtoMessage() {}

func (x *GetTanumReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTanumReq.ProtoReflect.Descriptor instead.
func (*GetTanumReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{14}
}

func (x *GetTanumReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetTanumReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetTanumReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

type GetTanumRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务计数总数
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	// 业务真实计数总数
	RealNum int64 `protobuf:"varint,2,opt,name=realNum,proto3" json:"realNum,omitempty"`
}

func (x *GetTanumRes) Reset() {
	*x = GetTanumRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTanumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTanumRes) ProtoMessage() {}

func (x *GetTanumRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTanumRes.ProtoReflect.Descriptor instead.
func (*GetTanumRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{15}
}

func (x *GetTanumRes) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetTanumRes) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

type TidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tids 列表
	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TidList) Reset() {
	*x = TidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TidList) ProtoMessage() {}

func (x *TidList) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TidList.ProtoReflect.Descriptor instead.
func (*TidList) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{16}
}

func (x *TidList) GetList() []string {
	if x != nil {
		return x.List
	}
	return nil
}

type BatchGetTidRealNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key:Bak 业务类型区分,比如(文章收藏计数,文章点赞计数)(必填) "<biztype>.<act>"
	BakToTids map[string]*TidList `protobuf:"bytes,1,rep,name=BakToTids,proto3" json:"BakToTids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetTidRealNumReq) Reset() {
	*x = BatchGetTidRealNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTidRealNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTidRealNumReq) ProtoMessage() {}

func (x *BatchGetTidRealNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTidRealNumReq.ProtoReflect.Descriptor instead.
func (*BatchGetTidRealNumReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{17}
}

func (x *BatchGetTidRealNumReq) GetBakToTids() map[string]*TidList {
	if x != nil {
		return x.BakToTids
	}
	return nil
}

// Tanum:TargetAllNum 目标所有计数
type Tanum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务计数总数
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// 业务真实计数总数
	RealNum int64 `protobuf:"varint,1,opt,name=realNum,proto3" json:"realNum,omitempty"`
}

func (x *Tanum) Reset() {
	*x = Tanum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tanum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tanum) ProtoMessage() {}

func (x *Tanum) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tanum.ProtoReflect.Descriptor instead.
func (*Tanum) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{18}
}

func (x *Tanum) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Tanum) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

type TidToTanum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key:tid
	Map map[string]*Tanum `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TidToTanum) Reset() {
	*x = TidToTanum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TidToTanum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TidToTanum) ProtoMessage() {}

func (x *TidToTanum) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TidToTanum.ProtoReflect.Descriptor instead.
func (*TidToTanum) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{19}
}

func (x *TidToTanum) GetMap() map[string]*Tanum {
	if x != nil {
		return x.Map
	}
	return nil
}

type BatchGetTidRealNumRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key:Bak
	Map map[string]*TidToTanum `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetTidRealNumRes) Reset() {
	*x = BatchGetTidRealNumRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTidRealNumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTidRealNumRes) ProtoMessage() {}

func (x *BatchGetTidRealNumRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTidRealNumRes.ProtoReflect.Descriptor instead.
func (*BatchGetTidRealNumRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{20}
}

func (x *BatchGetTidRealNumRes) GetMap() map[string]*TidToTanum {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetFidsByTidDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id)(可选:来源ID不为空则返回当前来源ID的add/sub状态)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id)(必填)
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数)(必填)
	Biz v1.CMN_BIZ `protobuf:"varint,3,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,4,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// feed流通用翻页
	Page *v1.Pagination `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetFidsByTidDetailReq) Reset() {
	*x = GetFidsByTidDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidsByTidDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidsByTidDetailReq) ProtoMessage() {}

func (x *GetFidsByTidDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidsByTidDetailReq.ProtoReflect.Descriptor instead.
func (*GetFidsByTidDetailReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{21}
}

func (x *GetFidsByTidDetailReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetFidsByTidDetailReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetFidsByTidDetailReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetFidsByTidDetailReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *GetFidsByTidDetailReq) GetPage() *v1.Pagination {
	if x != nil {
		return x.Page
	}
	return nil
}

type GetFidsByTidDetailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 响应结果
	List []*GetFidsByTidDetailItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetFidsByTidDetailRes) Reset() {
	*x = GetFidsByTidDetailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidsByTidDetailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidsByTidDetailRes) ProtoMessage() {}

func (x *GetFidsByTidDetailRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidsByTidDetailRes.ProtoReflect.Descriptor instead.
func (*GetFidsByTidDetailRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{22}
}

func (x *GetFidsByTidDetailRes) GetList() []*GetFidsByTidDetailItem {
	if x != nil {
		return x.List
	}
	return nil
}

type GetFidsByTidDetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 操作时间
	ActTime int64 `protobuf:"varint,2,opt,name=actTime,proto3" json:"actTime,omitempty"`
}

func (x *GetFidsByTidDetailItem) Reset() {
	*x = GetFidsByTidDetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidsByTidDetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidsByTidDetailItem) ProtoMessage() {}

func (x *GetFidsByTidDetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidsByTidDetailItem.ProtoReflect.Descriptor instead.
func (*GetFidsByTidDetailItem) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{23}
}

func (x *GetFidsByTidDetailItem) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetFidsByTidDetailItem) GetActTime() int64 {
	if x != nil {
		return x.ActTime
	}
	return 0
}

type GetFidToTidsStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id) (必填)
	Tids []string `protobuf:"bytes,2,rep,name=tids,proto3" json:"tids,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数) (必填)
	Biz v1.CMN_BIZ `protobuf:"varint,4,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,5,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 业务来源id(比如用户id)
	// 是否需要战士目标的点赞来源列表
	NeedFids bool `protobuf:"varint,6,opt,name=needFids,proto3" json:"needFids,omitempty"`
	// needFids = true 时有效，不支持翻页，最大获取最近200个
	Limit int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetFidToTidsStatusReq) Reset() {
	*x = GetFidToTidsStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidToTidsStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidToTidsStatusReq) ProtoMessage() {}

func (x *GetFidToTidsStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidToTidsStatusReq.ProtoReflect.Descriptor instead.
func (*GetFidToTidsStatusReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{24}
}

func (x *GetFidToTidsStatusReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetFidToTidsStatusReq) GetTids() []string {
	if x != nil {
		return x.Tids
	}
	return nil
}

func (x *GetFidToTidsStatusReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetFidToTidsStatusReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *GetFidToTidsStatusReq) GetNeedFids() bool {
	if x != nil {
		return x.NeedFids
	}
	return false
}

func (x *GetFidToTidsStatusReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFidToTidsStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 响应结构 map<target_id,StatusItem>
	Map map[string]*GetFidToTidsStatus `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetFidToTidsStatusRes) Reset() {
	*x = GetFidToTidsStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidToTidsStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidToTidsStatusRes) ProtoMessage() {}

func (x *GetFidToTidsStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidToTidsStatusRes.ProtoReflect.Descriptor instead.
func (*GetFidToTidsStatusRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{25}
}

func (x *GetFidToTidsStatusRes) GetMap() map[string]*GetFidToTidsStatus {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetFidToTidsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// target_id 目标ID
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务计数总数
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	// 业务真实计数总数
	RealNum int64 `protobuf:"varint,4,opt,name=realNum,proto3" json:"realNum,omitempty"`
	// 返回当前状态值 (如是否收藏,是否关注) 0:未记录,1:已操作 2:已撤销操作
	Status int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// form_id_list 目标点赞来源列表
	Fids []string `protobuf:"bytes,6,rep,name=fids,proto3" json:"fids,omitempty"`
}

func (x *GetFidToTidsStatus) Reset() {
	*x = GetFidToTidsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFidToTidsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFidToTidsStatus) ProtoMessage() {}

func (x *GetFidToTidsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFidToTidsStatus.ProtoReflect.Descriptor instead.
func (*GetFidToTidsStatus) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{26}
}

func (x *GetFidToTidsStatus) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *GetFidToTidsStatus) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *GetFidToTidsStatus) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetFidToTidsStatus) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

func (x *GetFidToTidsStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetFidToTidsStatus) GetFids() []string {
	if x != nil {
		return x.Fids
	}
	return nil
}

type DBGetTdetailsByFidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id) (必填)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数) (必填)
	Biz v1.CMN_BIZ `protobuf:"varint,2,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,3,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 分页
	Pagination *v1.Pagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DBGetTdetailsByFidReq) Reset() {
	*x = DBGetTdetailsByFidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBGetTdetailsByFidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBGetTdetailsByFidReq) ProtoMessage() {}

func (x *DBGetTdetailsByFidReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBGetTdetailsByFidReq.ProtoReflect.Descriptor instead.
func (*DBGetTdetailsByFidReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{27}
}

func (x *DBGetTdetailsByFidReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *DBGetTdetailsByFidReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *DBGetTdetailsByFidReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *DBGetTdetailsByFidReq) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DBGetTdetailsByFidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结果list
	List []*Tdetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// Tdetail 的分页数据
	Pagination *v1.Pagination `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DBGetTdetailsByFidRes) Reset() {
	*x = DBGetTdetailsByFidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBGetTdetailsByFidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBGetTdetailsByFidRes) ProtoMessage() {}

func (x *DBGetTdetailsByFidRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBGetTdetailsByFidRes.ProtoReflect.Descriptor instead.
func (*DBGetTdetailsByFidRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{28}
}

func (x *DBGetTdetailsByFidRes) GetList() []*Tdetail {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DBGetTdetailsByFidRes) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DBGetFidsTdetailByTidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务来源id(比如用户id)(可选:来源ID不为空则返回当前来源ID的add/sub状态)
	Fid string `protobuf:"bytes,1,opt,name=fid,proto3" json:"fid,omitempty"`
	// 业务目标id(比如评论id，资讯id)(必填)
	Tid string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数)(必填)
	Biz v1.CMN_BIZ `protobuf:"varint,3,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,4,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
	// 分页
	Pagination *v1.Pagination `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DBGetFidsTdetailByTidReq) Reset() {
	*x = DBGetFidsTdetailByTidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBGetFidsTdetailByTidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBGetFidsTdetailByTidReq) ProtoMessage() {}

func (x *DBGetFidsTdetailByTidReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBGetFidsTdetailByTidReq.ProtoReflect.Descriptor instead.
func (*DBGetFidsTdetailByTidReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{29}
}

func (x *DBGetFidsTdetailByTidReq) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *DBGetFidsTdetailByTidReq) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *DBGetFidsTdetailByTidReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *DBGetFidsTdetailByTidReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

func (x *DBGetFidsTdetailByTidReq) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// GetFidsTdetailByTidRes 即 Tdetail
type DBGetFidsTdetailByTidRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 业务目标id(比如:评论id，资讯id)
	Tid string `protobuf:"bytes,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// 业务计数总数
	Num int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// 业务真实计数总数
	RealNum int64 `protobuf:"varint,3,opt,name=realNum,proto3" json:"realNum,omitempty"`
	// 返回当前状态值 (如是否收藏,是否关注) 0:未记录,1:已操作 2:已撤销操作
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// 业务来源id(比如用户id)
	Fids []string `protobuf:"bytes,5,rep,name=fids,proto3" json:"fids,omitempty"`
	// fids 的分页数据
	Pagination *v1.Pagination `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DBGetFidsTdetailByTidRes) Reset() {
	*x = DBGetFidsTdetailByTidRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBGetFidsTdetailByTidRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBGetFidsTdetailByTidRes) ProtoMessage() {}

func (x *DBGetFidsTdetailByTidRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBGetFidsTdetailByTidRes.ProtoReflect.Descriptor instead.
func (*DBGetFidsTdetailByTidRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{30}
}

func (x *DBGetFidsTdetailByTidRes) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *DBGetFidsTdetailByTidRes) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *DBGetFidsTdetailByTidRes) GetRealNum() int64 {
	if x != nil {
		return x.RealNum
	}
	return 0
}

func (x *DBGetFidsTdetailByTidRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DBGetFidsTdetailByTidRes) GetFids() []string {
	if x != nil {
		return x.Fids
	}
	return nil
}

func (x *DBGetFidsTdetailByTidRes) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetTnumByFidsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 来源id列表
	Fids []string `protobuf:"bytes,1,rep,name=fids,proto3" json:"fids,omitempty"`
	// 业务类型区分 比如(圈子评论计数,圈子收藏计数) (必填)
	Biz v1.CMN_BIZ `protobuf:"varint,2,opt,name=biz,proto3,enum=common.v1.CMN_BIZ" json:"biz,omitempty"`
	// 动作类型
	Act v1.CNT_ACT `protobuf:"varint,3,opt,name=act,proto3,enum=common.v1.CNT_ACT" json:"act,omitempty"`
}

func (x *GetTnumByFidsReq) Reset() {
	*x = GetTnumByFidsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTnumByFidsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTnumByFidsReq) ProtoMessage() {}

func (x *GetTnumByFidsReq) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTnumByFidsReq.ProtoReflect.Descriptor instead.
func (*GetTnumByFidsReq) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{31}
}

func (x *GetTnumByFidsReq) GetFids() []string {
	if x != nil {
		return x.Fids
	}
	return nil
}

func (x *GetTnumByFidsReq) GetBiz() v1.CMN_BIZ {
	if x != nil {
		return x.Biz
	}
	return v1.CMN_BIZ_INVALID
}

func (x *GetTnumByFidsReq) GetAct() v1.CNT_ACT {
	if x != nil {
		return x.Act
	}
	return v1.CNT_ACT_INVALID
}

type GetTnumByFidsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结果map,<fid>:<Num>
	Map map[string]int64 `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetTnumByFidsRes) Reset() {
	*x = GetTnumByFidsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_v1_count_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTnumByFidsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTnumByFidsRes) ProtoMessage() {}

func (x *GetTnumByFidsRes) ProtoReflect() protoreflect.Message {
	mi := &file_count_v1_count_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTnumByFidsRes.ProtoReflect.Descriptor instead.
func (*GetTnumByFidsRes) Descriptor() ([]byte, []int) {
	return file_count_v1_count_proto_rawDescGZIP(), []int{32}
}

func (x *GetTnumByFidsRes) GetMap() map[string]int64 {
	if x != nil {
		return x.Map
	}
	return nil
}

var File_count_v1_count_proto protoreflect.FileDescriptor

var file_count_v1_count_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x07, 0x54, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x64, 0x73, 0x22,
	0xbc, 0x01, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49,
	0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x66, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x66, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a,
	0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x61,
	0x63, 0x74, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x49, 0x52, 0x04,
	0x61, 0x63, 0x74, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x22, 0x70, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42,
	0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x46, 0x69, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x49, 0x0a, 0x08, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12,
	0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54,
	0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x3c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12,
	0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54,
	0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x03, 0x42, 0x41, 0x4b, 0x12,
	0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a,
	0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x22, 0x5a, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x42, 0x61, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x54,
	0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x41, 0x4b, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x04, 0x62, 0x61, 0x6b, 0x73, 0x22, 0x7f, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x42, 0x61, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x42, 0x61, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x1a, 0x51, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03,
	0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61,
	0x63, 0x74, 0x22, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6e, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x1d, 0x0a,
	0x07, 0x54, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a,
	0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x64, 0x52, 0x65, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x09, 0x42, 0x61, 0x6b, 0x54, 0x6f, 0x54,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x2e, 0x42, 0x61, 0x6b, 0x54, 0x6f,
	0x54, 0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x42, 0x61, 0x6b, 0x54, 0x6f,
	0x54, 0x69, 0x64, 0x73, 0x1a, 0x4f, 0x0a, 0x0e, 0x42, 0x61, 0x6b, 0x54, 0x6f, 0x54, 0x69, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x05, 0x54, 0x61, 0x6e, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x54,
	0x69, 0x64, 0x54, 0x6f, 0x54, 0x61, 0x6e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x61, 0x6e, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x47, 0x0a, 0x08, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x54, 0x69, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x4c, 0x0a, 0x08, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x61, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x64, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x66, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x69,
	0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42,
	0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xa9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x69, 0x64, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x69, 0x64, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x54, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x69, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x54, 0x6f, 0x54, 0x69, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x66, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x64, 0x73, 0x22, 0xb5,
	0x01, 0x0a, 0x15, 0x44, 0x42, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03,
	0x66, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e,
	0x2e, 0x42, 0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x15, 0x44, 0x42, 0x47, 0x65, 0x74, 0x54,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01,
	0x0a, 0x18, 0x44, 0x42, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49, 0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a,
	0x03, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03,
	0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x44,
	0x42, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x6e, 0x75, 0x6d, 0x42, 0x79, 0x46, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4d, 0x4e, 0x2e, 0x42, 0x49,
	0x5a, 0x52, 0x03, 0x62, 0x69, 0x7a, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x4e, 0x54, 0x2e, 0x41, 0x43, 0x54, 0x52, 0x03, 0x61, 0x63, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x46, 0x69, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6e, 0x75,
	0x6d, 0x42, 0x79, 0x46, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x32, 0x94, 0x05, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x53, 0x65,
	0x74, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x79, 0x54, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x12, 0x1d,
	0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x54, 0x69, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6e,
	0x75, 0x6d, 0x42, 0x79, 0x42, 0x61, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x64, 0x73, 0x12,
	0x21, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6e,
	0x75, 0x6d, 0x42, 0x79, 0x42, 0x61, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x42, 0x61, 0x6b, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x44, 0x42, 0x47, 0x65, 0x74, 0x54, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x47, 0x65, 0x74, 0x54, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x46, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x5f, 0x0a,
	0x15, 0x44, 0x42, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x54, 0x69, 0x64, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x42, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x42, 0x47, 0x65, 0x74, 0x46, 0x69, 0x64, 0x73, 0x54,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x54, 0x69, 0x64, 0x52, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x46, 0x69, 0x64, 0x73, 0x12,
	0x1a, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6e,
	0x75, 0x6d, 0x42, 0x79, 0x46, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6e, 0x75, 0x6d, 0x42, 0x79,
	0x46, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x42, 0x7a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_count_v1_count_proto_rawDescOnce sync.Once
	file_count_v1_count_proto_rawDescData = file_count_v1_count_proto_rawDesc
)

func file_count_v1_count_proto_rawDescGZIP() []byte {
	file_count_v1_count_proto_rawDescOnce.Do(func() {
		file_count_v1_count_proto_rawDescData = protoimpl.X.CompressGZIP(file_count_v1_count_proto_rawDescData)
	})
	return file_count_v1_count_proto_rawDescData
}

var file_count_v1_count_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_count_v1_count_proto_goTypes = []interface{}{
	(*Tdetail)(nil),                  // 0: count.v1.Tdetail
	(*MsgEvent)(nil),                 // 1: count.v1.MsgEvent
	(*SetReq)(nil),                   // 2: count.v1.SetReq
	(*SetRes)(nil),                   // 3: count.v1.SetRes
	(*GetTdetailsByTidsReq)(nil),     // 4: count.v1.GetTdetailsByTidsReq
	(*GetTdetailsByTidsRes)(nil),     // 5: count.v1.GetTdetailsByTidsRes
	(*GetTdetailsByFidReq)(nil),      // 6: count.v1.GetTdetailsByFidReq
	(*GetTdetailsByFidRes)(nil),      // 7: count.v1.GetTdetailsByFidRes
	(*GetFidsTdetailByTidReq)(nil),   // 8: count.v1.GetFidsTdetailByTidReq
	(*GetFidsTdetailByTidRes)(nil),   // 9: count.v1.GetFidsTdetailByTidRes
	(*BAK)(nil),                      // 10: count.v1.BAK
	(*GetTnumByBaksAndTidsReq)(nil),  // 11: count.v1.GetTnumByBaksAndTidsReq
	(*TargetActsCount)(nil),          // 12: count.v1.TargetActsCount
	(*GetTnumByBaksAndTidsRes)(nil),  // 13: count.v1.GetTnumByBaksAndTidsRes
	(*GetTanumReq)(nil),              // 14: count.v1.GetTanumReq
	(*GetTanumRes)(nil),              // 15: count.v1.GetTanumRes
	(*TidList)(nil),                  // 16: count.v1.TidList
	(*BatchGetTidRealNumReq)(nil),    // 17: count.v1.BatchGetTidRealNumReq
	(*Tanum)(nil),                    // 18: count.v1.Tanum
	(*TidToTanum)(nil),               // 19: count.v1.TidToTanum
	(*BatchGetTidRealNumRes)(nil),    // 20: count.v1.BatchGetTidRealNumRes
	(*GetFidsByTidDetailReq)(nil),    // 21: count.v1.GetFidsByTidDetailReq
	(*GetFidsByTidDetailRes)(nil),    // 22: count.v1.GetFidsByTidDetailRes
	(*GetFidsByTidDetailItem)(nil),   // 23: count.v1.GetFidsByTidDetailItem
	(*GetFidToTidsStatusReq)(nil),    // 24: count.v1.GetFidToTidsStatusReq
	(*GetFidToTidsStatusRes)(nil),    // 25: count.v1.GetFidToTidsStatusRes
	(*GetFidToTidsStatus)(nil),       // 26: count.v1.GetFidToTidsStatus
	(*DBGetTdetailsByFidReq)(nil),    // 27: count.v1.DBGetTdetailsByFidReq
	(*DBGetTdetailsByFidRes)(nil),    // 28: count.v1.DBGetTdetailsByFidRes
	(*DBGetFidsTdetailByTidReq)(nil), // 29: count.v1.DBGetFidsTdetailByTidReq
	(*DBGetFidsTdetailByTidRes)(nil), // 30: count.v1.DBGetFidsTdetailByTidRes
	(*GetTnumByFidsReq)(nil),         // 31: count.v1.GetTnumByFidsReq
	(*GetTnumByFidsRes)(nil),         // 32: count.v1.GetTnumByFidsRes
	nil,                              // 33: count.v1.GetTdetailsByTidsRes.MapEntry
	nil,                              // 34: count.v1.TargetActsCount.MapEntry
	nil,                              // 35: count.v1.GetTnumByBaksAndTidsRes.MapEntry
	nil,                              // 36: count.v1.BatchGetTidRealNumReq.BakToTidsEntry
	nil,                              // 37: count.v1.TidToTanum.MapEntry
	nil,                              // 38: count.v1.BatchGetTidRealNumRes.MapEntry
	nil,                              // 39: count.v1.GetFidToTidsStatusRes.MapEntry
	nil,                              // 40: count.v1.GetTnumByFidsRes.MapEntry
	(v1.CMN_BIZ)(0),                  // 41: common.v1.CMN.BIZ
	(v1.CNT_ACT)(0),                  // 42: common.v1.CNT.ACT
	(v1.CNT_ACTI)(0),                 // 43: common.v1.CNT.ACTI
	(*v1.Pagination)(nil),            // 44: common.v1.Pagination
}
var file_count_v1_count_proto_depIdxs = []int32{
	41, // 0: count.v1.MsgEvent.biz:type_name -> common.v1.CMN.BIZ
	42, // 1: count.v1.MsgEvent.act:type_name -> common.v1.CNT.ACT
	41, // 2: count.v1.SetReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 3: count.v1.SetReq.act:type_name -> common.v1.CNT.ACT
	43, // 4: count.v1.SetReq.acti:type_name -> common.v1.CNT.ACTI
	41, // 5: count.v1.GetTdetailsByTidsReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 6: count.v1.GetTdetailsByTidsReq.act:type_name -> common.v1.CNT.ACT
	33, // 7: count.v1.GetTdetailsByTidsRes.map:type_name -> count.v1.GetTdetailsByTidsRes.MapEntry
	41, // 8: count.v1.GetTdetailsByFidReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 9: count.v1.GetTdetailsByFidReq.act:type_name -> common.v1.CNT.ACT
	0,  // 10: count.v1.GetTdetailsByFidRes.list:type_name -> count.v1.Tdetail
	41, // 11: count.v1.GetFidsTdetailByTidReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 12: count.v1.GetFidsTdetailByTidReq.act:type_name -> common.v1.CNT.ACT
	41, // 13: count.v1.BAK.biz:type_name -> common.v1.CMN.BIZ
	42, // 14: count.v1.BAK.act:type_name -> common.v1.CNT.ACT
	10, // 15: count.v1.GetTnumByBaksAndTidsReq.baks:type_name -> count.v1.BAK
	34, // 16: count.v1.TargetActsCount.map:type_name -> count.v1.TargetActsCount.MapEntry
	35, // 17: count.v1.GetTnumByBaksAndTidsRes.map:type_name -> count.v1.GetTnumByBaksAndTidsRes.MapEntry
	41, // 18: count.v1.GetTanumReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 19: count.v1.GetTanumReq.act:type_name -> common.v1.CNT.ACT
	36, // 20: count.v1.BatchGetTidRealNumReq.BakToTids:type_name -> count.v1.BatchGetTidRealNumReq.BakToTidsEntry
	37, // 21: count.v1.TidToTanum.map:type_name -> count.v1.TidToTanum.MapEntry
	38, // 22: count.v1.BatchGetTidRealNumRes.map:type_name -> count.v1.BatchGetTidRealNumRes.MapEntry
	41, // 23: count.v1.GetFidsByTidDetailReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 24: count.v1.GetFidsByTidDetailReq.act:type_name -> common.v1.CNT.ACT
	44, // 25: count.v1.GetFidsByTidDetailReq.page:type_name -> common.v1.Pagination
	23, // 26: count.v1.GetFidsByTidDetailRes.list:type_name -> count.v1.GetFidsByTidDetailItem
	41, // 27: count.v1.GetFidToTidsStatusReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 28: count.v1.GetFidToTidsStatusReq.act:type_name -> common.v1.CNT.ACT
	39, // 29: count.v1.GetFidToTidsStatusRes.map:type_name -> count.v1.GetFidToTidsStatusRes.MapEntry
	41, // 30: count.v1.DBGetTdetailsByFidReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 31: count.v1.DBGetTdetailsByFidReq.act:type_name -> common.v1.CNT.ACT
	44, // 32: count.v1.DBGetTdetailsByFidReq.pagination:type_name -> common.v1.Pagination
	0,  // 33: count.v1.DBGetTdetailsByFidRes.list:type_name -> count.v1.Tdetail
	44, // 34: count.v1.DBGetTdetailsByFidRes.pagination:type_name -> common.v1.Pagination
	41, // 35: count.v1.DBGetFidsTdetailByTidReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 36: count.v1.DBGetFidsTdetailByTidReq.act:type_name -> common.v1.CNT.ACT
	44, // 37: count.v1.DBGetFidsTdetailByTidReq.pagination:type_name -> common.v1.Pagination
	44, // 38: count.v1.DBGetFidsTdetailByTidRes.pagination:type_name -> common.v1.Pagination
	41, // 39: count.v1.GetTnumByFidsReq.biz:type_name -> common.v1.CMN.BIZ
	42, // 40: count.v1.GetTnumByFidsReq.act:type_name -> common.v1.CNT.ACT
	40, // 41: count.v1.GetTnumByFidsRes.map:type_name -> count.v1.GetTnumByFidsRes.MapEntry
	0,  // 42: count.v1.GetTdetailsByTidsRes.MapEntry.value:type_name -> count.v1.Tdetail
	12, // 43: count.v1.GetTnumByBaksAndTidsRes.MapEntry.value:type_name -> count.v1.TargetActsCount
	16, // 44: count.v1.BatchGetTidRealNumReq.BakToTidsEntry.value:type_name -> count.v1.TidList
	18, // 45: count.v1.TidToTanum.MapEntry.value:type_name -> count.v1.Tanum
	19, // 46: count.v1.BatchGetTidRealNumRes.MapEntry.value:type_name -> count.v1.TidToTanum
	26, // 47: count.v1.GetFidToTidsStatusRes.MapEntry.value:type_name -> count.v1.GetFidToTidsStatus
	2,  // 48: count.v1.Count.Set:input_type -> count.v1.SetReq
	4,  // 49: count.v1.Count.GetTdetailsByTids:input_type -> count.v1.GetTdetailsByTidsReq
	6,  // 50: count.v1.Count.GetTdetailsByFid:input_type -> count.v1.GetTdetailsByFidReq
	8,  // 51: count.v1.Count.GetFidsTdetailByTid:input_type -> count.v1.GetFidsTdetailByTidReq
	11, // 52: count.v1.Count.GetTnumByBaksAndTids:input_type -> count.v1.GetTnumByBaksAndTidsReq
	27, // 53: count.v1.Count.DBGetTdetailsByFid:input_type -> count.v1.DBGetTdetailsByFidReq
	29, // 54: count.v1.Count.DBGetFidsTdetailByTid:input_type -> count.v1.DBGetFidsTdetailByTidReq
	31, // 55: count.v1.Count.GetTnumByFids:input_type -> count.v1.GetTnumByFidsReq
	3,  // 56: count.v1.Count.Set:output_type -> count.v1.SetRes
	5,  // 57: count.v1.Count.GetTdetailsByTids:output_type -> count.v1.GetTdetailsByTidsRes
	7,  // 58: count.v1.Count.GetTdetailsByFid:output_type -> count.v1.GetTdetailsByFidRes
	9,  // 59: count.v1.Count.GetFidsTdetailByTid:output_type -> count.v1.GetFidsTdetailByTidRes
	13, // 60: count.v1.Count.GetTnumByBaksAndTids:output_type -> count.v1.GetTnumByBaksAndTidsRes
	28, // 61: count.v1.Count.DBGetTdetailsByFid:output_type -> count.v1.DBGetTdetailsByFidRes
	30, // 62: count.v1.Count.DBGetFidsTdetailByTid:output_type -> count.v1.DBGetFidsTdetailByTidRes
	32, // 63: count.v1.Count.GetTnumByFids:output_type -> count.v1.GetTnumByFidsRes
	56, // [56:64] is the sub-list for method output_type
	48, // [48:56] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_count_v1_count_proto_init() }
func file_count_v1_count_proto_init() {
	if File_count_v1_count_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_count_v1_count_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tdetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTdetailsByTidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTdetailsByTidsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTdetailsByFidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTdetailsByFidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidsTdetailByTidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidsTdetailByTidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BAK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTnumByBaksAndTidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetActsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTnumByBaksAndTidsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTanumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTanumRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTidRealNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tanum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TidToTanum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTidRealNumRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidsByTidDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidsByTidDetailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidsByTidDetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidToTidsStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidToTidsStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFidToTidsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBGetTdetailsByFidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBGetTdetailsByFidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBGetFidsTdetailByTidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBGetFidsTdetailByTidRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTnumByFidsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_v1_count_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTnumByFidsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_count_v1_count_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_count_v1_count_proto_goTypes,
		DependencyIndexes: file_count_v1_count_proto_depIdxs,
		MessageInfos:      file_count_v1_count_proto_msgTypes,
	}.Build()
	File_count_v1_count_proto = out.File
	file_count_v1_count_proto_rawDesc = nil
	file_count_v1_count_proto_goTypes = nil
	file_count_v1_count_proto_depIdxs = nil
}
