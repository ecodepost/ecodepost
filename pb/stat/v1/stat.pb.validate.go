// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stat/v1/stat.proto

package statv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.CMN_BIZ(0)
)

// Validate checks the field values on CollectionGroupCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupCreateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupCreateReqMultiError, or nil if none found.
func (m *CollectionGroupCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CollectionGroupCreateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CollectionGroupCreateReqValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return CollectionGroupCreateReqMultiError(errors)
	}

	return nil
}

// CollectionGroupCreateReqMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupCreateReq.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupCreateReqMultiError) AllErrors() []error { return m }

// CollectionGroupCreateReqValidationError is the validation error returned by
// CollectionGroupCreateReq.Validate if the designated constraints aren't met.
type CollectionGroupCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupCreateReqValidationError) ErrorName() string {
	return "CollectionGroupCreateReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupCreateReqValidationError{}

// Validate checks the field values on CollectionGroupCreateRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupCreateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupCreateRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupCreateResMultiError, or nil if none found.
func (m *CollectionGroupCreateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupCreateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CollectionGroupCreateResMultiError(errors)
	}

	return nil
}

// CollectionGroupCreateResMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupCreateRes.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupCreateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupCreateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupCreateResMultiError) AllErrors() []error { return m }

// CollectionGroupCreateResValidationError is the validation error returned by
// CollectionGroupCreateRes.Validate if the designated constraints aren't met.
type CollectionGroupCreateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupCreateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupCreateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupCreateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupCreateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupCreateResValidationError) ErrorName() string {
	return "CollectionGroupCreateResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupCreateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupCreateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupCreateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupCreateResValidationError{}

// Validate checks the field values on CollectionGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupListReqMultiError, or nil if none found.
func (m *CollectionGroupListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CollectionGroupListReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CollectionGroupListReqMultiError(errors)
	}

	return nil
}

// CollectionGroupListReqMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupListReq.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupListReqMultiError) AllErrors() []error { return m }

// CollectionGroupListReqValidationError is the validation error returned by
// CollectionGroupListReq.Validate if the designated constraints aren't met.
type CollectionGroupListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupListReqValidationError) ErrorName() string {
	return "CollectionGroupListReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupListReqValidationError{}

// Validate checks the field values on CollectionGroupListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupListResMultiError, or nil if none found.
func (m *CollectionGroupListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionGroupListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionGroupListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionGroupListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectionGroupListResMultiError(errors)
	}

	return nil
}

// CollectionGroupListResMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupListRes.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupListResMultiError) AllErrors() []error { return m }

// CollectionGroupListResValidationError is the validation error returned by
// CollectionGroupListRes.Validate if the designated constraints aren't met.
type CollectionGroupListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupListResValidationError) ErrorName() string {
	return "CollectionGroupListResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupListResValidationError{}

// Validate checks the field values on CollectionGroupUpdateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupUpdateReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupUpdateReqMultiError, or nil if none found.
func (m *CollectionGroupUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CollectionGroupUpdateReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CollectionGroupUpdateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if m.Desc != nil {
		// no validation rules for Desc
	}

	if len(errors) > 0 {
		return CollectionGroupUpdateReqMultiError(errors)
	}

	return nil
}

// CollectionGroupUpdateReqMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupUpdateReq.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupUpdateReqMultiError) AllErrors() []error { return m }

// CollectionGroupUpdateReqValidationError is the validation error returned by
// CollectionGroupUpdateReq.Validate if the designated constraints aren't met.
type CollectionGroupUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupUpdateReqValidationError) ErrorName() string {
	return "CollectionGroupUpdateReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupUpdateReqValidationError{}

// Validate checks the field values on CollectionGroupUpdateRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupUpdateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupUpdateRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupUpdateResMultiError, or nil if none found.
func (m *CollectionGroupUpdateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupUpdateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CollectionGroupUpdateResMultiError(errors)
	}

	return nil
}

// CollectionGroupUpdateResMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupUpdateRes.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupUpdateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupUpdateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupUpdateResMultiError) AllErrors() []error { return m }

// CollectionGroupUpdateResValidationError is the validation error returned by
// CollectionGroupUpdateRes.Validate if the designated constraints aren't met.
type CollectionGroupUpdateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupUpdateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupUpdateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupUpdateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupUpdateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupUpdateResValidationError) ErrorName() string {
	return "CollectionGroupUpdateResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupUpdateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupUpdateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupUpdateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupUpdateResValidationError{}

// Validate checks the field values on CollectionGroupDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupDeleteReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupDeleteReqMultiError, or nil if none found.
func (m *CollectionGroupDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CollectionGroupDeleteReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := CollectionGroupDeleteReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CollectionGroupDeleteReqMultiError(errors)
	}

	return nil
}

// CollectionGroupDeleteReqMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupDeleteReq.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupDeleteReqMultiError) AllErrors() []error { return m }

// CollectionGroupDeleteReqValidationError is the validation error returned by
// CollectionGroupDeleteReq.Validate if the designated constraints aren't met.
type CollectionGroupDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupDeleteReqValidationError) ErrorName() string {
	return "CollectionGroupDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupDeleteReqValidationError{}

// Validate checks the field values on CollectionGroupDeleteRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupDeleteRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupDeleteRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupDeleteResMultiError, or nil if none found.
func (m *CollectionGroupDeleteRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupDeleteRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CollectionGroupDeleteResMultiError(errors)
	}

	return nil
}

// CollectionGroupDeleteResMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupDeleteRes.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupDeleteResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupDeleteResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupDeleteResMultiError) AllErrors() []error { return m }

// CollectionGroupDeleteResValidationError is the validation error returned by
// CollectionGroupDeleteRes.Validate if the designated constraints aren't met.
type CollectionGroupDeleteResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupDeleteResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupDeleteResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupDeleteResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupDeleteResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupDeleteResValidationError) ErrorName() string {
	return "CollectionGroupDeleteResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupDeleteResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupDeleteRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupDeleteResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupDeleteResValidationError{}

// Validate checks the field values on CollectionCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateReqMultiError, or nil if none found.
func (m *CollectionCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CollectionCreateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCollectionGroupIds()) < 1 {
		err := CollectionCreateReqValidationError{
			field:  "CollectionGroupIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := CollectionCreateReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	if len(errors) > 0 {
		return CollectionCreateReqMultiError(errors)
	}

	return nil
}

// CollectionCreateReqMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateReq.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateReqMultiError) AllErrors() []error { return m }

// CollectionCreateReqValidationError is the validation error returned by
// CollectionCreateReq.Validate if the designated constraints aren't met.
type CollectionCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateReqValidationError) ErrorName() string {
	return "CollectionCreateReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateReqValidationError{}

// Validate checks the field values on CollectionCreateRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionCreateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCreateRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionCreateResMultiError, or nil if none found.
func (m *CollectionCreateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCreateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Delta

	if len(errors) > 0 {
		return CollectionCreateResMultiError(errors)
	}

	return nil
}

// CollectionCreateResMultiError is an error wrapping multiple validation
// errors returned by CollectionCreateRes.ValidateAll() if the designated
// constraints aren't met.
type CollectionCreateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCreateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCreateResMultiError) AllErrors() []error { return m }

// CollectionCreateResValidationError is the validation error returned by
// CollectionCreateRes.Validate if the designated constraints aren't met.
type CollectionCreateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCreateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCreateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCreateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCreateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCreateResValidationError) ErrorName() string {
	return "CollectionCreateResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionCreateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCreateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCreateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCreateResValidationError{}

// Validate checks the field values on CollectionDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionDeleteReqMultiError, or nil if none found.
func (m *CollectionDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CollectionDeleteReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCollectionGroupIds()) < 1 {
		err := CollectionDeleteReqValidationError{
			field:  "CollectionGroupIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := CollectionDeleteReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	if len(errors) > 0 {
		return CollectionDeleteReqMultiError(errors)
	}

	return nil
}

// CollectionDeleteReqMultiError is an error wrapping multiple validation
// errors returned by CollectionDeleteReq.ValidateAll() if the designated
// constraints aren't met.
type CollectionDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionDeleteReqMultiError) AllErrors() []error { return m }

// CollectionDeleteReqValidationError is the validation error returned by
// CollectionDeleteReq.Validate if the designated constraints aren't met.
type CollectionDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionDeleteReqValidationError) ErrorName() string {
	return "CollectionDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionDeleteReqValidationError{}

// Validate checks the field values on CollectionDeleteRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionDeleteRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionDeleteRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionDeleteResMultiError, or nil if none found.
func (m *CollectionDeleteRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionDeleteRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Delta

	if len(errors) > 0 {
		return CollectionDeleteResMultiError(errors)
	}

	return nil
}

// CollectionDeleteResMultiError is an error wrapping multiple validation
// errors returned by CollectionDeleteRes.ValidateAll() if the designated
// constraints aren't met.
type CollectionDeleteResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionDeleteResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionDeleteResMultiError) AllErrors() []error { return m }

// CollectionDeleteResValidationError is the validation error returned by
// CollectionDeleteRes.Validate if the designated constraints aren't met.
type CollectionDeleteResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionDeleteResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionDeleteResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionDeleteResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionDeleteResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionDeleteResValidationError) ErrorName() string {
	return "CollectionDeleteResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionDeleteResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionDeleteRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionDeleteResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionDeleteResValidationError{}

// Validate checks the field values on CollectionListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectionListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionListReqMultiError, or nil if none found.
func (m *CollectionListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CollectionListReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCollectionGroupId() <= 0 {
		err := CollectionListReqValidationError{
			field:  "CollectionGroupId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionListReqMultiError(errors)
	}

	return nil
}

// CollectionListReqMultiError is an error wrapping multiple validation errors
// returned by CollectionListReq.ValidateAll() if the designated constraints
// aren't met.
type CollectionListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionListReqMultiError) AllErrors() []error { return m }

// CollectionListReqValidationError is the validation error returned by
// CollectionListReq.Validate if the designated constraints aren't met.
type CollectionListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionListReqValidationError) ErrorName() string {
	return "CollectionListReqValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionListReqValidationError{}

// Validate checks the field values on CollectionListRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollectionListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionListResMultiError, or nil if none found.
func (m *CollectionListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionListResMultiError(errors)
	}

	return nil
}

// CollectionListResMultiError is an error wrapping multiple validation errors
// returned by CollectionListRes.ValidateAll() if the designated constraints
// aren't met.
type CollectionListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionListResMultiError) AllErrors() []error { return m }

// CollectionListResValidationError is the validation error returned by
// CollectionListRes.Validate if the designated constraints aren't met.
type CollectionListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionListResValidationError) ErrorName() string {
	return "CollectionListResValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionListResValidationError{}

// Validate checks the field values on MyCollectionListByFileGuidsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MyCollectionListByFileGuidsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyCollectionListByFileGuidsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MyCollectionListByFileGuidsReqMultiError, or nil if none found.
func (m *MyCollectionListByFileGuidsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MyCollectionListByFileGuidsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := MyCollectionListByFileGuidsReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFileGuids()) < 1 {
		err := MyCollectionListByFileGuidsReqValidationError{
			field:  "FileGuids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MyCollectionListByFileGuidsReqMultiError(errors)
	}

	return nil
}

// MyCollectionListByFileGuidsReqMultiError is an error wrapping multiple
// validation errors returned by MyCollectionListByFileGuidsReq.ValidateAll()
// if the designated constraints aren't met.
type MyCollectionListByFileGuidsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyCollectionListByFileGuidsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyCollectionListByFileGuidsReqMultiError) AllErrors() []error { return m }

// MyCollectionListByFileGuidsReqValidationError is the validation error
// returned by MyCollectionListByFileGuidsReq.Validate if the designated
// constraints aren't met.
type MyCollectionListByFileGuidsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyCollectionListByFileGuidsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyCollectionListByFileGuidsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyCollectionListByFileGuidsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyCollectionListByFileGuidsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyCollectionListByFileGuidsReqValidationError) ErrorName() string {
	return "MyCollectionListByFileGuidsReqValidationError"
}

// Error satisfies the builtin error interface
func (e MyCollectionListByFileGuidsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyCollectionListByFileGuidsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyCollectionListByFileGuidsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyCollectionListByFileGuidsReqValidationError{}

// Validate checks the field values on MyCollectionListByFileGuidsRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MyCollectionListByFileGuidsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyCollectionListByFileGuidsRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MyCollectionListByFileGuidsResMultiError, or nil if none found.
func (m *MyCollectionListByFileGuidsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *MyCollectionListByFileGuidsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MyCollectionListByFileGuidsResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MyCollectionListByFileGuidsResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MyCollectionListByFileGuidsResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MyCollectionListByFileGuidsResMultiError(errors)
	}

	return nil
}

// MyCollectionListByFileGuidsResMultiError is an error wrapping multiple
// validation errors returned by MyCollectionListByFileGuidsRes.ValidateAll()
// if the designated constraints aren't met.
type MyCollectionListByFileGuidsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyCollectionListByFileGuidsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyCollectionListByFileGuidsResMultiError) AllErrors() []error { return m }

// MyCollectionListByFileGuidsResValidationError is the validation error
// returned by MyCollectionListByFileGuidsRes.Validate if the designated
// constraints aren't met.
type MyCollectionListByFileGuidsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyCollectionListByFileGuidsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyCollectionListByFileGuidsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyCollectionListByFileGuidsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyCollectionListByFileGuidsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyCollectionListByFileGuidsResValidationError) ErrorName() string {
	return "MyCollectionListByFileGuidsResValidationError"
}

// Error satisfies the builtin error interface
func (e MyCollectionListByFileGuidsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyCollectionListByFileGuidsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyCollectionListByFileGuidsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyCollectionListByFileGuidsResValidationError{}

// Validate checks the field values on CollectionGroupInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CollectionGroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionGroupInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollectionGroupInfoMultiError, or nil if none found.
func (m *CollectionGroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionGroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for IsCollect

	// no validation rules for Cnt

	if len(errors) > 0 {
		return CollectionGroupInfoMultiError(errors)
	}

	return nil
}

// CollectionGroupInfoMultiError is an error wrapping multiple validation
// errors returned by CollectionGroupInfo.ValidateAll() if the designated
// constraints aren't met.
type CollectionGroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionGroupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionGroupInfoMultiError) AllErrors() []error { return m }

// CollectionGroupInfoValidationError is the validation error returned by
// CollectionGroupInfo.Validate if the designated constraints aren't met.
type CollectionGroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionGroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionGroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionGroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionGroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionGroupInfoValidationError) ErrorName() string {
	return "CollectionGroupInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CollectionGroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionGroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionGroupInfoValidationError{}

// Validate checks the field values on CollectionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CollectionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionInfoMultiError,
// or nil if none found.
func (m *CollectionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for BizGuid

	// no validation rules for BizType

	if len(errors) > 0 {
		return CollectionInfoMultiError(errors)
	}

	return nil
}

// CollectionInfoMultiError is an error wrapping multiple validation errors
// returned by CollectionInfo.ValidateAll() if the designated constraints
// aren't met.
type CollectionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionInfoMultiError) AllErrors() []error { return m }

// CollectionInfoValidationError is the validation error returned by
// CollectionInfo.Validate if the designated constraints aren't met.
type CollectionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionInfoValidationError) ErrorName() string { return "CollectionInfoValidationError" }

// Error satisfies the builtin error interface
func (e CollectionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionInfoValidationError{}

// Validate checks the field values on IsCollectionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsCollectionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsCollectionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsCollectionReqMultiError, or nil if none found.
func (m *IsCollectionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsCollectionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := IsCollectionReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := IsCollectionReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	if len(errors) > 0 {
		return IsCollectionReqMultiError(errors)
	}

	return nil
}

// IsCollectionReqMultiError is an error wrapping multiple validation errors
// returned by IsCollectionReq.ValidateAll() if the designated constraints
// aren't met.
type IsCollectionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsCollectionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsCollectionReqMultiError) AllErrors() []error { return m }

// IsCollectionReqValidationError is the validation error returned by
// IsCollectionReq.Validate if the designated constraints aren't met.
type IsCollectionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCollectionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCollectionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCollectionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCollectionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCollectionReqValidationError) ErrorName() string { return "IsCollectionReqValidationError" }

// Error satisfies the builtin error interface
func (e IsCollectionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCollectionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCollectionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCollectionReqValidationError{}

// Validate checks the field values on IsCollectionRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsCollectionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsCollectionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsCollectionResMultiError, or nil if none found.
func (m *IsCollectionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *IsCollectionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsCollect

	if len(errors) > 0 {
		return IsCollectionResMultiError(errors)
	}

	return nil
}

// IsCollectionResMultiError is an error wrapping multiple validation errors
// returned by IsCollectionRes.ValidateAll() if the designated constraints
// aren't met.
type IsCollectionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsCollectionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsCollectionResMultiError) AllErrors() []error { return m }

// IsCollectionResValidationError is the validation error returned by
// IsCollectionRes.Validate if the designated constraints aren't met.
type IsCollectionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCollectionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCollectionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCollectionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCollectionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCollectionResValidationError) ErrorName() string { return "IsCollectionResValidationError" }

// Error satisfies the builtin error interface
func (e IsCollectionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCollectionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCollectionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCollectionResValidationError{}
