// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 创建用户
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	// 修改单个用户信息
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error)
	// 修改手机号
	UpdatePhone(ctx context.Context, in *UpdatePhoneReq, opts ...grpc.CallOption) (*UpdatePhoneRes, error)
	// 修改邮箱
	UpdateEmail(ctx context.Context, in *UpdateEmailReq, opts ...grpc.CallOption) (*UpdateEmailRes, error)
	// 只有自己，才能获取用户信息
	OauthInfo(ctx context.Context, in *OauthInfoReq, opts ...grpc.CallOption) (*OauthInfoRes, error)
	// 获取用户信息
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error)
	// 获取用户信息
	InfoByPhone(ctx context.Context, in *InfoByPhoneReq, opts ...grpc.CallOption) (*InfoByPhoneRes, error)
	// 获取登录信息，这里面会有密码的加密数据
	LoginInfo(ctx context.Context, in *LoginInfoReq, opts ...grpc.CallOption) (*LoginInfoRes, error)
	// 获取登录信息，这里面会有密码的加密数据
	LoginInfoByPhone(ctx context.Context, in *LoginInfoByPhoneReq, opts ...grpc.CallOption) (*LoginInfoByPhoneRes, error)
	// 获取登录信息，这里面会有密码的加密数据，这里需要兼容gocn。
	LoginInfoByName(ctx context.Context, in *LoginInfoByNameReq, opts ...grpc.CallOption) (*LoginInfoByNameRes, error)
	// 个人中心信息，数据会比较多
	ProfileInfo(ctx context.Context, in *ProfileInfoReq, opts ...grpc.CallOption) (*ProfileInfoRes, error)
	// 获取用户列表
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error)
	// 获取用户Map信息
	Map(ctx context.Context, in *MapReq, opts ...grpc.CallOption) (*MapRes, error)
	// 获取用户列表
	ListPage(ctx context.Context, in *ListPageReq, opts ...grpc.CallOption) (*ListPageRes, error)
	// 第三方 Open 登录LoginUserOpen
	LoginUserOpen(ctx context.Context, in *LoginUserOpenReq, opts ...grpc.CallOption) (*LoginUserOpenRes, error)
	// 搜索
	Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error) {
	out := new(UpdateRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdatePhone(ctx context.Context, in *UpdatePhoneReq, opts ...grpc.CallOption) (*UpdatePhoneRes, error) {
	out := new(UpdatePhoneRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/UpdatePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateEmail(ctx context.Context, in *UpdateEmailReq, opts ...grpc.CallOption) (*UpdateEmailRes, error) {
	out := new(UpdateEmailRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OauthInfo(ctx context.Context, in *OauthInfoReq, opts ...grpc.CallOption) (*OauthInfoRes, error) {
	out := new(OauthInfoRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/OauthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoRes, error) {
	out := new(InfoRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) InfoByPhone(ctx context.Context, in *InfoByPhoneReq, opts ...grpc.CallOption) (*InfoByPhoneRes, error) {
	out := new(InfoByPhoneRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/InfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginInfo(ctx context.Context, in *LoginInfoReq, opts ...grpc.CallOption) (*LoginInfoRes, error) {
	out := new(LoginInfoRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginInfoByPhone(ctx context.Context, in *LoginInfoByPhoneReq, opts ...grpc.CallOption) (*LoginInfoByPhoneRes, error) {
	out := new(LoginInfoByPhoneRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginInfoByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginInfoByName(ctx context.Context, in *LoginInfoByNameReq, opts ...grpc.CallOption) (*LoginInfoByNameRes, error) {
	out := new(LoginInfoByNameRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginInfoByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ProfileInfo(ctx context.Context, in *ProfileInfoReq, opts ...grpc.CallOption) (*ProfileInfoRes, error) {
	out := new(ProfileInfoRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/ProfileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRes, error) {
	out := new(ListRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Map(ctx context.Context, in *MapReq, opts ...grpc.CallOption) (*MapRes, error) {
	out := new(MapRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/Map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListPage(ctx context.Context, in *ListPageReq, opts ...grpc.CallOption) (*ListPageRes, error) {
	out := new(ListPageRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/ListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginUserOpen(ctx context.Context, in *LoginUserOpenReq, opts ...grpc.CallOption) (*LoginUserOpenRes, error) {
	out := new(LoginUserOpenRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/LoginUserOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Search(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error) {
	out := new(SearchRes)
	err := c.cc.Invoke(ctx, "/user.v1.User/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations should embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 创建用户
	Create(context.Context, *CreateReq) (*CreateRes, error)
	// 修改单个用户信息
	Update(context.Context, *UpdateReq) (*UpdateRes, error)
	// 修改手机号
	UpdatePhone(context.Context, *UpdatePhoneReq) (*UpdatePhoneRes, error)
	// 修改邮箱
	UpdateEmail(context.Context, *UpdateEmailReq) (*UpdateEmailRes, error)
	// 只有自己，才能获取用户信息
	OauthInfo(context.Context, *OauthInfoReq) (*OauthInfoRes, error)
	// 获取用户信息
	Info(context.Context, *InfoReq) (*InfoRes, error)
	// 获取用户信息
	InfoByPhone(context.Context, *InfoByPhoneReq) (*InfoByPhoneRes, error)
	// 获取登录信息，这里面会有密码的加密数据
	LoginInfo(context.Context, *LoginInfoReq) (*LoginInfoRes, error)
	// 获取登录信息，这里面会有密码的加密数据
	LoginInfoByPhone(context.Context, *LoginInfoByPhoneReq) (*LoginInfoByPhoneRes, error)
	// 获取登录信息，这里面会有密码的加密数据，这里需要兼容gocn。
	LoginInfoByName(context.Context, *LoginInfoByNameReq) (*LoginInfoByNameRes, error)
	// 个人中心信息，数据会比较多
	ProfileInfo(context.Context, *ProfileInfoReq) (*ProfileInfoRes, error)
	// 获取用户列表
	List(context.Context, *ListReq) (*ListRes, error)
	// 获取用户Map信息
	Map(context.Context, *MapReq) (*MapRes, error)
	// 获取用户列表
	ListPage(context.Context, *ListPageReq) (*ListPageRes, error)
	// 第三方 Open 登录LoginUserOpen
	LoginUserOpen(context.Context, *LoginUserOpenReq) (*LoginUserOpenRes, error)
	// 搜索
	Search(context.Context, *SearchReq) (*SearchRes, error)
}

// UnimplementedUserServer should be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServer) Update(context.Context, *UpdateReq) (*UpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServer) UpdatePhone(context.Context, *UpdatePhoneReq) (*UpdatePhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (UnimplementedUserServer) UpdateEmail(context.Context, *UpdateEmailReq) (*UpdateEmailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedUserServer) OauthInfo(context.Context, *OauthInfoReq) (*OauthInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthInfo not implemented")
}
func (UnimplementedUserServer) Info(context.Context, *InfoReq) (*InfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedUserServer) InfoByPhone(context.Context, *InfoByPhoneReq) (*InfoByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoByPhone not implemented")
}
func (UnimplementedUserServer) LoginInfo(context.Context, *LoginInfoReq) (*LoginInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginInfo not implemented")
}
func (UnimplementedUserServer) LoginInfoByPhone(context.Context, *LoginInfoByPhoneReq) (*LoginInfoByPhoneRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginInfoByPhone not implemented")
}
func (UnimplementedUserServer) LoginInfoByName(context.Context, *LoginInfoByNameReq) (*LoginInfoByNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginInfoByName not implemented")
}
func (UnimplementedUserServer) ProfileInfo(context.Context, *ProfileInfoReq) (*ProfileInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileInfo not implemented")
}
func (UnimplementedUserServer) List(context.Context, *ListReq) (*ListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserServer) Map(context.Context, *MapReq) (*MapRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (UnimplementedUserServer) ListPage(context.Context, *ListPageReq) (*ListPageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedUserServer) LoginUserOpen(context.Context, *LoginUserOpenReq) (*LoginUserOpenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserOpen not implemented")
}
func (UnimplementedUserServer) Search(context.Context, *SearchReq) (*SearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UpdatePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdatePhone(ctx, req.(*UpdatePhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateEmail(ctx, req.(*UpdateEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OauthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OauthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/OauthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OauthInfo(ctx, req.(*OauthInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_InfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).InfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/InfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).InfoByPhone(ctx, req.(*InfoByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginInfo(ctx, req.(*LoginInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginInfoByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfoByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginInfoByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginInfoByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginInfoByPhone(ctx, req.(*LoginInfoByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginInfoByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfoByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginInfoByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginInfoByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginInfoByName(ctx, req.(*LoginInfoByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ProfileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ProfileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/ProfileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ProfileInfo(ctx, req.(*ProfileInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Map(ctx, req.(*MapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/ListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListPage(ctx, req.(*ListPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginUserOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserOpenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginUserOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/LoginUserOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginUserOpen(ctx, req.(*LoginUserOpenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.User/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Search(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _User_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _User_Update_Handler,
		},
		{
			MethodName: "UpdatePhone",
			Handler:    _User_UpdatePhone_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _User_UpdateEmail_Handler,
		},
		{
			MethodName: "OauthInfo",
			Handler:    _User_OauthInfo_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _User_Info_Handler,
		},
		{
			MethodName: "InfoByPhone",
			Handler:    _User_InfoByPhone_Handler,
		},
		{
			MethodName: "LoginInfo",
			Handler:    _User_LoginInfo_Handler,
		},
		{
			MethodName: "LoginInfoByPhone",
			Handler:    _User_LoginInfoByPhone_Handler,
		},
		{
			MethodName: "LoginInfoByName",
			Handler:    _User_LoginInfoByName_Handler,
		},
		{
			MethodName: "ProfileInfo",
			Handler:    _User_ProfileInfo_Handler,
		},
		{
			MethodName: "List",
			Handler:    _User_List_Handler,
		},
		{
			MethodName: "Map",
			Handler:    _User_Map_Handler,
		},
		{
			MethodName: "ListPage",
			Handler:    _User_ListPage_Handler,
		},
		{
			MethodName: "LoginUserOpen",
			Handler:    _User_LoginUserOpen_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _User_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user.proto",
}
