// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/v1/u2u.proto

package userv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.USER_U2U_STAT_TYPE(0)
)

// Validate checks the field values on U2UStat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *U2UStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on U2UStat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in U2UStatMultiError, or nil if none found.
func (m *U2UStat) ValidateAll() error {
	return m.validate(true)
}

func (m *U2UStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for TargetUid

	// no validation rules for StatVal

	// no validation rules for Ctime

	// no validation rules for Utime

	if len(errors) > 0 {
		return U2UStatMultiError(errors)
	}

	return nil
}

// U2UStatMultiError is an error wrapping multiple validation errors returned
// by U2UStat.ValidateAll() if the designated constraints aren't met.
type U2UStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m U2UStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m U2UStatMultiError) AllErrors() []error { return m }

// U2UStatValidationError is the validation error returned by U2UStat.Validate
// if the designated constraints aren't met.
type U2UStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e U2UStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e U2UStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e U2UStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e U2UStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e U2UStatValidationError) ErrorName() string { return "U2UStatValidationError" }

// Error satisfies the builtin error interface
func (e U2UStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sU2UStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = U2UStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = U2UStatValidationError{}

// Validate checks the field values on ListU2UStatReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListU2UStatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListU2UStatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListU2UStatReqMultiError,
// or nil if none found.
func (m *ListU2UStatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListU2UStatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListU2UStatReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatType

	// no validation rules for StatVal

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListU2UStatReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListU2UStatReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListU2UStatReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListU2UStatReqMultiError(errors)
	}

	return nil
}

// ListU2UStatReqMultiError is an error wrapping multiple validation errors
// returned by ListU2UStatReq.ValidateAll() if the designated constraints
// aren't met.
type ListU2UStatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListU2UStatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListU2UStatReqMultiError) AllErrors() []error { return m }

// ListU2UStatReqValidationError is the validation error returned by
// ListU2UStatReq.Validate if the designated constraints aren't met.
type ListU2UStatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListU2UStatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListU2UStatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListU2UStatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListU2UStatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListU2UStatReqValidationError) ErrorName() string { return "ListU2UStatReqValidationError" }

// Error satisfies the builtin error interface
func (e ListU2UStatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListU2UStatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListU2UStatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListU2UStatReqValidationError{}

// Validate checks the field values on ListU2UStatRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListU2UStatRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListU2UStatRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListU2UStatResMultiError,
// or nil if none found.
func (m *ListU2UStatRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListU2UStatRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListU2UStatResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListU2UStatResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListU2UStatResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListU2UStatResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListU2UStatResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListU2UStatResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListU2UStatResMultiError(errors)
	}

	return nil
}

// ListU2UStatResMultiError is an error wrapping multiple validation errors
// returned by ListU2UStatRes.ValidateAll() if the designated constraints
// aren't met.
type ListU2UStatResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListU2UStatResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListU2UStatResMultiError) AllErrors() []error { return m }

// ListU2UStatResValidationError is the validation error returned by
// ListU2UStatRes.Validate if the designated constraints aren't met.
type ListU2UStatResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListU2UStatResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListU2UStatResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListU2UStatResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListU2UStatResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListU2UStatResValidationError) ErrorName() string { return "ListU2UStatResValidationError" }

// Error satisfies the builtin error interface
func (e ListU2UStatResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListU2UStatRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListU2UStatResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListU2UStatResValidationError{}

// Validate checks the field values on RevListU2UStatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RevListU2UStatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevListU2UStatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevListU2UStatReqMultiError, or nil if none found.
func (m *RevListU2UStatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RevListU2UStatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetUid() <= 0 {
		err := RevListU2UStatReqValidationError{
			field:  "TargetUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatType

	// no validation rules for StatVal

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevListU2UStatReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevListU2UStatReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevListU2UStatReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RevListU2UStatReqMultiError(errors)
	}

	return nil
}

// RevListU2UStatReqMultiError is an error wrapping multiple validation errors
// returned by RevListU2UStatReq.ValidateAll() if the designated constraints
// aren't met.
type RevListU2UStatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevListU2UStatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevListU2UStatReqMultiError) AllErrors() []error { return m }

// RevListU2UStatReqValidationError is the validation error returned by
// RevListU2UStatReq.Validate if the designated constraints aren't met.
type RevListU2UStatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevListU2UStatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevListU2UStatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevListU2UStatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevListU2UStatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevListU2UStatReqValidationError) ErrorName() string {
	return "RevListU2UStatReqValidationError"
}

// Error satisfies the builtin error interface
func (e RevListU2UStatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevListU2UStatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevListU2UStatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevListU2UStatReqValidationError{}

// Validate checks the field values on RevListU2UStatRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RevListU2UStatRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevListU2UStatRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevListU2UStatResMultiError, or nil if none found.
func (m *RevListU2UStatRes) ValidateAll() error {
	return m.validate(true)
}

func (m *RevListU2UStatRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevListU2UStatResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevListU2UStatResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevListU2UStatResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevListU2UStatResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevListU2UStatResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevListU2UStatResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RevListU2UStatResMultiError(errors)
	}

	return nil
}

// RevListU2UStatResMultiError is an error wrapping multiple validation errors
// returned by RevListU2UStatRes.ValidateAll() if the designated constraints
// aren't met.
type RevListU2UStatResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevListU2UStatResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevListU2UStatResMultiError) AllErrors() []error { return m }

// RevListU2UStatResValidationError is the validation error returned by
// RevListU2UStatRes.Validate if the designated constraints aren't met.
type RevListU2UStatResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevListU2UStatResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevListU2UStatResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevListU2UStatResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevListU2UStatResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevListU2UStatResValidationError) ErrorName() string {
	return "RevListU2UStatResValidationError"
}

// Error satisfies the builtin error interface
func (e RevListU2UStatResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevListU2UStatRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevListU2UStatResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevListU2UStatResValidationError{}

// Validate checks the field values on UpdateU2UStatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateU2UStatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateU2UStatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateU2UStatReqMultiError, or nil if none found.
func (m *UpdateU2UStatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateU2UStatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := UpdateU2UStatReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTargetUid() <= 0 {
		err := UpdateU2UStatReqValidationError{
			field:  "TargetUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatType

	// no validation rules for StatVal

	if len(errors) > 0 {
		return UpdateU2UStatReqMultiError(errors)
	}

	return nil
}

// UpdateU2UStatReqMultiError is an error wrapping multiple validation errors
// returned by UpdateU2UStatReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateU2UStatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateU2UStatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateU2UStatReqMultiError) AllErrors() []error { return m }

// UpdateU2UStatReqValidationError is the validation error returned by
// UpdateU2UStatReq.Validate if the designated constraints aren't met.
type UpdateU2UStatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateU2UStatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateU2UStatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateU2UStatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateU2UStatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateU2UStatReqValidationError) ErrorName() string { return "UpdateU2UStatReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateU2UStatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateU2UStatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateU2UStatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateU2UStatReqValidationError{}

// Validate checks the field values on UpdateU2UStatRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateU2UStatRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateU2UStatRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateU2UStatResMultiError, or nil if none found.
func (m *UpdateU2UStatRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateU2UStatRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateU2UStatResMultiError(errors)
	}

	return nil
}

// UpdateU2UStatResMultiError is an error wrapping multiple validation errors
// returned by UpdateU2UStatRes.ValidateAll() if the designated constraints
// aren't met.
type UpdateU2UStatResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateU2UStatResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateU2UStatResMultiError) AllErrors() []error { return m }

// UpdateU2UStatResValidationError is the validation error returned by
// UpdateU2UStatRes.Validate if the designated constraints aren't met.
type UpdateU2UStatResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateU2UStatResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateU2UStatResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateU2UStatResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateU2UStatResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateU2UStatResValidationError) ErrorName() string { return "UpdateU2UStatResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateU2UStatResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateU2UStatRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateU2UStatResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateU2UStatResValidationError{}

// Validate checks the field values on CntU2UStatReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CntU2UStatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CntU2UStatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CntU2UStatReqMultiError, or
// nil if none found.
func (m *CntU2UStatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CntU2UStatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CntU2UStatReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatType

	// no validation rules for StatVal

	if len(errors) > 0 {
		return CntU2UStatReqMultiError(errors)
	}

	return nil
}

// CntU2UStatReqMultiError is an error wrapping multiple validation errors
// returned by CntU2UStatReq.ValidateAll() if the designated constraints
// aren't met.
type CntU2UStatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CntU2UStatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CntU2UStatReqMultiError) AllErrors() []error { return m }

// CntU2UStatReqValidationError is the validation error returned by
// CntU2UStatReq.Validate if the designated constraints aren't met.
type CntU2UStatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CntU2UStatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CntU2UStatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CntU2UStatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CntU2UStatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CntU2UStatReqValidationError) ErrorName() string { return "CntU2UStatReqValidationError" }

// Error satisfies the builtin error interface
func (e CntU2UStatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCntU2UStatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CntU2UStatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CntU2UStatReqValidationError{}

// Validate checks the field values on CntU2UStatRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CntU2UStatRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CntU2UStatRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CntU2UStatResMultiError, or
// nil if none found.
func (m *CntU2UStatRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CntU2UStatRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cnt

	if len(errors) > 0 {
		return CntU2UStatResMultiError(errors)
	}

	return nil
}

// CntU2UStatResMultiError is an error wrapping multiple validation errors
// returned by CntU2UStatRes.ValidateAll() if the designated constraints
// aren't met.
type CntU2UStatResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CntU2UStatResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CntU2UStatResMultiError) AllErrors() []error { return m }

// CntU2UStatResValidationError is the validation error returned by
// CntU2UStatRes.Validate if the designated constraints aren't met.
type CntU2UStatResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CntU2UStatResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CntU2UStatResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CntU2UStatResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CntU2UStatResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CntU2UStatResValidationError) ErrorName() string { return "CntU2UStatResValidationError" }

// Error satisfies the builtin error interface
func (e CntU2UStatResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCntU2UStatRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CntU2UStatResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CntU2UStatResValidationError{}

// Validate checks the field values on RevCntU2UStatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RevCntU2UStatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevCntU2UStatReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevCntU2UStatReqMultiError, or nil if none found.
func (m *RevCntU2UStatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RevCntU2UStatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetUid() <= 0 {
		err := RevCntU2UStatReqValidationError{
			field:  "TargetUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatType

	// no validation rules for StatVal

	if len(errors) > 0 {
		return RevCntU2UStatReqMultiError(errors)
	}

	return nil
}

// RevCntU2UStatReqMultiError is an error wrapping multiple validation errors
// returned by RevCntU2UStatReq.ValidateAll() if the designated constraints
// aren't met.
type RevCntU2UStatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevCntU2UStatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevCntU2UStatReqMultiError) AllErrors() []error { return m }

// RevCntU2UStatReqValidationError is the validation error returned by
// RevCntU2UStatReq.Validate if the designated constraints aren't met.
type RevCntU2UStatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevCntU2UStatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevCntU2UStatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevCntU2UStatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevCntU2UStatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevCntU2UStatReqValidationError) ErrorName() string { return "RevCntU2UStatReqValidationError" }

// Error satisfies the builtin error interface
func (e RevCntU2UStatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevCntU2UStatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevCntU2UStatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevCntU2UStatReqValidationError{}

// Validate checks the field values on RevCntU2UStatRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RevCntU2UStatRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevCntU2UStatRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevCntU2UStatResMultiError, or nil if none found.
func (m *RevCntU2UStatRes) ValidateAll() error {
	return m.validate(true)
}

func (m *RevCntU2UStatRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cnt

	if len(errors) > 0 {
		return RevCntU2UStatResMultiError(errors)
	}

	return nil
}

// RevCntU2UStatResMultiError is an error wrapping multiple validation errors
// returned by RevCntU2UStatRes.ValidateAll() if the designated constraints
// aren't met.
type RevCntU2UStatResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevCntU2UStatResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevCntU2UStatResMultiError) AllErrors() []error { return m }

// RevCntU2UStatResValidationError is the validation error returned by
// RevCntU2UStatRes.Validate if the designated constraints aren't met.
type RevCntU2UStatResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevCntU2UStatResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevCntU2UStatResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevCntU2UStatResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevCntU2UStatResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevCntU2UStatResValidationError) ErrorName() string { return "RevCntU2UStatResValidationError" }

// Error satisfies the builtin error interface
func (e RevCntU2UStatResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevCntU2UStatRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevCntU2UStatResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevCntU2UStatResValidationError{}
