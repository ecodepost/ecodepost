// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package userv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// U2UClient is the client API for U2U service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type U2UClient interface {
	// 查询一个用户的关注列表和拉黑列表
	ListU2UStat(ctx context.Context, in *ListU2UStatReq, opts ...grpc.CallOption) (*ListU2UStatRes, error)
	// 查询一个用户的被关注列表(一般不查被拉黑列表)
	RevListU2UStat(ctx context.Context, in *RevListU2UStatReq, opts ...grpc.CallOption) (*RevListU2UStatRes, error)
	// 一个用户关注或取消关注另一个用户，一个用户拉黑或取消拉黑另一个用户
	UpdateU2UStat(ctx context.Context, in *UpdateU2UStatReq, opts ...grpc.CallOption) (*UpdateU2UStatRes, error)
	// 统计一个用户关注、或拉黑的总数
	CntU2UStat(ctx context.Context, in *CntU2UStatReq, opts ...grpc.CallOption) (*CntU2UStatRes, error)
	// 统计一个用户被关注、或被拉黑的总数
	RevCntU2UStat(ctx context.Context, in *RevCntU2UStatReq, opts ...grpc.CallOption) (*RevCntU2UStatRes, error)
}

type u2UClient struct {
	cc grpc.ClientConnInterface
}

func NewU2UClient(cc grpc.ClientConnInterface) U2UClient {
	return &u2UClient{cc}
}

func (c *u2UClient) ListU2UStat(ctx context.Context, in *ListU2UStatReq, opts ...grpc.CallOption) (*ListU2UStatRes, error) {
	out := new(ListU2UStatRes)
	err := c.cc.Invoke(ctx, "/user.v1.U2u/ListU2uStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *u2UClient) RevListU2UStat(ctx context.Context, in *RevListU2UStatReq, opts ...grpc.CallOption) (*RevListU2UStatRes, error) {
	out := new(RevListU2UStatRes)
	err := c.cc.Invoke(ctx, "/user.v1.U2u/RevListU2uStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *u2UClient) UpdateU2UStat(ctx context.Context, in *UpdateU2UStatReq, opts ...grpc.CallOption) (*UpdateU2UStatRes, error) {
	out := new(UpdateU2UStatRes)
	err := c.cc.Invoke(ctx, "/user.v1.U2u/UpdateU2uStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *u2UClient) CntU2UStat(ctx context.Context, in *CntU2UStatReq, opts ...grpc.CallOption) (*CntU2UStatRes, error) {
	out := new(CntU2UStatRes)
	err := c.cc.Invoke(ctx, "/user.v1.U2u/CntU2uStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *u2UClient) RevCntU2UStat(ctx context.Context, in *RevCntU2UStatReq, opts ...grpc.CallOption) (*RevCntU2UStatRes, error) {
	out := new(RevCntU2UStatRes)
	err := c.cc.Invoke(ctx, "/user.v1.U2u/RevCntU2uStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// U2UServer is the server API for U2U service.
// All implementations should embed UnimplementedU2UServer
// for forward compatibility
type U2UServer interface {
	// 查询一个用户的关注列表和拉黑列表
	ListU2UStat(context.Context, *ListU2UStatReq) (*ListU2UStatRes, error)
	// 查询一个用户的被关注列表(一般不查被拉黑列表)
	RevListU2UStat(context.Context, *RevListU2UStatReq) (*RevListU2UStatRes, error)
	// 一个用户关注或取消关注另一个用户，一个用户拉黑或取消拉黑另一个用户
	UpdateU2UStat(context.Context, *UpdateU2UStatReq) (*UpdateU2UStatRes, error)
	// 统计一个用户关注、或拉黑的总数
	CntU2UStat(context.Context, *CntU2UStatReq) (*CntU2UStatRes, error)
	// 统计一个用户被关注、或被拉黑的总数
	RevCntU2UStat(context.Context, *RevCntU2UStatReq) (*RevCntU2UStatRes, error)
}

// UnimplementedU2UServer should be embedded to have forward compatible implementations.
type UnimplementedU2UServer struct {
}

func (UnimplementedU2UServer) ListU2UStat(context.Context, *ListU2UStatReq) (*ListU2UStatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListU2UStat not implemented")
}
func (UnimplementedU2UServer) RevListU2UStat(context.Context, *RevListU2UStatReq) (*RevListU2UStatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevListU2UStat not implemented")
}
func (UnimplementedU2UServer) UpdateU2UStat(context.Context, *UpdateU2UStatReq) (*UpdateU2UStatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateU2UStat not implemented")
}
func (UnimplementedU2UServer) CntU2UStat(context.Context, *CntU2UStatReq) (*CntU2UStatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CntU2UStat not implemented")
}
func (UnimplementedU2UServer) RevCntU2UStat(context.Context, *RevCntU2UStatReq) (*RevCntU2UStatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevCntU2UStat not implemented")
}

// UnsafeU2UServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to U2UServer will
// result in compilation errors.
type UnsafeU2UServer interface {
	mustEmbedUnimplementedU2UServer()
}

func RegisterU2UServer(s grpc.ServiceRegistrar, srv U2UServer) {
	s.RegisterService(&U2U_ServiceDesc, srv)
}

func _U2U_ListU2UStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListU2UStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(U2UServer).ListU2UStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.U2u/ListU2uStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(U2UServer).ListU2UStat(ctx, req.(*ListU2UStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _U2U_RevListU2UStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevListU2UStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(U2UServer).RevListU2UStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.U2u/RevListU2uStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(U2UServer).RevListU2UStat(ctx, req.(*RevListU2UStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _U2U_UpdateU2UStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateU2UStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(U2UServer).UpdateU2UStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.U2u/UpdateU2uStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(U2UServer).UpdateU2UStat(ctx, req.(*UpdateU2UStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _U2U_CntU2UStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CntU2UStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(U2UServer).CntU2UStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.U2u/CntU2uStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(U2UServer).CntU2UStat(ctx, req.(*CntU2UStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _U2U_RevCntU2UStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevCntU2UStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(U2UServer).RevCntU2UStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.v1.U2u/RevCntU2uStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(U2UServer).RevCntU2UStat(ctx, req.(*RevCntU2UStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// U2U_ServiceDesc is the grpc.ServiceDesc for U2U service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var U2U_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.U2u",
	HandlerType: (*U2UServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListU2uStat",
			Handler:    _U2U_ListU2UStat_Handler,
		},
		{
			MethodName: "RevListU2uStat",
			Handler:    _U2U_RevListU2UStat_Handler,
		},
		{
			MethodName: "UpdateU2uStat",
			Handler:    _U2U_UpdateU2UStat_Handler,
		},
		{
			MethodName: "CntU2uStat",
			Handler:    _U2U_CntU2UStat_Handler,
		},
		{
			MethodName: "RevCntU2uStat",
			Handler:    _U2U_RevCntU2UStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/u2u.proto",
}
