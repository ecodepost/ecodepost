// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errcodev1

import (
	eerrors "github.com/gotomicro/ego/core/eerrors"
	codes "google.golang.org/grpc/codes"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ego package it is being compiled against.
const _ = eerrors.SupportPackageIsVersion1

var errUnknown *eerrors.EgoError
var errInternal *eerrors.EgoError
var errInvalidArgument *eerrors.EgoError
var errNotFound *eerrors.EgoError
var errAlreadyExist *eerrors.EgoError
var errAlreadyPermissionDenied *eerrors.EgoError
var errAborted *eerrors.EgoError
var errOutOfRange *eerrors.EgoError
var errDataLoss *eerrors.EgoError
var errDbError *eerrors.EgoError
var errRedisError *eerrors.EgoError
var errJsonMarshalError *eerrors.EgoError
var errProtoMarshalError *eerrors.EgoError
var errUidEmpty *eerrors.EgoError
var errNameEmpty *eerrors.EgoError
var errLogoEmpty *eerrors.EgoError
var errCustomDomainEmpty *eerrors.EgoError
var errCustomDomainAlreadyExist *eerrors.EgoError
var errFileGuidEmpty *eerrors.EgoError
var errSpaceGroupEmpty *eerrors.EgoError
var errSpaceEmpty *eerrors.EgoError
var errEditionReachLimited *eerrors.EgoError
var errPmsPermissionDenied *eerrors.EgoError
var errOperateUidEmpty *eerrors.EgoError
var errRepeatedApply *eerrors.EgoError
var errCommunityGuidNotMatch *eerrors.EgoError
var errCommunityGuidNotExist *eerrors.EgoError
var errGuidEmpty *eerrors.EgoError
var errCommunityVisibilityInvalid *eerrors.EgoError
var errFileNameLength *eerrors.EgoError
var errBizGuidEmpty *eerrors.EgoError
var errFileContentEmpty *eerrors.EgoError
var authErrInvalid *eerrors.EgoError
var authErrBrowserCookieSystemError *eerrors.EgoError
var authErrBrowserParentCookieSystemError *eerrors.EgoError
var authErrBrowserParentCookieEmpty *eerrors.EgoError
var authErrGetAccessByParentCookieError *eerrors.EgoError
var authErrRefreshTokenError *eerrors.EgoError
var authErrGetUserInfoByTokenError *eerrors.EgoError
var errProfileInvalid *eerrors.EgoError
var errProfilePhoneExist *eerrors.EgoError
var errProfileEmailExist *eerrors.EgoError
var errUserHasJoinedCmt *eerrors.EgoError

var i18n = map[string]map[string]string{
	"errcode.v1.ERR_UNKNOWN": map[string]string{
		"cn": "未知类型",
		"en": "UNKNOWN error",
	},
	"errcode.v1.ERR_INTERNAL": map[string]string{
		"cn": "内部错误",
		"en": "INTERNAL error",
	},
	"errcode.v1.ERR_INVALID_ARGUMENT": map[string]string{
		"cn": "参数错误",
		"en": "INVALID_ARGUMENT error",
	},
	"errcode.v1.ERR_NOT_FOUND": map[string]string{
		"cn": "找不到资源",
		"en": "NOT_FOUND error",
	},
	"errcode.v1.ERR_ALREADY_EXIST": map[string]string{
		"cn": "已经存在",
		"en": "ALREADY_EXISTS error",
	},
	"errcode.v1.ERR_ALREADY_PERMISSION_DENIED": map[string]string{
		"cn": "没有权限",
		"en": "PERMISSION_DENIED error",
	},
	"errcode.v1.ERR_ABORTED": map[string]string{
		"cn": "放弃操作",
		"en": "ABORTED error",
	},
	"errcode.v1.ERR_OUT_OF_RANGE": map[string]string{
		"cn": "超过限制",
		"en": "OUT_OF_RANGE error",
	},
	"errcode.v1.ERR_DATA_LOSS": map[string]string{
		"cn": "超过限制",
		"en": "DATA_LOSS error",
	},
	"errcode.v1.ERR_DB_ERROR": map[string]string{
		"cn": "DB错误",
		"en": "Intern DB error",
	},
	"errcode.v1.ERR_REDIS_ERROR": map[string]string{
		"cn": "Redis错误",
		"en": "Intern Redis error",
	},
	"errcode.v1.ERR_JSON_MARSHAL_ERROR": map[string]string{
		"cn": "编码 JSON 错误",
		"en": "Marshal JSON error",
	},
	"errcode.v1.ERR_PROTO_MARSHAL_ERROR": map[string]string{
		"cn": "编码 PROTO 错误",
		"en": "Marshal PROTO error",
	},
	"errcode.v1.ERR_UID_EMPTY": map[string]string{
		"cn": "UID不能为空",
		"en": "UID can't be empty",
	},
	"errcode.v1.ERR_NAME_EMPTY": map[string]string{
		"cn": "名字不能为空",
		"en": "Name can't be empty",
	},
	"errcode.v1.ERR_LOGO_EMPTY": map[string]string{
		"cn": "LOGO不能为空",
		"en": "Logo can't be empty",
	},
	"errcode.v1.ERR_CUSTOM_DOMAIN_EMPTY": map[string]string{
		"cn": "自定义域名不能为空",
		"en": "Custom domain can't be empty",
	},
	"errcode.v1.ERR_CUSTOM_DOMAIN_ALREADY_EXIST": map[string]string{
		"cn": "自定义域名已经存在",
		"en": "Custom domain already exist",
	},
	"errcode.v1.ERR_FILE_GUID_EMPTY": map[string]string{
		"cn": "文件GUID不能为空",
		"en": "File guid can't be empty",
	},
	"errcode.v1.ERR_SPACE_GROUP_EMPTY": map[string]string{
		"cn": "空间分组不能为空",
		"en": "space group can't be empty",
	},
	"errcode.v1.ERR_SPACE_EMPTY": map[string]string{
		"cn": "空间不能为空",
		"en": "space can't be empty",
	},
	"errcode.v1.ERR_EDITION_REACH_LIMITED": map[string]string{
		"cn": "社区版本到最大限制",
		"en": "community edition reach limited",
	},
	"errcode.v1.ERR_PMS_PERMISSION_DENIED": map[string]string{
		"cn": "你没有权限",
		"en": "you don't have permission",
	},
	"errcode.v1.ERR_OPERATE_UID_EMPTY": map[string]string{
		"cn": "操作用户不能为空",
		"en": "operate uid can't be empty",
	},
	"errcode.v1.ERR_REPEATED_APPLY": map[string]string{
		"cn": "不能重复申请",
		"en": "repeated apply forbidden",
	},
	"errcode.v1.ERR_COMMUNITY_GUID_NOT_MATCH": map[string]string{
		"cn": "guid不匹配",
		"en": "guid not match",
	},
	"errcode.v1.ERR_COMMUNITY_GUID_NOT_EXIST": map[string]string{
		"cn": "guid不存在",
		"en": "guid not exist",
	},
	"errcode.v1.ERR_GUID_EMPTY": map[string]string{
		"cn": "实体Guid不能为空",
		"en": "Guid can't be empty",
	},
	"errcode.v1.ERR_COMMUNITY_VISIBILITY_INVALID": map[string]string{
		"cn": "社区可见度非法",
		"en": "cmt not match",
	},
	"errcode.v1.ERR_FILE_NAME_LENGTH": map[string]string{
		"cn": "file name should not less than 0 or bigger than 100",
		"en": "get parent token fail",
	},
	"errcode.v1.ERR_BIZ_GUID_EMPTY": map[string]string{
		"cn": "业务Guid不能为空",
		"en": "Business guid can't be empty",
	},
	"errcode.v1.ERR_FILE_CONTENT_EMPTY": map[string]string{
		"cn": "文本内容不能为空",
		"en": "Content can't be empty",
	},
	"errcode.v1.AUTH_ERR_INVALID": map[string]string{
		"cn": "授权未知错误",
		"en": "auth invalid",
	},
	"errcode.v1.AUTH_ERR_BROWSER_COOKIE_SYSTEM_ERROR": map[string]string{
		"cn": "浏览器token cookie系统错误",
		"en": "token cookie invalid",
	},
	"errcode.v1.AUTH_ERR_BROWSER_PARENT_COOKIE_SYSTEM_ERROR": map[string]string{
		"cn": "浏览器parent token cookie系统错误",
		"en": "parent token cookie invalid",
	},
	"errcode.v1.AUTH_ERR_BROWSER_PARENT_COOKIE_EMPTY": map[string]string{
		"cn": "浏览器parent token不存在",
		"en": "parent token cookie empty",
	},
	"errcode.v1.AUTH_ERR_GET_ACCESS_BY_PARENT_COOKIE_ERROR": map[string]string{
		"cn": "获取access失败",
		"en": "get parent token fail",
	},
	"errcode.v1.AUTH_ERR_REFRESH_TOKEN_ERROR": map[string]string{
		"cn": "刷新token失败",
		"en": "get parent token fail",
	},
	"errcode.v1.AUTH_ERR_GET_USER_INFO_BY_TOKEN_ERROR": map[string]string{
		"cn": "获取用户信息失败",
		"en": "get parent token fail",
	},
	"errcode.v1.ERR_PROFILE_INVALID": map[string]string{
		"cn": "个人中心未知错误",
		"en": "profile invalid",
	},
	"errcode.v1.ERR_PROFILE_PHONE_EXIST": map[string]string{
		"cn": "手机号已存在",
		"en": "phone exist",
	},
	"errcode.v1.ERR_PROFILE_EMAIL_EXIST": map[string]string{
		"cn": "邮箱已存在",
		"en": "email exist",
	},
	"errcode.v1.ERR_USER_HAS_JOINED_CMT": map[string]string{
		"cn": "用户已加入社区",
		"en": "get parent token fail",
	},
}

func ReasonI18n(e eerrors.Error, lan string) string {
	return i18n[eerrors.FromError(e).Reason][lan]
}

func init() {
	errUnknown = eerrors.New(int(codes.Unknown), "errcode.v1.ERR_UNKNOWN", Error_ERR_UNKNOWN.String())
	eerrors.Register(errUnknown)
	errInternal = eerrors.New(int(codes.Internal), "errcode.v1.ERR_INTERNAL", Error_ERR_INTERNAL.String())
	eerrors.Register(errInternal)
	errInvalidArgument = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_INVALID_ARGUMENT", Error_ERR_INVALID_ARGUMENT.String())
	eerrors.Register(errInvalidArgument)
	errNotFound = eerrors.New(int(codes.NotFound), "errcode.v1.ERR_NOT_FOUND", Error_ERR_NOT_FOUND.String())
	eerrors.Register(errNotFound)
	errAlreadyExist = eerrors.New(int(codes.AlreadyExists), "errcode.v1.ERR_ALREADY_EXIST", Error_ERR_ALREADY_EXIST.String())
	eerrors.Register(errAlreadyExist)
	errAlreadyPermissionDenied = eerrors.New(int(codes.PermissionDenied), "errcode.v1.ERR_ALREADY_PERMISSION_DENIED", Error_ERR_ALREADY_PERMISSION_DENIED.String())
	eerrors.Register(errAlreadyPermissionDenied)
	errAborted = eerrors.New(int(codes.Aborted), "errcode.v1.ERR_ABORTED", Error_ERR_ABORTED.String())
	eerrors.Register(errAborted)
	errOutOfRange = eerrors.New(int(codes.OutOfRange), "errcode.v1.ERR_OUT_OF_RANGE", Error_ERR_OUT_OF_RANGE.String())
	eerrors.Register(errOutOfRange)
	errDataLoss = eerrors.New(int(codes.DataLoss), "errcode.v1.ERR_DATA_LOSS", Error_ERR_DATA_LOSS.String())
	eerrors.Register(errDataLoss)
	errDbError = eerrors.New(int(codes.Internal), "errcode.v1.ERR_DB_ERROR", Error_ERR_DB_ERROR.String())
	eerrors.Register(errDbError)
	errRedisError = eerrors.New(int(codes.Internal), "errcode.v1.ERR_REDIS_ERROR", Error_ERR_REDIS_ERROR.String())
	eerrors.Register(errRedisError)
	errJsonMarshalError = eerrors.New(int(codes.Internal), "errcode.v1.ERR_JSON_MARSHAL_ERROR", Error_ERR_JSON_MARSHAL_ERROR.String())
	eerrors.Register(errJsonMarshalError)
	errProtoMarshalError = eerrors.New(int(codes.Internal), "errcode.v1.ERR_PROTO_MARSHAL_ERROR", Error_ERR_PROTO_MARSHAL_ERROR.String())
	eerrors.Register(errProtoMarshalError)
	errUidEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_UID_EMPTY", Error_ERR_UID_EMPTY.String())
	eerrors.Register(errUidEmpty)
	errNameEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_NAME_EMPTY", Error_ERR_NAME_EMPTY.String())
	eerrors.Register(errNameEmpty)
	errLogoEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_LOGO_EMPTY", Error_ERR_LOGO_EMPTY.String())
	eerrors.Register(errLogoEmpty)
	errCustomDomainEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_CUSTOM_DOMAIN_EMPTY", Error_ERR_CUSTOM_DOMAIN_EMPTY.String())
	eerrors.Register(errCustomDomainEmpty)
	errCustomDomainAlreadyExist = eerrors.New(int(codes.AlreadyExists), "errcode.v1.ERR_CUSTOM_DOMAIN_ALREADY_EXIST", Error_ERR_CUSTOM_DOMAIN_ALREADY_EXIST.String())
	eerrors.Register(errCustomDomainAlreadyExist)
	errFileGuidEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_FILE_GUID_EMPTY", Error_ERR_FILE_GUID_EMPTY.String())
	eerrors.Register(errFileGuidEmpty)
	errSpaceGroupEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_SPACE_GROUP_EMPTY", Error_ERR_SPACE_GROUP_EMPTY.String())
	eerrors.Register(errSpaceGroupEmpty)
	errSpaceEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_SPACE_EMPTY", Error_ERR_SPACE_EMPTY.String())
	eerrors.Register(errSpaceEmpty)
	errEditionReachLimited = eerrors.New(int(codes.PermissionDenied), "errcode.v1.ERR_EDITION_REACH_LIMITED", Error_ERR_EDITION_REACH_LIMITED.String())
	eerrors.Register(errEditionReachLimited)
	errPmsPermissionDenied = eerrors.New(int(codes.PermissionDenied), "errcode.v1.ERR_PMS_PERMISSION_DENIED", Error_ERR_PMS_PERMISSION_DENIED.String())
	eerrors.Register(errPmsPermissionDenied)
	errOperateUidEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_OPERATE_UID_EMPTY", Error_ERR_OPERATE_UID_EMPTY.String())
	eerrors.Register(errOperateUidEmpty)
	errRepeatedApply = eerrors.New(int(codes.AlreadyExists), "errcode.v1.ERR_REPEATED_APPLY", Error_ERR_REPEATED_APPLY.String())
	eerrors.Register(errRepeatedApply)
	errCommunityGuidNotMatch = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_COMMUNITY_GUID_NOT_MATCH", Error_ERR_COMMUNITY_GUID_NOT_MATCH.String())
	eerrors.Register(errCommunityGuidNotMatch)
	errCommunityGuidNotExist = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_COMMUNITY_GUID_NOT_EXIST", Error_ERR_COMMUNITY_GUID_NOT_EXIST.String())
	eerrors.Register(errCommunityGuidNotExist)
	errGuidEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_GUID_EMPTY", Error_ERR_GUID_EMPTY.String())
	eerrors.Register(errGuidEmpty)
	errCommunityVisibilityInvalid = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_COMMUNITY_VISIBILITY_INVALID", Error_ERR_COMMUNITY_VISIBILITY_INVALID.String())
	eerrors.Register(errCommunityVisibilityInvalid)
	errFileNameLength = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_FILE_NAME_LENGTH", Error_ERR_FILE_NAME_LENGTH.String())
	eerrors.Register(errFileNameLength)
	errBizGuidEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_BIZ_GUID_EMPTY", Error_ERR_BIZ_GUID_EMPTY.String())
	eerrors.Register(errBizGuidEmpty)
	errFileContentEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_FILE_CONTENT_EMPTY", Error_ERR_FILE_CONTENT_EMPTY.String())
	eerrors.Register(errFileContentEmpty)
	authErrInvalid = eerrors.New(int(codes.Unknown), "errcode.v1.AUTH_ERR_INVALID", Error_AUTH_ERR_INVALID.String())
	eerrors.Register(authErrInvalid)
	authErrBrowserCookieSystemError = eerrors.New(int(codes.Internal), "errcode.v1.AUTH_ERR_BROWSER_COOKIE_SYSTEM_ERROR", Error_AUTH_ERR_BROWSER_COOKIE_SYSTEM_ERROR.String())
	eerrors.Register(authErrBrowserCookieSystemError)
	authErrBrowserParentCookieSystemError = eerrors.New(int(codes.Internal), "errcode.v1.AUTH_ERR_BROWSER_PARENT_COOKIE_SYSTEM_ERROR", Error_AUTH_ERR_BROWSER_PARENT_COOKIE_SYSTEM_ERROR.String())
	eerrors.Register(authErrBrowserParentCookieSystemError)
	authErrBrowserParentCookieEmpty = eerrors.New(int(codes.InvalidArgument), "errcode.v1.AUTH_ERR_BROWSER_PARENT_COOKIE_EMPTY", Error_AUTH_ERR_BROWSER_PARENT_COOKIE_EMPTY.String())
	eerrors.Register(authErrBrowserParentCookieEmpty)
	authErrGetAccessByParentCookieError = eerrors.New(int(codes.Internal), "errcode.v1.AUTH_ERR_GET_ACCESS_BY_PARENT_COOKIE_ERROR", Error_AUTH_ERR_GET_ACCESS_BY_PARENT_COOKIE_ERROR.String())
	eerrors.Register(authErrGetAccessByParentCookieError)
	authErrRefreshTokenError = eerrors.New(int(codes.Internal), "errcode.v1.AUTH_ERR_REFRESH_TOKEN_ERROR", Error_AUTH_ERR_REFRESH_TOKEN_ERROR.String())
	eerrors.Register(authErrRefreshTokenError)
	authErrGetUserInfoByTokenError = eerrors.New(int(codes.Internal), "errcode.v1.AUTH_ERR_GET_USER_INFO_BY_TOKEN_ERROR", Error_AUTH_ERR_GET_USER_INFO_BY_TOKEN_ERROR.String())
	eerrors.Register(authErrGetUserInfoByTokenError)
	errProfileInvalid = eerrors.New(int(codes.Unknown), "errcode.v1.ERR_PROFILE_INVALID", Error_ERR_PROFILE_INVALID.String())
	eerrors.Register(errProfileInvalid)
	errProfilePhoneExist = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_PROFILE_PHONE_EXIST", Error_ERR_PROFILE_PHONE_EXIST.String())
	eerrors.Register(errProfilePhoneExist)
	errProfileEmailExist = eerrors.New(int(codes.InvalidArgument), "errcode.v1.ERR_PROFILE_EMAIL_EXIST", Error_ERR_PROFILE_EMAIL_EXIST.String())
	eerrors.Register(errProfileEmailExist)
	errUserHasJoinedCmt = eerrors.New(int(codes.AlreadyExists), "errcode.v1.ERR_USER_HAS_JOINED_CMT", Error_ERR_USER_HAS_JOINED_CMT.String())
	eerrors.Register(errUserHasJoinedCmt)
}

// ErrUnknown  @code=UNKNOWN
// @i18n.cn="未知类型"
// @i18n.en="UNKNOWN error"
func ErrUnknown() eerrors.Error {
	return errUnknown
}

// ErrInternal  @code=INTERNAL
// @i18n.cn="内部错误"
// @i18n.en="INTERNAL error"
func ErrInternal() eerrors.Error {
	return errInternal
}

// ErrInvalidArgument  @code=INVALID_ARGUMENT
// @i18n.cn="参数错误"
// @i18n.en="INVALID_ARGUMENT error"
func ErrInvalidArgument() eerrors.Error {
	return errInvalidArgument
}

// ErrNotFound  @code=NOT_FOUND
// @i18n.cn="找不到资源"
// @i18n.en="NOT_FOUND error"
func ErrNotFound() eerrors.Error {
	return errNotFound
}

// ErrAlreadyExist  @code=ALREADY_EXISTS
// @i18n.cn="已经存在"
// @i18n.en="ALREADY_EXISTS error"
func ErrAlreadyExist() eerrors.Error {
	return errAlreadyExist
}

// ErrAlreadyPermissionDenied  @code=PERMISSION_DENIED
// @i18n.cn="没有权限"
// @i18n.en="PERMISSION_DENIED error"
func ErrAlreadyPermissionDenied() eerrors.Error {
	return errAlreadyPermissionDenied
}

// ErrAborted  @code=ABORTED
// @i18n.cn="放弃操作"
// @i18n.en="ABORTED error"
func ErrAborted() eerrors.Error {
	return errAborted
}

// ErrOutOfRange  @code=OUT_OF_RANGE
// @i18n.cn="超过限制"
// @i18n.en="OUT_OF_RANGE error"
func ErrOutOfRange() eerrors.Error {
	return errOutOfRange
}

// ErrDataLoss  @code=DATA_LOSS
// @i18n.cn="超过限制"
// @i18n.en="DATA_LOSS error"
func ErrDataLoss() eerrors.Error {
	return errDataLoss
}

// ErrDbError  @code=INTERNAL
// @i18n.cn="DB错误"
// @i18n.en="Intern DB error"
func ErrDbError() eerrors.Error {
	return errDbError
}

// ErrRedisError  @code=INTERNAL
// @i18n.cn="Redis错误"
// @i18n.en="Intern Redis error"
func ErrRedisError() eerrors.Error {
	return errRedisError
}

// ErrJsonMarshalError  @code=INTERNAL
// @i18n.cn="编码 JSON 错误"
// @i18n.en="Marshal JSON error"
func ErrJsonMarshalError() eerrors.Error {
	return errJsonMarshalError
}

// ErrProtoMarshalError  @code=INTERNAL
// @i18n.cn="编码 PROTO 错误"
// @i18n.en="Marshal PROTO error"
func ErrProtoMarshalError() eerrors.Error {
	return errProtoMarshalError
}

// ErrUidEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="UID不能为空"
// @i18n.en="UID can't be empty"
func ErrUidEmpty() eerrors.Error {
	return errUidEmpty
}

// ErrNameEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="社区不能为空"
// @i18n.en="Community can't be empty"
//
//	ERR_COMMUNITY_GUID_EMPTY = 102;
//
// @code=INVALID_ARGUMENT
// @i18n.cn="名字不能为空"
// @i18n.en="Name can't be empty"
func ErrNameEmpty() eerrors.Error {
	return errNameEmpty
}

// ErrLogoEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="LOGO不能为空"
// @i18n.en="Logo can't be empty"
func ErrLogoEmpty() eerrors.Error {
	return errLogoEmpty
}

// ErrCustomDomainEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="自定义域名不能为空"
// @i18n.en="Custom domain can't be empty"
func ErrCustomDomainEmpty() eerrors.Error {
	return errCustomDomainEmpty
}

// ErrCustomDomainAlreadyExist  @code=ALREADY_EXISTS
// @i18n.cn="自定义域名已经存在"
// @i18n.en="Custom domain already exist"
func ErrCustomDomainAlreadyExist() eerrors.Error {
	return errCustomDomainAlreadyExist
}

// ErrFileGuidEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="文件GUID不能为空"
// @i18n.en="File guid can't be empty"
func ErrFileGuidEmpty() eerrors.Error {
	return errFileGuidEmpty
}

// ErrSpaceGroupEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="空间分组不能为空"
// @i18n.en="space group can't be empty"
func ErrSpaceGroupEmpty() eerrors.Error {
	return errSpaceGroupEmpty
}

// ErrSpaceEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="空间不能为空"
// @i18n.en="space can't be empty"
func ErrSpaceEmpty() eerrors.Error {
	return errSpaceEmpty
}

// ErrEditionReachLimited  @code=PERMISSION_DENIED
// @i18n.cn="社区版本到最大限制"
// @i18n.en="community edition reach limited"
func ErrEditionReachLimited() eerrors.Error {
	return errEditionReachLimited
}

// ErrPmsPermissionDenied  @code=PERMISSION_DENIED
// @i18n.cn="你没有权限"
// @i18n.en="you don't have permission"
func ErrPmsPermissionDenied() eerrors.Error {
	return errPmsPermissionDenied
}

// ErrOperateUidEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="操作用户不能为空"
// @i18n.en="operate uid can't be empty"
func ErrOperateUidEmpty() eerrors.Error {
	return errOperateUidEmpty
}

// ErrRepeatedApply  @code=ALREADY_EXISTS
// @i18n.cn="不能重复申请"
// @i18n.en="repeated apply forbidden"
func ErrRepeatedApply() eerrors.Error {
	return errRepeatedApply
}

// ErrCommunityGuidNotMatch  @code=INVALID_ARGUMENT
// @i18n.cn="guid不匹配"
// @i18n.en="guid not match"
func ErrCommunityGuidNotMatch() eerrors.Error {
	return errCommunityGuidNotMatch
}

// ErrCommunityGuidNotExist  @code=INVALID_ARGUMENT
// @i18n.cn="guid不存在"
// @i18n.en="guid not exist"
func ErrCommunityGuidNotExist() eerrors.Error {
	return errCommunityGuidNotExist
}

// ErrGuidEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="实体Guid不能为空"
// @i18n.en="Guid can't be empty"
func ErrGuidEmpty() eerrors.Error {
	return errGuidEmpty
}

// ErrCommunityVisibilityInvalid  @code=INVALID_ARGUMENT
// @i18n.cn="社区可见度非法"
// @i18n.en="cmt not match"
func ErrCommunityVisibilityInvalid() eerrors.Error {
	return errCommunityVisibilityInvalid
}

// ErrFileNameLength  文件名称长度不合法
// @code=INVALID_ARGUMENT
// @i18n.cn="file name should not less than 0 or bigger than 100"
// @i18n.en="get parent token fail"
func ErrFileNameLength() eerrors.Error {
	return errFileNameLength
}

// ErrBizGuidEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="业务Guid不能为空"
// @i18n.en="Business guid can't be empty"
func ErrBizGuidEmpty() eerrors.Error {
	return errBizGuidEmpty
}

// ErrFileContentEmpty  @code=INVALID_ARGUMENT
// @i18n.cn="文本内容不能为空"
// @i18n.en="Content can't be empty"
func ErrFileContentEmpty() eerrors.Error {
	return errFileContentEmpty
}

// AuthErrInvalid  @code=UNKNOWN
// @i18n.cn="授权未知错误"
// @i18n.en="auth invalid"
func AuthErrInvalid() eerrors.Error {
	return authErrInvalid
}

// AuthErrBrowserCookieSystemError  获取sub token的浏览器系统错误
// @code=INTERNAL
// @i18n.cn="浏览器token cookie系统错误"
// @i18n.en="token cookie invalid"
func AuthErrBrowserCookieSystemError() eerrors.Error {
	return authErrBrowserCookieSystemError
}

// AuthErrBrowserParentCookieSystemError  获取parent token的浏览器系统错误
// @code=INTERNAL
// @i18n.cn="浏览器parent token cookie系统错误"
// @i18n.en="parent token cookie invalid"
func AuthErrBrowserParentCookieSystemError() eerrors.Error {
	return authErrBrowserParentCookieSystemError
}

// AuthErrBrowserParentCookieEmpty  parent token不存在
// @code=INVALID_ARGUMENT
// @i18n.cn="浏览器parent token不存在"
// @i18n.en="parent token cookie empty"
func AuthErrBrowserParentCookieEmpty() eerrors.Error {
	return authErrBrowserParentCookieEmpty
}

// AuthErrGetAccessByParentCookieError  grpc获取parent token失败
// @code=INTERNAL
// @i18n.cn="获取access失败"
// @i18n.en="get parent token fail"
func AuthErrGetAccessByParentCookieError() eerrors.Error {
	return authErrGetAccessByParentCookieError
}

// AuthErrRefreshTokenError  refresh token失败
// @code=INTERNAL
// @i18n.cn="刷新token失败"
// @i18n.en="get parent token fail"
func AuthErrRefreshTokenError() eerrors.Error {
	return authErrRefreshTokenError
}

// AuthErrGetUserInfoByTokenError  获取用户信息失败
// @code=INTERNAL
// @i18n.cn="获取用户信息失败"
// @i18n.en="get parent token fail"
func AuthErrGetUserInfoByTokenError() eerrors.Error {
	return authErrGetUserInfoByTokenError
}

// ErrProfileInvalid  @code=UNKNOWN
// @i18n.cn="个人中心未知错误"
// @i18n.en="profile invalid"
func ErrProfileInvalid() eerrors.Error {
	return errProfileInvalid
}

// ErrProfilePhoneExist  @code=INVALID_ARGUMENT
// @i18n.cn="手机号已存在"
// @i18n.en="phone exist"
func ErrProfilePhoneExist() eerrors.Error {
	return errProfilePhoneExist
}

// ErrProfileEmailExist  @code=INVALID_ARGUMENT
// @i18n.cn="邮箱已存在"
// @i18n.en="email exist"
func ErrProfileEmailExist() eerrors.Error {
	return errProfileEmailExist
}

// ErrUserHasJoinedCmt  用户已加入社区
// @code=ALREADY_EXISTS
// @i18n.cn="用户已加入社区"
// @i18n.en="get parent token fail"
func ErrUserHasJoinedCmt() eerrors.Error {
	return errUserHasJoinedCmt
}
