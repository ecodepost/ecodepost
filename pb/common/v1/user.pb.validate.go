// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/user.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Ctime

	// no validation rules for Nickname

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Avatar

	// no validation rules for NamePinyin

	// no validation rules for EmailBindStatus

	// no validation rules for Name

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserBaseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserBaseInfoMultiError, or
// nil if none found.
func (m *UserBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Avatar

	if len(errors) > 0 {
		return UserBaseInfoMultiError(errors)
	}

	return nil
}

// UserBaseInfoMultiError is an error wrapping multiple validation errors
// returned by UserBaseInfo.ValidateAll() if the designated constraints aren't met.
type UserBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserBaseInfoMultiError) AllErrors() []error { return m }

// UserBaseInfoValidationError is the validation error returned by
// UserBaseInfo.Validate if the designated constraints aren't met.
type UserBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserBaseInfoValidationError) ErrorName() string { return "UserBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserBaseInfoValidationError{}

// Validate checks the field values on CommunityInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommunityInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommunityInfoMultiError, or
// nil if none found.
func (m *CommunityInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Logo

	// no validation rules for Uid

	// no validation rules for IsAllowCreateSpaceGroup

	// no validation rules for Ctime

	// no validation rules for Access

	if len(errors) > 0 {
		return CommunityInfoMultiError(errors)
	}

	return nil
}

// CommunityInfoMultiError is an error wrapping multiple validation errors
// returned by CommunityInfo.ValidateAll() if the designated constraints
// aren't met.
type CommunityInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityInfoMultiError) AllErrors() []error { return m }

// CommunityInfoValidationError is the validation error returned by
// CommunityInfo.Validate if the designated constraints aren't met.
type CommunityInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityInfoValidationError) ErrorName() string { return "CommunityInfoValidationError" }

// Error satisfies the builtin error interface
func (e CommunityInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityInfoValidationError{}

// Validate checks the field values on CommunityMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommunityMemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityMemberInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommunityMemberInfoMultiError, or nil if none found.
func (m *CommunityMemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityMemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommunityMemberInfoValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommunityMemberInfoValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommunityMemberInfoValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Role

	if len(errors) > 0 {
		return CommunityMemberInfoMultiError(errors)
	}

	return nil
}

// CommunityMemberInfoMultiError is an error wrapping multiple validation
// errors returned by CommunityMemberInfo.ValidateAll() if the designated
// constraints aren't met.
type CommunityMemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityMemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityMemberInfoMultiError) AllErrors() []error { return m }

// CommunityMemberInfoValidationError is the validation error returned by
// CommunityMemberInfo.Validate if the designated constraints aren't met.
type CommunityMemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityMemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityMemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityMemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityMemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityMemberInfoValidationError) ErrorName() string {
	return "CommunityMemberInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CommunityMemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityMemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityMemberInfoValidationError{}

// Validate checks the field values on MemberRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberRoleMultiError, or
// nil if none found.
func (m *MemberRole) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Ctime

	// no validation rules for PmsManagerType

	// no validation rules for Name

	if len(errors) > 0 {
		return MemberRoleMultiError(errors)
	}

	return nil
}

// MemberRoleMultiError is an error wrapping multiple validation errors
// returned by MemberRole.ValidateAll() if the designated constraints aren't met.
type MemberRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberRoleMultiError) AllErrors() []error { return m }

// MemberRoleValidationError is the validation error returned by
// MemberRole.Validate if the designated constraints aren't met.
type MemberRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberRoleValidationError) ErrorName() string { return "MemberRoleValidationError" }

// Error satisfies the builtin error interface
func (e MemberRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberRoleValidationError{}
