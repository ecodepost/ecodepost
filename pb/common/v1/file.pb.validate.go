// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/file.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for ContentKey

	// no validation rules for Ctime

	// no validation rules for Utime

	// no validation rules for CreatedUid

	// no validation rules for UpdatedUid

	// no validation rules for Type

	// no validation rules for Format

	// no validation rules for Status

	// no validation rules for CntComment

	// no validation rules for CntView

	// no validation rules for CntCollect

	// no validation rules for HeadImage

	// no validation rules for IsAllowCreateComment

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileInfoValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Node

	// no validation rules for ParentGuid

	// no validation rules for ContentUrl

	// no validation rules for BizStatus

	// no validation rules for Sort

	// no validation rules for IpLocation

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}

	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on EmojiInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmojiInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmojiInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmojiInfoMultiError, or nil
// if none found.
func (m *EmojiInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EmojiInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Emoji

	// no validation rules for Cnt

	if len(errors) > 0 {
		return EmojiInfoMultiError(errors)
	}

	return nil
}

// EmojiInfoMultiError is an error wrapping multiple validation errors returned
// by EmojiInfo.ValidateAll() if the designated constraints aren't met.
type EmojiInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmojiInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmojiInfoMultiError) AllErrors() []error { return m }

// EmojiInfoValidationError is the validation error returned by
// EmojiInfo.Validate if the designated constraints aren't met.
type EmojiInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmojiInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmojiInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmojiInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmojiInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmojiInfoValidationError) ErrorName() string { return "EmojiInfoValidationError" }

// Error satisfies the builtin error interface
func (e EmojiInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmojiInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmojiInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmojiInfoValidationError{}

// Validate checks the field values on UploadConf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadConf with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadConfMultiError, or
// nil if none found.
func (m *UploadConf) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AccessKeyId

	// no validation rules for AccessKeySecret

	// no validation rules for StsToken

	// no validation rules for Bucket

	// no validation rules for CdnName

	// no validation rules for Expiration

	if len(errors) > 0 {
		return UploadConfMultiError(errors)
	}

	return nil
}

// UploadConfMultiError is an error wrapping multiple validation errors
// returned by UploadConf.ValidateAll() if the designated constraints aren't met.
type UploadConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadConfMultiError) AllErrors() []error { return m }

// UploadConfValidationError is the validation error returned by
// UploadConf.Validate if the designated constraints aren't met.
type UploadConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadConfValidationError) ErrorName() string { return "UploadConfValidationError" }

// Error satisfies the builtin error interface
func (e UploadConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadConfValidationError{}

// Validate checks the field values on FileShow with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileShow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileShow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileShowMultiError, or nil
// if none found.
func (m *FileShow) ValidateAll() error {
	return m.validate(true)
}

func (m *FileShow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Ctime

	// no validation rules for CntComment

	// no validation rules for CntView

	// no validation rules for CntCollect

	// no validation rules for HeadImage

	// no validation rules for SpaceGuid

	// no validation rules for IsAllowCreateComment

	// no validation rules for IsSiteTop

	// no validation rules for IsRecommend

	// no validation rules for Format

	for idx, item := range m.GetEmojiList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileShowValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileShowValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileShowValidationError{
					field:  fmt.Sprintf("EmojiList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Content

	// no validation rules for IpLocation

	if len(errors) > 0 {
		return FileShowMultiError(errors)
	}

	return nil
}

// FileShowMultiError is an error wrapping multiple validation errors returned
// by FileShow.ValidateAll() if the designated constraints aren't met.
type FileShowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileShowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileShowMultiError) AllErrors() []error { return m }

// FileShowValidationError is the validation error returned by
// FileShow.Validate if the designated constraints aren't met.
type FileShowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileShowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileShowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileShowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileShowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileShowValidationError) ErrorName() string { return "FileShowValidationError" }

// Error satisfies the builtin error interface
func (e FileShowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileShow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileShowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileShowValidationError{}
