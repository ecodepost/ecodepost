// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: common/v1/enum_common.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UP_TYPE:UploadType 头像使用类型
type CMN_UP_TYPE int32

const (
	// 无效枚举值
	CMN_UP_TYPE_INVALID CMN_UP_TYPE = 0
	// 头像
	CMN_UP_TYPE_AVATAR CMN_UP_TYPE = 1
	// 社区
	CMN_UP_TYPE_COMMUNITY CMN_UP_TYPE = 2
	// 空间
	CMN_UP_TYPE_SPACE CMN_UP_TYPE = 3
	// 通用FILE
	CMN_UP_TYPE_FILE CMN_UP_TYPE = 4
	// 通用FILE
	CMN_UP_TYPE_FILE_HEAD_IMAGE CMN_UP_TYPE = 5
	//    // 文章头图
	//    UP_TYPE_ARTICLE_HEAD_IMAGE = 4;
	// 问答的图
	//    UP_TYPE_QUESTION = 5;
	//    // 活动的图
	//    UP_TYPE_ACTIVITY = 6;
	// 社区banner图
	CMN_UP_TYPE_COMMUNITY_BANNER CMN_UP_TYPE = 8
)

// Enum value maps for CMN_UP_TYPE.
var (
	CMN_UP_TYPE_name = map[int32]string{
		0: "UP_TYPE_INVALID",
		1: "UP_TYPE_AVATAR",
		2: "UP_TYPE_COMMUNITY",
		3: "UP_TYPE_SPACE",
		4: "UP_TYPE_FILE",
		5: "UP_TYPE_FILE_HEAD_IMAGE",
		8: "UP_TYPE_COMMUNITY_BANNER",
	}
	CMN_UP_TYPE_value = map[string]int32{
		"UP_TYPE_INVALID":          0,
		"UP_TYPE_AVATAR":           1,
		"UP_TYPE_COMMUNITY":        2,
		"UP_TYPE_SPACE":            3,
		"UP_TYPE_FILE":             4,
		"UP_TYPE_FILE_HEAD_IMAGE":  5,
		"UP_TYPE_COMMUNITY_BANNER": 8,
	}
)

func (x CMN_UP_TYPE) Enum() *CMN_UP_TYPE {
	p := new(CMN_UP_TYPE)
	*p = x
	return p
}

func (x CMN_UP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_UP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[0].Descriptor()
}

func (CMN_UP_TYPE) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[0]
}

func (x CMN_UP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_UP_TYPE.Descriptor instead.
func (CMN_UP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 0}
}

// VISBL:Visibility 可见类型
type CMN_VISBL int32

const (
	// 无效枚举值
	CMN_VISBL_INVALID CMN_VISBL = 0
	// 互联网公开，完全可见
	CMN_VISBL_PUBLIC CMN_VISBL = 1
	// 社区内公开
	CMN_VISBL_INTERNAL CMN_VISBL = 2
	// 可以看见，需要点击后发出申请，审核通过加入
	// VISBL_PRIVATE = 3;
	// 不能看见，仅管理员邀请到该空间
	CMN_VISBL_SECRET CMN_VISBL = 3
	// 草稿模式
	CMN_VISBL_DRAFT CMN_VISBL = 4
)

// Enum value maps for CMN_VISBL.
var (
	CMN_VISBL_name = map[int32]string{
		0: "VISBL_INVALID",
		1: "VISBL_PUBLIC",
		2: "VISBL_INTERNAL",
		3: "VISBL_SECRET",
		4: "VISBL_DRAFT",
	}
	CMN_VISBL_value = map[string]int32{
		"VISBL_INVALID":  0,
		"VISBL_PUBLIC":   1,
		"VISBL_INTERNAL": 2,
		"VISBL_SECRET":   3,
		"VISBL_DRAFT":    4,
	}
)

func (x CMN_VISBL) Enum() *CMN_VISBL {
	p := new(CMN_VISBL)
	*p = x
	return p
}

func (x CMN_VISBL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_VISBL) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[1].Descriptor()
}

func (CMN_VISBL) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[1]
}

func (x CMN_VISBL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_VISBL.Descriptor instead.
func (CMN_VISBL) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 1}
}

// BIZ:BizType 业务类型，我们需要仔细定义这个类型，因为这涉及到我们如何发货，开通权限等
// 我们需要统一所有类型，否则转换起来就是坑爹
type CMN_BIZ int32

const (
	// 未定义
	CMN_BIZ_INVALID CMN_BIZ = 0
	// 文章
	CMN_BIZ_ARTICLE CMN_BIZ = 1
	// 问题
	CMN_BIZ_QUESTION CMN_BIZ = 2
	// 回答
	CMN_BIZ_ANSWER CMN_BIZ = 3
	// 社区
	CMN_BIZ_COMMUNITY CMN_BIZ = 5
	// 空间
	CMN_BIZ_SPACE CMN_BIZ = 6
	// 用户
	CMN_BIZ_USER CMN_BIZ = 7
	// 评论
	CMN_BIZ_COMMENT CMN_BIZ = 11
	// 社区年度会员
	CMN_BIZ_COMMUNITY_ANNUAL_MEMBER CMN_BIZ = 12
	// 专栏
	CMN_BIZ_COLUMN CMN_BIZ = 13
)

// Enum value maps for CMN_BIZ.
var (
	CMN_BIZ_name = map[int32]string{
		0:  "BIZ_INVALID",
		1:  "BIZ_ARTICLE",
		2:  "BIZ_QUESTION",
		3:  "BIZ_ANSWER",
		5:  "BIZ_COMMUNITY",
		6:  "BIZ_SPACE",
		7:  "BIZ_USER",
		11: "BIZ_COMMENT",
		12: "BIZ_COMMUNITY_ANNUAL_MEMBER",
		13: "BIZ_COLUMN",
	}
	CMN_BIZ_value = map[string]int32{
		"BIZ_INVALID":                 0,
		"BIZ_ARTICLE":                 1,
		"BIZ_QUESTION":                2,
		"BIZ_ANSWER":                  3,
		"BIZ_COMMUNITY":               5,
		"BIZ_SPACE":                   6,
		"BIZ_USER":                    7,
		"BIZ_COMMENT":                 11,
		"BIZ_COMMUNITY_ANNUAL_MEMBER": 12,
		"BIZ_COLUMN":                  13,
	}
)

func (x CMN_BIZ) Enum() *CMN_BIZ {
	p := new(CMN_BIZ)
	*p = x
	return p
}

func (x CMN_BIZ) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_BIZ) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[2].Descriptor()
}

func (CMN_BIZ) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[2]
}

func (x CMN_BIZ) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_BIZ.Descriptor instead.
func (CMN_BIZ) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 2}
}

// GUID:Guid Guid类型
type CMN_GUID int32

const (
	// 未定义
	CMN_GUID_INVALID CMN_GUID = 0
	// SPACE
	CMN_GUID_SPACE CMN_GUID = 1
	// SPACE_GROUP
	CMN_GUID_SPACE_GROUP CMN_GUID = 2
	// TOPIC
	CMN_GUID_FILE CMN_GUID = 3
	// COMMENT
	CMN_GUID_COMMENT CMN_GUID = 4
)

// Enum value maps for CMN_GUID.
var (
	CMN_GUID_name = map[int32]string{
		0: "GUID_INVALID",
		1: "GUID_SPACE",
		2: "GUID_SPACE_GROUP",
		3: "GUID_FILE",
		4: "GUID_COMMENT",
	}
	CMN_GUID_value = map[string]int32{
		"GUID_INVALID":     0,
		"GUID_SPACE":       1,
		"GUID_SPACE_GROUP": 2,
		"GUID_FILE":        3,
		"GUID_COMMENT":     4,
	}
)

func (x CMN_GUID) Enum() *CMN_GUID {
	p := new(CMN_GUID)
	*p = x
	return p
}

func (x CMN_GUID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_GUID) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[3].Descriptor()
}

func (CMN_GUID) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[3]
}

func (x CMN_GUID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_GUID.Descriptor instead.
func (CMN_GUID) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 3}
}

// PUSH_CHANNEL:PushChannel 推送渠道
type CMN_PUSH_CHANNEL int32

const (
	// 未知类型
	CMN_PUSH_CHANNEL_INVALID CMN_PUSH_CHANNEL = 0
	// 推送所有渠道
	CMN_PUSH_CHANNEL_ALL CMN_PUSH_CHANNEL = 1
	// 邮箱
	CMN_PUSH_CHANNEL_EMAIL CMN_PUSH_CHANNEL = 2
	// 浏览器
	CMN_PUSH_CHANNEL_BROWSER CMN_PUSH_CHANNEL = 3
	// APP推送
	CMN_PUSH_CHANNEL_APP CMN_PUSH_CHANNEL = 4
)

// Enum value maps for CMN_PUSH_CHANNEL.
var (
	CMN_PUSH_CHANNEL_name = map[int32]string{
		0: "PUSH_CHANNEL_INVALID",
		1: "PUSH_CHANNEL_ALL",
		2: "PUSH_CHANNEL_EMAIL",
		3: "PUSH_CHANNEL_BROWSER",
		4: "PUSH_CHANNEL_APP",
	}
	CMN_PUSH_CHANNEL_value = map[string]int32{
		"PUSH_CHANNEL_INVALID": 0,
		"PUSH_CHANNEL_ALL":     1,
		"PUSH_CHANNEL_EMAIL":   2,
		"PUSH_CHANNEL_BROWSER": 3,
		"PUSH_CHANNEL_APP":     4,
	}
)

func (x CMN_PUSH_CHANNEL) Enum() *CMN_PUSH_CHANNEL {
	p := new(CMN_PUSH_CHANNEL)
	*p = x
	return p
}

func (x CMN_PUSH_CHANNEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_PUSH_CHANNEL) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[4].Descriptor()
}

func (CMN_PUSH_CHANNEL) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[4]
}

func (x CMN_PUSH_CHANNEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_PUSH_CHANNEL.Descriptor instead.
func (CMN_PUSH_CHANNEL) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 4}
}

// INVITE:Invitation 邀请类型
type CMN_INVITE int32

const (
	// 未知类型
	CMN_INVITE_INVALID CMN_INVITE = 0
	// 注册
	CMN_INVITE_REGISTER CMN_INVITE = 1
)

// Enum value maps for CMN_INVITE.
var (
	CMN_INVITE_name = map[int32]string{
		0: "INVITE_INVALID",
		1: "INVITE_REGISTER",
	}
	CMN_INVITE_value = map[string]int32{
		"INVITE_INVALID":  0,
		"INVITE_REGISTER": 1,
	}
)

func (x CMN_INVITE) Enum() *CMN_INVITE {
	p := new(CMN_INVITE)
	*p = x
	return p
}

func (x CMN_INVITE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_INVITE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[5].Descriptor()
}

func (CMN_INVITE) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[5]
}

func (x CMN_INVITE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_INVITE.Descriptor instead.
func (CMN_INVITE) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 5}
}

// RISK_REPORT:RiskReport 举报类型枚举
type CMN_RISK_REPORT int32

const (
	// 无效类型
	CMN_RISK_REPORT_INVALID CMN_RISK_REPORT = 0
	// 政治敏感
	CMN_RISK_REPORT_POLITICALLY_SENSITIVE CMN_RISK_REPORT = 1
	// 疑似诈骗
	CMN_RISK_REPORT_SUSPECTED_FRAUD CMN_RISK_REPORT = 2
	// 低俗色情
	CMN_RISK_REPORT_VULGAR_PORN CMN_RISK_REPORT = 3
	// 抄袭／侵权
	CMN_RISK_REPORT_PLAGIARISM CMN_RISK_REPORT = 4
	// 垃圾广告
	CMN_RISK_REPORT_SPAM_ADVERTISEMENT CMN_RISK_REPORT = 5
	// 其他原因
	CMN_RISK_REPORT_OTHERS CMN_RISK_REPORT = 6
	// 网络暴力
	CMN_RISK_REPORT_CYBER_VIOLENCE CMN_RISK_REPORT = 7
)

// Enum value maps for CMN_RISK_REPORT.
var (
	CMN_RISK_REPORT_name = map[int32]string{
		0: "RISK_REPORT_INVALID",
		1: "RISK_REPORT_POLITICALLY_SENSITIVE",
		2: "RISK_REPORT_SUSPECTED_FRAUD",
		3: "RISK_REPORT_VULGAR_PORN",
		4: "RISK_REPORT_PLAGIARISM",
		5: "RISK_REPORT_SPAM_ADVERTISEMENT",
		6: "RISK_REPORT_OTHERS",
		7: "RISK_REPORT_CYBER_VIOLENCE",
	}
	CMN_RISK_REPORT_value = map[string]int32{
		"RISK_REPORT_INVALID":               0,
		"RISK_REPORT_POLITICALLY_SENSITIVE": 1,
		"RISK_REPORT_SUSPECTED_FRAUD":       2,
		"RISK_REPORT_VULGAR_PORN":           3,
		"RISK_REPORT_PLAGIARISM":            4,
		"RISK_REPORT_SPAM_ADVERTISEMENT":    5,
		"RISK_REPORT_OTHERS":                6,
		"RISK_REPORT_CYBER_VIOLENCE":        7,
	}
)

func (x CMN_RISK_REPORT) Enum() *CMN_RISK_REPORT {
	p := new(CMN_RISK_REPORT)
	*p = x
	return p
}

func (x CMN_RISK_REPORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_RISK_REPORT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[6].Descriptor()
}

func (CMN_RISK_REPORT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[6]
}

func (x CMN_RISK_REPORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_RISK_REPORT.Descriptor instead.
func (CMN_RISK_REPORT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 6}
}

// MEDAL_TYPE:MedalType 勋章类型
type CMN_MEDAL_TYPE int32

const (
	// 未知类型
	CMN_MEDAL_TYPE_INVALID CMN_MEDAL_TYPE = 0
	// 永久勋章
	CMN_MEDAL_TYPE_FOREVER CMN_MEDAL_TYPE = 1
	// 有效期勋章
	CMN_MEDAL_TYPE_VALID_TIME CMN_MEDAL_TYPE = 2
)

// Enum value maps for CMN_MEDAL_TYPE.
var (
	CMN_MEDAL_TYPE_name = map[int32]string{
		0: "MEDAL_TYPE_INVALID",
		1: "MEDAL_TYPE_FOREVER",
		2: "MEDAL_TYPE_VALID_TIME",
	}
	CMN_MEDAL_TYPE_value = map[string]int32{
		"MEDAL_TYPE_INVALID":    0,
		"MEDAL_TYPE_FOREVER":    1,
		"MEDAL_TYPE_VALID_TIME": 2,
	}
)

func (x CMN_MEDAL_TYPE) Enum() *CMN_MEDAL_TYPE {
	p := new(CMN_MEDAL_TYPE)
	*p = x
	return p
}

func (x CMN_MEDAL_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_MEDAL_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[7].Descriptor()
}

func (CMN_MEDAL_TYPE) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[7]
}

func (x CMN_MEDAL_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_MEDAL_TYPE.Descriptor instead.
func (CMN_MEDAL_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 7}
}

// COLL_VISBL:CollectionVisible 收藏可见类型
type CMN_COLL_VISBL int32

const (
	// 未知类型
	CMN_COLL_VISBL_INVALID CMN_COLL_VISBL = 0
	// 自己可见
	CMN_COLL_VISBL_SELF CMN_COLL_VISBL = 1
	// 粉丝可见
	CMN_COLL_VISBL_FANS CMN_COLL_VISBL = 2
	// 公开
	CMN_COLL_VISBL_PUBIC CMN_COLL_VISBL = 3
)

// Enum value maps for CMN_COLL_VISBL.
var (
	CMN_COLL_VISBL_name = map[int32]string{
		0: "COLL_VISBL_INVALID",
		1: "COLL_VISBL_SELF",
		2: "COLL_VISBL_FANS",
		3: "COLL_VISBL_PUBIC",
	}
	CMN_COLL_VISBL_value = map[string]int32{
		"COLL_VISBL_INVALID": 0,
		"COLL_VISBL_SELF":    1,
		"COLL_VISBL_FANS":    2,
		"COLL_VISBL_PUBIC":   3,
	}
)

func (x CMN_COLL_VISBL) Enum() *CMN_COLL_VISBL {
	p := new(CMN_COLL_VISBL)
	*p = x
	return p
}

func (x CMN_COLL_VISBL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_COLL_VISBL) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[8].Descriptor()
}

func (CMN_COLL_VISBL) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[8]
}

func (x CMN_COLL_VISBL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_COLL_VISBL.Descriptor instead.
func (CMN_COLL_VISBL) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 8}
}

// FILE_SORT:文件排序类型
type CMN_FILE_SORT int32

const (
	// 无效
	CMN_SORT_INVALID CMN_FILE_SORT = 0
	// 创建时间
	CMN_SORT_CREATE_TIME CMN_FILE_SORT = 1
	// 最热
	CMN_SORT_HOT_SCORE CMN_FILE_SORT = 2
	// 推荐
	CMN_SORT_RECOMMEND_SCORE CMN_FILE_SORT = 3
)

// Enum value maps for CMN_FILE_SORT.
var (
	CMN_FILE_SORT_name = map[int32]string{
		0: "SORT_INVALID",
		1: "SORT_CREATE_TIME",
		2: "SORT_HOT_SCORE",
		3: "SORT_RECOMMEND_SCORE",
	}
	CMN_FILE_SORT_value = map[string]int32{
		"SORT_INVALID":         0,
		"SORT_CREATE_TIME":     1,
		"SORT_HOT_SCORE":       2,
		"SORT_RECOMMEND_SCORE": 3,
	}
)

func (x CMN_FILE_SORT) Enum() *CMN_FILE_SORT {
	p := new(CMN_FILE_SORT)
	*p = x
	return p
}

func (x CMN_FILE_SORT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_FILE_SORT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[9].Descriptor()
}

func (CMN_FILE_SORT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[9]
}

func (x CMN_FILE_SORT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_FILE_SORT.Descriptor instead.
func (CMN_FILE_SORT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 9}
}

// APP 应用APP
type CMN_APP int32

const (
	// 无效应用
	CMN_APP_INVALID CMN_APP = 0
	// 文章
	CMN_APP_ARTICLE CMN_APP = 1
	// 问答
	CMN_APP_QA CMN_APP = 2
	// 专栏
	CMN_APP_COLUMN CMN_APP = 6
	// Course
	CMN_APP_LINK CMN_APP = 9
)

// Enum value maps for CMN_APP.
var (
	CMN_APP_name = map[int32]string{
		0: "APP_INVALID",
		1: "APP_ARTICLE",
		2: "APP_QA",
		6: "APP_COLUMN",
		9: "APP_LINK",
	}
	CMN_APP_value = map[string]int32{
		"APP_INVALID": 0,
		"APP_ARTICLE": 1,
		"APP_QA":      2,
		"APP_COLUMN":  6,
		"APP_LINK":    9,
	}
)

func (x CMN_APP) Enum() *CMN_APP {
	p := new(CMN_APP)
	*p = x
	return p
}

func (x CMN_APP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMN_APP) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_common_proto_enumTypes[10].Descriptor()
}

func (CMN_APP) Type() protoreflect.EnumType {
	return &file_common_v1_enum_common_proto_enumTypes[10]
}

func (x CMN_APP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CMN_APP.Descriptor instead.
func (CMN_APP) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0, 10}
}

// [enum 缩写原则]:
//  1. 超过4个字母后可以考虑缩写。
//  2. 省略元音与重复的字母，比如: TarGeT->TGT; NoTiFy -> NTF; STaTuS -> STS;
//  3. 多个单词组成，可以直接使用首字母，比如 UserAgent -> UA; UserAuthStatus -> UAS;
//  4. 一定要加上完整英文注释说明，比如 UA 上一行，必须注释『// UA:UserAgent 用户代理』
//
// CMN:Common 基础通用枚举值
type CMN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMN) Reset() {
	*x = CMN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_enum_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMN) ProtoMessage() {}

func (x *CMN) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_enum_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMN.ProtoReflect.Descriptor instead.
func (*CMN) Descriptor() ([]byte, []int) {
	return file_common_v1_enum_common_proto_rawDescGZIP(), []int{0}
}

var File_common_v1_enum_common_proto protoreflect.FileDescriptor

var file_common_v1_enum_common_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xec, 0x0a, 0x0a, 0x03, 0x43, 0x4d, 0x4e,
	0x22, 0xa9, 0x01, 0x0a, 0x07, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x08, 0x22, 0x63, 0x0a, 0x05,
	0x56, 0x49, 0x53, 0x42, 0x4c, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x53, 0x42,
	0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49,
	0x53, 0x42, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x04, 0x22, 0xbb, 0x01, 0x0a, 0x03, 0x42, 0x49, 0x5a, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49, 0x5a,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x49,
	0x5a, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x49, 0x5a, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x49, 0x5a, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x49, 0x5a, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x49, 0x5a, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x1f,
	0x0a, 0x1b, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x0d, 0x22,
	0x5f, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x55, 0x49, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x55, 0x49,
	0x44, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x55, 0x49,
	0x44, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x47, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x55, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x22, 0x86, 0x01, 0x0a, 0x0c, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x55, 0x53,
	0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x04, 0x22, 0x31, 0x0a, 0x06, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x49, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0x83, 0x02, 0x0a,
	0x0b, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x56, 0x55, 0x4c,
	0x47, 0x41, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x47, 0x49, 0x41,
	0x52, 0x49, 0x53, 0x4d, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x4d, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x59, 0x42, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x07, 0x22, 0x57, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x44, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x64, 0x0a, 0x0a, 0x43,
	0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c,
	0x4c, 0x5f, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x5f,
	0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4c, 0x5f, 0x56,
	0x49, 0x53, 0x42, 0x4c, 0x5f, 0x46, 0x41, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x4f, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x42, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x49, 0x43, 0x10,
	0x03, 0x22, 0x61, 0x0a, 0x09, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x48,
	0x4f, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x03, 0x22, 0x51, 0x0a, 0x03, 0x41, 0x50, 0x50, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x50, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x50, 0x50, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x50, 0x50, 0x5f, 0x51, 0x41, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x50,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x09, 0x42, 0x86, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x45, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x43, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_enum_common_proto_rawDescOnce sync.Once
	file_common_v1_enum_common_proto_rawDescData = file_common_v1_enum_common_proto_rawDesc
)

func file_common_v1_enum_common_proto_rawDescGZIP() []byte {
	file_common_v1_enum_common_proto_rawDescOnce.Do(func() {
		file_common_v1_enum_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_enum_common_proto_rawDescData)
	})
	return file_common_v1_enum_common_proto_rawDescData
}

var file_common_v1_enum_common_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_common_v1_enum_common_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_v1_enum_common_proto_goTypes = []interface{}{
	(CMN_UP_TYPE)(0),      // 0: common.v1.CMN.UP_TYPE
	(CMN_VISBL)(0),        // 1: common.v1.CMN.VISBL
	(CMN_BIZ)(0),          // 2: common.v1.CMN.BIZ
	(CMN_GUID)(0),         // 3: common.v1.CMN.GUID
	(CMN_PUSH_CHANNEL)(0), // 4: common.v1.CMN.PUSH_CHANNEL
	(CMN_INVITE)(0),       // 5: common.v1.CMN.INVITE
	(CMN_RISK_REPORT)(0),  // 6: common.v1.CMN.RISK_REPORT
	(CMN_MEDAL_TYPE)(0),   // 7: common.v1.CMN.MEDAL_TYPE
	(CMN_COLL_VISBL)(0),   // 8: common.v1.CMN.COLL_VISBL
	(CMN_FILE_SORT)(0),    // 9: common.v1.CMN.FILE_SORT
	(CMN_APP)(0),          // 10: common.v1.CMN.APP
	(*CMN)(nil),           // 11: common.v1.CMN
}
var file_common_v1_enum_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_v1_enum_common_proto_init() }
func file_common_v1_enum_common_proto_init() {
	if File_common_v1_enum_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v1_enum_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_enum_common_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_enum_common_proto_goTypes,
		DependencyIndexes: file_common_v1_enum_common_proto_depIdxs,
		EnumInfos:         file_common_v1_enum_common_proto_enumTypes,
		MessageInfos:      file_common_v1_enum_common_proto_msgTypes,
	}.Build()
	File_common_v1_enum_common_proto = out.File
	file_common_v1_enum_common_proto_rawDesc = nil
	file_common_v1_enum_common_proto_goTypes = nil
	file_common_v1_enum_common_proto_depIdxs = nil
}
