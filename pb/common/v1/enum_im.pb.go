// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: common/v1/enum_im.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SESSION_INVALID
type IM_SESSION int32

const (
	// SESSION_INVALID
	IM_SESSION_INVALID IM_SESSION = 0
	// SESSION_SINGLE_CHAT_TYPE
	IM_SESSION_SINGLE_CHAT_TYPE IM_SESSION = 1
	// SESSION_GROUP_CHAT_TYPE
	IM_SESSION_GROUP_CHAT_TYPE IM_SESSION = 2
	// SESSION_SUPER_GROUP_CHAT_TYPE
	IM_SESSION_SUPER_GROUP_CHAT_TYPE IM_SESSION = 3
	// SESSION_NOTIFICATION_CHAT_TYPE
	IM_SESSION_NOTIFICATION_CHAT_TYPE IM_SESSION = 4
)

// Enum value maps for IM_SESSION.
var (
	IM_SESSION_name = map[int32]string{
		0: "SESSION_INVALID",
		1: "SESSION_SINGLE_CHAT_TYPE",
		2: "SESSION_GROUP_CHAT_TYPE",
		3: "SESSION_SUPER_GROUP_CHAT_TYPE",
		4: "SESSION_NOTIFICATION_CHAT_TYPE",
	}
	IM_SESSION_value = map[string]int32{
		"SESSION_INVALID":                0,
		"SESSION_SINGLE_CHAT_TYPE":       1,
		"SESSION_GROUP_CHAT_TYPE":        2,
		"SESSION_SUPER_GROUP_CHAT_TYPE":  3,
		"SESSION_NOTIFICATION_CHAT_TYPE": 4,
	}
)

func (x IM_SESSION) Enum() *IM_SESSION {
	p := new(IM_SESSION)
	*p = x
	return p
}

func (x IM_SESSION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_SESSION) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[0].Descriptor()
}

func (IM_SESSION) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[0]
}

func (x IM_SESSION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_SESSION.Descriptor instead.
func (IM_SESSION) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 0}
}

// FIELD
type IM_FIELD int32

const (
	// FIELD_INVALID
	IM_FIELD_INVALID IM_FIELD = 0
	// FIELD_RECV_MSG_OPT
	IM_FIELD_RECV_MSG_OPT IM_FIELD = 1
	// FIELD_IS_PINNED
	IM_FIELD_IS_PINNED IM_FIELD = 2
	// FIELD_ATTACHED_INFO
	IM_FIELD_ATTACHED_INFO IM_FIELD = 3
	// FIELD_IS_PRIVATE_CHAT
	IM_FIELD_IS_PRIVATE_CHAT IM_FIELD = 4
	// FIELD_GROUP_AT_TYPE
	IM_FIELD_GROUP_AT_TYPE IM_FIELD = 5
	// FIELD_IS_NOT_IN_GROUP
	IM_FIELD_IS_NOT_IN_GROUP IM_FIELD = 6
	// FIELD_EX
	IM_FIELD_EX IM_FIELD = 7
	// FIELD_UNREAD
	IM_FIELD_UNREAD IM_FIELD = 8
)

// Enum value maps for IM_FIELD.
var (
	IM_FIELD_name = map[int32]string{
		0: "FIELD_INVALID",
		1: "FIELD_RECV_MSG_OPT",
		2: "FIELD_IS_PINNED",
		3: "FIELD_ATTACHED_INFO",
		4: "FIELD_IS_PRIVATE_CHAT",
		5: "FIELD_GROUP_AT_TYPE",
		6: "FIELD_IS_NOT_IN_GROUP",
		7: "FIELD_EX",
		8: "FIELD_UNREAD",
	}
	IM_FIELD_value = map[string]int32{
		"FIELD_INVALID":         0,
		"FIELD_RECV_MSG_OPT":    1,
		"FIELD_IS_PINNED":       2,
		"FIELD_ATTACHED_INFO":   3,
		"FIELD_IS_PRIVATE_CHAT": 4,
		"FIELD_GROUP_AT_TYPE":   5,
		"FIELD_IS_NOT_IN_GROUP": 6,
		"FIELD_EX":              7,
		"FIELD_UNREAD":          8,
	}
)

func (x IM_FIELD) Enum() *IM_FIELD {
	p := new(IM_FIELD)
	*p = x
	return p
}

func (x IM_FIELD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_FIELD) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[1].Descriptor()
}

func (IM_FIELD) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[1]
}

func (x IM_FIELD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_FIELD.Descriptor instead.
func (IM_FIELD) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 1}
}

// MsgFrom
type IM_MSG_TYPE int32

const (
	// MSG_TYPE_INVALID
	IM_MSG_TYPE_INVALID IM_MSG_TYPE = 0
	// MSG_TYPE_USER
	IM_MSG_TYPE_USER IM_MSG_TYPE = 1
	// MSG_TYPE_SYS
	IM_MSG_TYPE_SYS IM_MSG_TYPE = 2
)

// Enum value maps for IM_MSG_TYPE.
var (
	IM_MSG_TYPE_name = map[int32]string{
		0: "MSG_TYPE_INVALID",
		1: "MSG_TYPE_USER",
		2: "MSG_TYPE_SYS",
	}
	IM_MSG_TYPE_value = map[string]int32{
		"MSG_TYPE_INVALID": 0,
		"MSG_TYPE_USER":    1,
		"MSG_TYPE_SYS":     2,
	}
)

func (x IM_MSG_TYPE) Enum() *IM_MSG_TYPE {
	p := new(IM_MSG_TYPE)
	*p = x
	return p
}

func (x IM_MSG_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_MSG_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[2].Descriptor()
}

func (IM_MSG_TYPE) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[2]
}

func (x IM_MSG_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_MSG_TYPE.Descriptor instead.
func (IM_MSG_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 2}
}

// MSG STATUS
type IM_MSG_STATUS int32

const (
	// MSG_STATUS_INVALID
	IM_MSG_STATUS_INVALID IM_MSG_STATUS = 0
	// MSG_STATUS_DEFAULT
	IM_MSG_STATUS_DEFAULT IM_MSG_STATUS = 1
	// MSG_STATUS_SENDING
	IM_MSG_STATUS_SENDING IM_MSG_STATUS = 2
	// MSG_STATUS_SEND_SUCCESS
	IM_MSG_STATUS_SEND_SUCCESS IM_MSG_STATUS = 3
	// MSG_STATUS_SEND_FAIL
	IM_MSG_STATUS_SEND_FAIL IM_MSG_STATUS = 4
	// MSG_STATUS_HAS_DELETE
	IM_MSG_STATUS_HAS_DELETE IM_MSG_STATUS = 5
	// MSG_STATUS_REVOKE
	IM_MSG_STATUS_REVOKE IM_MSG_STATUS = 6
	// MSG_STATUS_FILTER
	IM_MSG_STATUS_FILTER IM_MSG_STATUS = 7
)

// Enum value maps for IM_MSG_STATUS.
var (
	IM_MSG_STATUS_name = map[int32]string{
		0: "MSG_STATUS_INVALID",
		1: "MSG_STATUS_DEFAULT",
		2: "MSG_STATUS_SENDING",
		3: "MSG_STATUS_SEND_SUCCESS",
		4: "MSG_STATUS_SEND_FAIL",
		5: "MSG_STATUS_HAS_DELETE",
		6: "MSG_STATUS_REVOKE",
		7: "MSG_STATUS_FILTER",
	}
	IM_MSG_STATUS_value = map[string]int32{
		"MSG_STATUS_INVALID":      0,
		"MSG_STATUS_DEFAULT":      1,
		"MSG_STATUS_SENDING":      2,
		"MSG_STATUS_SEND_SUCCESS": 3,
		"MSG_STATUS_SEND_FAIL":    4,
		"MSG_STATUS_HAS_DELETE":   5,
		"MSG_STATUS_REVOKE":       6,
		"MSG_STATUS_FILTER":       7,
	}
)

func (x IM_MSG_STATUS) Enum() *IM_MSG_STATUS {
	p := new(IM_MSG_STATUS)
	*p = x
	return p
}

func (x IM_MSG_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_MSG_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[3].Descriptor()
}

func (IM_MSG_STATUS) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[3]
}

func (x IM_MSG_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_MSG_STATUS.Descriptor instead.
func (IM_MSG_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 3}
}

// GROUP_STATUS
type IM_GROUP_STATUS int32

const (
	// GROUP_STATUS_INVALID
	IM_GROUP_STATUS_INVALID IM_GROUP_STATUS = 0
	// GROUP_STATUS_BAN_CHAT
	IM_GROUP_STATUS_BAN_CHAT IM_GROUP_STATUS = 1
	// GROUP_STATUS_DISMISSED
	IM_GROUP_STATUS_DISMISSED IM_GROUP_STATUS = 2
	// GROUP_STATUS_MUTED
	IM_GROUP_STATUS_MUTED IM_GROUP_STATUS = 3
)

// Enum value maps for IM_GROUP_STATUS.
var (
	IM_GROUP_STATUS_name = map[int32]string{
		0: "GROUP_STATUS_INVALID",
		1: "GROUP_STATUS_BAN_CHAT",
		2: "GROUP_STATUS_DISMISSED",
		3: "GROUP_STATUS_MUTED",
	}
	IM_GROUP_STATUS_value = map[string]int32{
		"GROUP_STATUS_INVALID":   0,
		"GROUP_STATUS_BAN_CHAT":  1,
		"GROUP_STATUS_DISMISSED": 2,
		"GROUP_STATUS_MUTED":     3,
	}
)

func (x IM_GROUP_STATUS) Enum() *IM_GROUP_STATUS {
	p := new(IM_GROUP_STATUS)
	*p = x
	return p
}

func (x IM_GROUP_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_GROUP_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[4].Descriptor()
}

func (IM_GROUP_STATUS) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[4]
}

func (x IM_GROUP_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_GROUP_STATUS.Descriptor instead.
func (IM_GROUP_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 4}
}

// GROUP_TYPE
type IM_GROUP_TYPE int32

const (
	// GROUP_TYPE_INVALID
	IM_GROUP_TYPE_INVALID IM_GROUP_TYPE = 0
	// GROUP_TYPE_NORMAL
	IM_GROUP_TYPE_NORMAL IM_GROUP_TYPE = 1
	// GROUP_TYPE_SUPER
	IM_GROUP_TYPE_SUPER IM_GROUP_TYPE = 2
	// GROUP_TYPE_WORKING
	IM_GROUP_TYPE_WORKING IM_GROUP_TYPE = 3
	// GROUP_TYPE_BANED
	IM_GROUP_TYPE_BANED IM_GROUP_TYPE = 4
	// GROUP_TYPE_BAN_PRIVATE_CHAT
	IM_GROUP_TYPE_BAN_PRIVATE_CHAT IM_GROUP_TYPE = 5
)

// Enum value maps for IM_GROUP_TYPE.
var (
	IM_GROUP_TYPE_name = map[int32]string{
		0: "GROUP_TYPE_INVALID",
		1: "GROUP_TYPE_NORMAL",
		2: "GROUP_TYPE_SUPER",
		3: "GROUP_TYPE_WORKING",
		4: "GROUP_TYPE_BANED",
		5: "GROUP_TYPE_BAN_PRIVATE_CHAT",
	}
	IM_GROUP_TYPE_value = map[string]int32{
		"GROUP_TYPE_INVALID":          0,
		"GROUP_TYPE_NORMAL":           1,
		"GROUP_TYPE_SUPER":            2,
		"GROUP_TYPE_WORKING":          3,
		"GROUP_TYPE_BANED":            4,
		"GROUP_TYPE_BAN_PRIVATE_CHAT": 5,
	}
)

func (x IM_GROUP_TYPE) Enum() *IM_GROUP_TYPE {
	p := new(IM_GROUP_TYPE)
	*p = x
	return p
}

func (x IM_GROUP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_GROUP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[5].Descriptor()
}

func (IM_GROUP_TYPE) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[5]
}

func (x IM_GROUP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_GROUP_TYPE.Descriptor instead.
func (IM_GROUP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 5}
}

// 主要指令
type IM_CMD int32

const (
	// 无效
	IM_CMD_INVALID IM_CMD = 0
	// 获取最新的序列号
	IM_CMD_GET_NEWEST_SEQ IM_CMD = 1
	// 根据列表获取拉取信息
	IM_CMD_PULL_MSG_BY_SEQ_LIST IM_CMD = 2
	// 发送信息
	IM_CMD_SEND_MSG IM_CMD = 3
	// 发送信号量
	IM_CMD_SEND_SIGNAL_MSG IM_CMD = 4
	// 删除信息
	IM_CMD_DEL_MSG IM_CMD = 5
	// 推送消息
	IM_CMD_PUSH_MSG IM_CMD = 6
	// CMD_KICK_ONLINE
	IM_CMD_KICK_ONLINE IM_CMD = 7
	// CMD_LOGOUT
	IM_CMD_LOGOUT IM_CMD = 8
	// CMD_DATA_ERROR
	IM_CMD_DATA_ERROR IM_CMD = 9
)

// Enum value maps for IM_CMD.
var (
	IM_CMD_name = map[int32]string{
		0: "CMD_INVALID",
		1: "CMD_GET_NEWEST_SEQ",
		2: "CMD_PULL_MSG_BY_SEQ_LIST",
		3: "CMD_SEND_MSG",
		4: "CMD_SEND_SIGNAL_MSG",
		5: "CMD_DEL_MSG",
		6: "CMD_PUSH_MSG",
		7: "CMD_KICK_ONLINE",
		8: "CMD_LOGOUT",
		9: "CMD_DATA_ERROR",
	}
	IM_CMD_value = map[string]int32{
		"CMD_INVALID":              0,
		"CMD_GET_NEWEST_SEQ":       1,
		"CMD_PULL_MSG_BY_SEQ_LIST": 2,
		"CMD_SEND_MSG":             3,
		"CMD_SEND_SIGNAL_MSG":      4,
		"CMD_DEL_MSG":              5,
		"CMD_PUSH_MSG":             6,
		"CMD_KICK_ONLINE":          7,
		"CMD_LOGOUT":               8,
		"CMD_DATA_ERROR":           9,
	}
)

func (x IM_CMD) Enum() *IM_CMD {
	p := new(IM_CMD)
	*p = x
	return p
}

func (x IM_CMD) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_CMD) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[6].Descriptor()
}

func (IM_CMD) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[6]
}

func (x IM_CMD) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_CMD.Descriptor instead.
func (IM_CMD) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 6}
}

// OPT:OPTION
type IM_OPT int32

const (
	// OPT_INVALID
	IM_OPT_INVALID IM_OPT = 0
	// OPT_IS_HISTORY
	IM_OPT_IS_HISTORY IM_OPT = 1
	// OPT_IS_PERSISTENT
	IM_OPT_IS_PERSISTENT IM_OPT = 2
	// OPT_IS_OFFLINE_PUSH
	IM_OPT_IS_OFFLINE_PUSH IM_OPT = 3
	// OPT_IS_UNREAD_COUNT
	IM_OPT_IS_UNREAD_COUNT IM_OPT = 4
	// OPT_IS_SEND_SYNC
	IM_OPT_IS_SEND_SYNC IM_OPT = 5
	// OPT_IS_NOT_PRIVATE
	IM_OPT_IS_NOT_PRIVATE IM_OPT = 6
	// OPT_IS_SENDER_CONVERSATION_UPDATE
	IM_OPT_IS_SENDER_CONVERSATION_UPDATE IM_OPT = 7
	// OPT_IS_SENDER_NOTIFICATION_PUSH
	IM_OPT_IS_SENDER_NOTIFICATION_PUSH IM_OPT = 8
)

// Enum value maps for IM_OPT.
var (
	IM_OPT_name = map[int32]string{
		0: "OPT_INVALID",
		1: "OPT_IS_HISTORY",
		2: "OPT_IS_PERSISTENT",
		3: "OPT_IS_OFFLINE_PUSH",
		4: "OPT_IS_UNREAD_COUNT",
		5: "OPT_IS_SEND_SYNC",
		6: "OPT_IS_NOT_PRIVATE",
		7: "OPT_IS_SENDER_CONVERSATION_UPDATE",
		8: "OPT_IS_SENDER_NOTIFICATION_PUSH",
	}
	IM_OPT_value = map[string]int32{
		"OPT_INVALID":                       0,
		"OPT_IS_HISTORY":                    1,
		"OPT_IS_PERSISTENT":                 2,
		"OPT_IS_OFFLINE_PUSH":               3,
		"OPT_IS_UNREAD_COUNT":               4,
		"OPT_IS_SEND_SYNC":                  5,
		"OPT_IS_NOT_PRIVATE":                6,
		"OPT_IS_SENDER_CONVERSATION_UPDATE": 7,
		"OPT_IS_SENDER_NOTIFICATION_PUSH":   8,
	}
)

func (x IM_OPT) Enum() *IM_OPT {
	p := new(IM_OPT)
	*p = x
	return p
}

func (x IM_OPT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_OPT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[7].Descriptor()
}

func (IM_OPT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[7]
}

func (x IM_OPT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_OPT.Descriptor instead.
func (IM_OPT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 7}
}

// CT: CONTENT_TYPE
type IM_CT int32

const (
	// 无效
	IM_CT_INVALID IM_CT = 0
	//  你收到了一条文本消息
	IM_CT_TEXT IM_CT = 101
	// [图片]
	IM_CT_PICTURE IM_CT = 102
	// [语音]
	IM_CT_VOICE IM_CT = 103
	// [视频]
	IM_CT_VIDEO IM_CT = 104
	// [文件]
	IM_CT_FILE IM_CT = 105
	// [有人@你]
	IM_CT_AT_TEXT IM_CT = 106
	// 合并消息
	IM_CT_MERGER IM_CT = 107
	// 卡片消息
	IM_CT_CARD IM_CT = 108
	// 地址消息
	IM_CT_LOCATION IM_CT = 109
	// 自定义消息
	IM_CT_CUSTOM IM_CT = 110
	// 撤回消息
	IM_CT_REVOKE IM_CT = 111
	// 是否已读
	IM_CT_HAS_READ_RECEIPT IM_CT = 112
	// CT_TYPING
	IM_CT_TYPING IM_CT = 113
	// CT_QUOTE
	IM_CT_QUOTE IM_CT = 114
	// CT_FACE
	IM_CT_FACE IM_CT = 115
	// CT_GROUP_HAS_READ_RECEIPT
	IM_CT_GROUP_HAS_READ_RECEIPT IM_CT = 116
	// CT_ADVANCED_TEXT
	IM_CT_ADVANCED_TEXT IM_CT = 117
	// CT_ADVANCED_REVOKE
	IM_CT_ADVANCED_REVOKE IM_CT = 118 //影响前者消息
	// CT_CUSTOM_NOT_TRIGGER_CONVERSATION
	IM_CT_CUSTOM_NOT_TRIGGER_CONVERSATION IM_CT = 119
	// CT_CUSTOM_ONLINE_ONLY
	IM_CT_CUSTOM_ONLINE_ONLY IM_CT = 120
	// 你收到一条新消息
	IM_CT_COMMON IM_CT = 200
	// 你收到一条群聊消息
	IM_CT_GROUP_MSG IM_CT = 201
	// 音视频通话邀请
	IM_CT_SIGNAL_MSG IM_CT = 202
	// CT_CUSTOM_NOTIFICATION
	IM_CT_CUSTOM_NOTIFICATION IM_CT = 203
	// CT_BEGIN
	IM_CT_BEGIN IM_CT = 1000
	// CT_DELETE_MESSAGE
	IM_CT_DELETE_MESSAGE IM_CT = 1100
	// CT_FRIEND_APPLICATION_APPROVED
	IM_CT_FRIEND_APPLICATION_APPROVED IM_CT = 1201 //add_friend_res
	// CT_FRIEND_APPLICATION_REJECTED
	IM_CT_FRIEND_APPLICATION_REJECTED IM_CT = 1202 //add_friend_res
	// CT_FRIEND_APPLICATION
	IM_CT_FRIEND_APPLICATION IM_CT = 1203 //add_friend
	// CT_FRIEND_ADD
	IM_CT_FRIEND_ADD IM_CT = 1204
	// CT_FRIEND_DELETE
	IM_CT_FRIEND_DELETE IM_CT = 1205 //delete_friend
	// CT_FRIEND_REMARK_SET
	IM_CT_FRIEND_REMARK_SET IM_CT = 1206 //set_friend_remark
	// CT_BLACK_ADD
	IM_CT_BLACK_ADD IM_CT = 1207
	// CT_BLACK_DELETE
	IM_CT_BLACK_DELETE IM_CT = 1208
	// CT_MSG_DELETE
	IM_CT_MSG_DELETE IM_CT = 1209
	// CT_CONVERSATION_OPT_CHANGE
	IM_CT_CONVERSATION_OPT_CHANGE IM_CT = 1300
	// CT_USER_BEGIN
	IM_CT_USER_BEGIN IM_CT = 1301
	// CT_USER_INFO_UPDATE
	IM_CT_USER_INFO_UPDATE IM_CT = 1303
	// CT_USER_END
	IM_CT_USER_END IM_CT = 1399
	// CT_GROUP_BEGIN
	IM_CT_GROUP_BEGIN IM_CT = 1400
	// CT_GROUP_CREATE
	IM_CT_GROUP_CREATE IM_CT = 1401
	// CT_GROUP_INFO_SET
	IM_CT_GROUP_INFO_SET IM_CT = 1402
	// CT_GROUP_JOIN_APPLICATION
	IM_CT_GROUP_JOIN_APPLICATION IM_CT = 1403
	// CT_GROUP_MEMBER_QUIT
	IM_CT_GROUP_MEMBER_QUIT IM_CT = 1404
	// CT_GROUP_APPLICATION_ACCEPT
	IM_CT_GROUP_APPLICATION_ACCEPT IM_CT = 1405
	// CT_GROUP_APPLICATION_REJECT
	IM_CT_GROUP_APPLICATION_REJECT IM_CT = 1406
	// CT_GROUP_OWNER_TRANSFER
	IM_CT_GROUP_OWNER_TRANSFER IM_CT = 1407
	// CT_GROUP_MEMBER_KICK
	IM_CT_GROUP_MEMBER_KICK IM_CT = 1408
	// CT_GROUP_MEMBER_INVITE
	IM_CT_GROUP_MEMBER_INVITE IM_CT = 1409
	// CT_GROUP_MEMBER_ENTER
	IM_CT_GROUP_MEMBER_ENTER IM_CT = 1410
	// CT_GROUP_DISMISS
	IM_CT_GROUP_DISMISS IM_CT = 1411
	// CT_GROUP_MEMBER_MUTE
	IM_CT_GROUP_MEMBER_MUTE IM_CT = 1412
	// CT_GROUP_MEMBER_CANCEL_MUTE
	IM_CT_GROUP_MEMBER_CANCEL_MUTE IM_CT = 1413
	// CT_GROUP_MUTE
	IM_CT_GROUP_MUTE IM_CT = 1414
	// CT_GROUP_CANCEL_MUTE
	IM_CT_GROUP_CANCEL_MUTE IM_CT = 1415
	// CT_GROUP_MEMBER_INFO_SET
	IM_CT_GROUP_MEMBER_INFO_SET IM_CT = 1416
	// CT_GROUP_MEMBER_SET_TO_ADMIN
	IM_CT_GROUP_MEMBER_SET_TO_ADMIN IM_CT = 1417
	// CT_GROUP_MEMBER_SET_TO_ORDINARY_USER
	IM_CT_GROUP_MEMBER_SET_TO_ORDINARY_USER IM_CT = 1418
	// CT_SIGNALING_BEGIN
	IM_CT_SIGNALING_BEGIN IM_CT = 1500
	// CT_SIGNALING
	IM_CT_SIGNALING IM_CT = 1501
	// CT_SIGNALING_END
	IM_CT_SIGNALING_END IM_CT = 1549
	// CT_SUPER_GROUP_BEGIN
	IM_CT_SUPER_GROUP_BEGIN IM_CT = 1550
	// CT_SUPER_GROUP_UPDATE
	IM_CT_SUPER_GROUP_UPDATE IM_CT = 1551
	// CT_SUPER_GROUP_END
	IM_CT_SUPER_GROUP_END IM_CT = 1552
	// CT_CONVERSATION_PRIVATE_CHAT
	IM_CT_CONVERSATION_PRIVATE_CHAT IM_CT = 1601
	// CT_ORG_CHANGE
	IM_CT_ORG_CHANGE IM_CT = 1701
	// CT_WORK_MOMENT_BEGIN
	IM_CT_WORK_MOMENT_BEGIN IM_CT = 1800
	// CT_WORK_MOMENT
	IM_CT_WORK_MOMENT IM_CT = 1801
	// CT_OA
	IM_CT_OA IM_CT = 1900
	// CT_END
	IM_CT_END IM_CT = 3000
)

// Enum value maps for IM_CT.
var (
	IM_CT_name = map[int32]string{
		0:    "CT_INVALID",
		101:  "CT_TEXT",
		102:  "CT_PICTURE",
		103:  "CT_VOICE",
		104:  "CT_VIDEO",
		105:  "CT_FILE",
		106:  "CT_AT_TEXT",
		107:  "CT_MERGER",
		108:  "CT_CARD",
		109:  "CT_LOCATION",
		110:  "CT_CUSTOM",
		111:  "CT_REVOKE",
		112:  "CT_HAS_READ_RECEIPT",
		113:  "CT_TYPING",
		114:  "CT_QUOTE",
		115:  "CT_FACE",
		116:  "CT_GROUP_HAS_READ_RECEIPT",
		117:  "CT_ADVANCED_TEXT",
		118:  "CT_ADVANCED_REVOKE",
		119:  "CT_CUSTOM_NOT_TRIGGER_CONVERSATION",
		120:  "CT_CUSTOM_ONLINE_ONLY",
		200:  "CT_COMMON",
		201:  "CT_GROUP_MSG",
		202:  "CT_SIGNAL_MSG",
		203:  "CT_CUSTOM_NOTIFICATION",
		1000: "CT_BEGIN",
		1100: "CT_DELETE_MESSAGE",
		1201: "CT_FRIEND_APPLICATION_APPROVED",
		1202: "CT_FRIEND_APPLICATION_REJECTED",
		1203: "CT_FRIEND_APPLICATION",
		1204: "CT_FRIEND_ADD",
		1205: "CT_FRIEND_DELETE",
		1206: "CT_FRIEND_REMARK_SET",
		1207: "CT_BLACK_ADD",
		1208: "CT_BLACK_DELETE",
		1209: "CT_MSG_DELETE",
		1300: "CT_CONVERSATION_OPT_CHANGE",
		1301: "CT_USER_BEGIN",
		1303: "CT_USER_INFO_UPDATE",
		1399: "CT_USER_END",
		1400: "CT_GROUP_BEGIN",
		1401: "CT_GROUP_CREATE",
		1402: "CT_GROUP_INFO_SET",
		1403: "CT_GROUP_JOIN_APPLICATION",
		1404: "CT_GROUP_MEMBER_QUIT",
		1405: "CT_GROUP_APPLICATION_ACCEPT",
		1406: "CT_GROUP_APPLICATION_REJECT",
		1407: "CT_GROUP_OWNER_TRANSFER",
		1408: "CT_GROUP_MEMBER_KICK",
		1409: "CT_GROUP_MEMBER_INVITE",
		1410: "CT_GROUP_MEMBER_ENTER",
		1411: "CT_GROUP_DISMISS",
		1412: "CT_GROUP_MEMBER_MUTE",
		1413: "CT_GROUP_MEMBER_CANCEL_MUTE",
		1414: "CT_GROUP_MUTE",
		1415: "CT_GROUP_CANCEL_MUTE",
		1416: "CT_GROUP_MEMBER_INFO_SET",
		1417: "CT_GROUP_MEMBER_SET_TO_ADMIN",
		1418: "CT_GROUP_MEMBER_SET_TO_ORDINARY_USER",
		1500: "CT_SIGNALING_BEGIN",
		1501: "CT_SIGNALING",
		1549: "CT_SIGNALING_END",
		1550: "CT_SUPER_GROUP_BEGIN",
		1551: "CT_SUPER_GROUP_UPDATE",
		1552: "CT_SUPER_GROUP_END",
		1601: "CT_CONVERSATION_PRIVATE_CHAT",
		1701: "CT_ORG_CHANGE",
		1800: "CT_WORK_MOMENT_BEGIN",
		1801: "CT_WORK_MOMENT",
		1900: "CT_OA",
		3000: "CT_END",
	}
	IM_CT_value = map[string]int32{
		"CT_INVALID":                           0,
		"CT_TEXT":                              101,
		"CT_PICTURE":                           102,
		"CT_VOICE":                             103,
		"CT_VIDEO":                             104,
		"CT_FILE":                              105,
		"CT_AT_TEXT":                           106,
		"CT_MERGER":                            107,
		"CT_CARD":                              108,
		"CT_LOCATION":                          109,
		"CT_CUSTOM":                            110,
		"CT_REVOKE":                            111,
		"CT_HAS_READ_RECEIPT":                  112,
		"CT_TYPING":                            113,
		"CT_QUOTE":                             114,
		"CT_FACE":                              115,
		"CT_GROUP_HAS_READ_RECEIPT":            116,
		"CT_ADVANCED_TEXT":                     117,
		"CT_ADVANCED_REVOKE":                   118,
		"CT_CUSTOM_NOT_TRIGGER_CONVERSATION":   119,
		"CT_CUSTOM_ONLINE_ONLY":                120,
		"CT_COMMON":                            200,
		"CT_GROUP_MSG":                         201,
		"CT_SIGNAL_MSG":                        202,
		"CT_CUSTOM_NOTIFICATION":               203,
		"CT_BEGIN":                             1000,
		"CT_DELETE_MESSAGE":                    1100,
		"CT_FRIEND_APPLICATION_APPROVED":       1201,
		"CT_FRIEND_APPLICATION_REJECTED":       1202,
		"CT_FRIEND_APPLICATION":                1203,
		"CT_FRIEND_ADD":                        1204,
		"CT_FRIEND_DELETE":                     1205,
		"CT_FRIEND_REMARK_SET":                 1206,
		"CT_BLACK_ADD":                         1207,
		"CT_BLACK_DELETE":                      1208,
		"CT_MSG_DELETE":                        1209,
		"CT_CONVERSATION_OPT_CHANGE":           1300,
		"CT_USER_BEGIN":                        1301,
		"CT_USER_INFO_UPDATE":                  1303,
		"CT_USER_END":                          1399,
		"CT_GROUP_BEGIN":                       1400,
		"CT_GROUP_CREATE":                      1401,
		"CT_GROUP_INFO_SET":                    1402,
		"CT_GROUP_JOIN_APPLICATION":            1403,
		"CT_GROUP_MEMBER_QUIT":                 1404,
		"CT_GROUP_APPLICATION_ACCEPT":          1405,
		"CT_GROUP_APPLICATION_REJECT":          1406,
		"CT_GROUP_OWNER_TRANSFER":              1407,
		"CT_GROUP_MEMBER_KICK":                 1408,
		"CT_GROUP_MEMBER_INVITE":               1409,
		"CT_GROUP_MEMBER_ENTER":                1410,
		"CT_GROUP_DISMISS":                     1411,
		"CT_GROUP_MEMBER_MUTE":                 1412,
		"CT_GROUP_MEMBER_CANCEL_MUTE":          1413,
		"CT_GROUP_MUTE":                        1414,
		"CT_GROUP_CANCEL_MUTE":                 1415,
		"CT_GROUP_MEMBER_INFO_SET":             1416,
		"CT_GROUP_MEMBER_SET_TO_ADMIN":         1417,
		"CT_GROUP_MEMBER_SET_TO_ORDINARY_USER": 1418,
		"CT_SIGNALING_BEGIN":                   1500,
		"CT_SIGNALING":                         1501,
		"CT_SIGNALING_END":                     1549,
		"CT_SUPER_GROUP_BEGIN":                 1550,
		"CT_SUPER_GROUP_UPDATE":                1551,
		"CT_SUPER_GROUP_END":                   1552,
		"CT_CONVERSATION_PRIVATE_CHAT":         1601,
		"CT_ORG_CHANGE":                        1701,
		"CT_WORK_MOMENT_BEGIN":                 1800,
		"CT_WORK_MOMENT":                       1801,
		"CT_OA":                                1900,
		"CT_END":                               3000,
	}
)

func (x IM_CT) Enum() *IM_CT {
	p := new(IM_CT)
	*p = x
	return p
}

func (x IM_CT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IM_CT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_im_proto_enumTypes[8].Descriptor()
}

func (IM_CT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_im_proto_enumTypes[8]
}

func (x IM_CT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IM_CT.Descriptor instead.
func (IM_CT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0, 8}
}

type IM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IM) Reset() {
	*x = IM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_enum_im_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IM) ProtoMessage() {}

func (x *IM) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_enum_im_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IM.ProtoReflect.Descriptor instead.
func (*IM) Descriptor() ([]byte, []int) {
	return file_common_v1_enum_im_proto_rawDescGZIP(), []int{0}
}

var File_common_v1_enum_im_proto protoreflect.FileDescriptor

var file_common_v1_enum_im_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x22, 0x80, 0x18, 0x0a, 0x02, 0x49, 0x4d, 0x22, 0xa0, 0x01, 0x0a, 0x07,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x22, 0xcf,
	0x01, 0x0a, 0x05, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x56, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x4f, 0x50,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f,
	0x50, 0x49, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x10, 0x08,
	0x22, 0x45, 0x0a, 0x08, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x10, 0x02, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x4d, 0x53, 0x47, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x53, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x07, 0x22, 0x77,
	0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x55, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x41, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x05, 0x22, 0xd3, 0x01, 0x0a, 0x03, 0x43,
	0x4d, 0x44, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e,
	0x45, 0x57, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4d, 0x44, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x59, 0x5f, 0x53,
	0x45, 0x51, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4d, 0x44,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4d, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4d, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x5f,
	0x4d, 0x53, 0x47, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x5f, 0x4b,
	0x49, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4d, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4d, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09,
	0x22, 0xed, 0x01, 0x0a, 0x03, 0x4f, 0x50, 0x54, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x50, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4f,
	0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x50, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x54, 0x5f, 0x49, 0x53,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x50, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4f,
	0x50, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x08,
	0x22, 0x84, 0x0d, 0x0a, 0x02, 0x43, 0x54, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x66, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x10, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x68,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x69, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x6a, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x52, 0x10, 0x6b, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x54, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10,
	0x70, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x71,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x72, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x54,
	0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x75,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x54, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x76, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x54, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x77,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x78, 0x12, 0x0e, 0x0a, 0x09, 0x43,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0xc8, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0xc9, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x47, 0x10,
	0xca, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcb, 0x01, 0x12,
	0x0d, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0xe8, 0x07, 0x12, 0x16,
	0x0a, 0x11, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0xcc, 0x08, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0xb1, 0x09, 0x12, 0x23, 0x0a, 0x1e, 0x43,
	0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xb2, 0x09,
	0x12, 0x1a, 0x0a, 0x15, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb3, 0x09, 0x12, 0x12, 0x0a, 0x0d,
	0x43, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x10, 0xb4, 0x09,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0xb5, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x54, 0x5f, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0xb6, 0x09, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0xb7, 0x09, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xb8, 0x09, 0x12, 0x12, 0x0a, 0x0d, 0x43,
	0x54, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xb9, 0x09, 0x12,
	0x1f, 0x0a, 0x1a, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x94, 0x0a,
	0x12, 0x12, 0x0a, 0x0d, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x47, 0x49,
	0x4e, 0x10, 0x95, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x97, 0x0a, 0x12, 0x10,
	0x0a, 0x0b, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xf7, 0x0a,
	0x12, 0x13, 0x0a, 0x0e, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x45, 0x47,
	0x49, 0x4e, 0x10, 0xf8, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xf9, 0x0a, 0x12, 0x16, 0x0a, 0x11, 0x43,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0xfa, 0x0a, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xfb, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x49, 0x54, 0x10, 0xfc, 0x0a, 0x12, 0x20,
	0x0a, 0x1b, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0xfd, 0x0a,
	0x12, 0x20, 0x0a, 0x1b, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0xfe, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0xff, 0x0a,
	0x12, 0x19, 0x0a, 0x14, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x10, 0x80, 0x0b, 0x12, 0x1b, 0x0a, 0x16, 0x43,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x81, 0x0b, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x82, 0x0b, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x83, 0x0b, 0x12, 0x19, 0x0a, 0x14, 0x43,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4d,
	0x55, 0x54, 0x45, 0x10, 0x84, 0x0b, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x85, 0x0b, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x86, 0x0b, 0x12, 0x19, 0x0a, 0x14,
	0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x4d, 0x55, 0x54, 0x45, 0x10, 0x87, 0x0b, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x88, 0x0b, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x89, 0x0b, 0x12, 0x29, 0x0a, 0x24, 0x43, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x8a, 0x0b, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0xdc, 0x0b, 0x12, 0x11, 0x0a,
	0x0c, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0xdd, 0x0b,
	0x12, 0x15, 0x0a, 0x10, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x8d, 0x0c, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10,
	0x8e, 0x0c, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8f, 0x0c, 0x12, 0x17,
	0x0a, 0x12, 0x43, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x90, 0x0c, 0x12, 0x21, 0x0a, 0x1c, 0x43, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0xc1, 0x0c, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x54,
	0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xa5, 0x0d, 0x12, 0x19,
	0x0a, 0x14, 0x43, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x88, 0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x54, 0x5f,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x89, 0x0e, 0x12, 0x0a,
	0x0a, 0x05, 0x43, 0x54, 0x5f, 0x4f, 0x41, 0x10, 0xec, 0x0e, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x54,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0xb8, 0x17, 0x42, 0x82, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x49,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa,
	0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_enum_im_proto_rawDescOnce sync.Once
	file_common_v1_enum_im_proto_rawDescData = file_common_v1_enum_im_proto_rawDesc
)

func file_common_v1_enum_im_proto_rawDescGZIP() []byte {
	file_common_v1_enum_im_proto_rawDescOnce.Do(func() {
		file_common_v1_enum_im_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_enum_im_proto_rawDescData)
	})
	return file_common_v1_enum_im_proto_rawDescData
}

var file_common_v1_enum_im_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_common_v1_enum_im_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_v1_enum_im_proto_goTypes = []interface{}{
	(IM_SESSION)(0),      // 0: common.v1.IM.SESSION
	(IM_FIELD)(0),        // 1: common.v1.IM.FIELD
	(IM_MSG_TYPE)(0),     // 2: common.v1.IM.MSG_TYPE
	(IM_MSG_STATUS)(0),   // 3: common.v1.IM.MSG_STATUS
	(IM_GROUP_STATUS)(0), // 4: common.v1.IM.GROUP_STATUS
	(IM_GROUP_TYPE)(0),   // 5: common.v1.IM.GROUP_TYPE
	(IM_CMD)(0),          // 6: common.v1.IM.CMD
	(IM_OPT)(0),          // 7: common.v1.IM.OPT
	(IM_CT)(0),           // 8: common.v1.IM.CT
	(*IM)(nil),           // 9: common.v1.IM
}
var file_common_v1_enum_im_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_v1_enum_im_proto_init() }
func file_common_v1_enum_im_proto_init() {
	if File_common_v1_enum_im_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v1_enum_im_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_enum_im_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_enum_im_proto_goTypes,
		DependencyIndexes: file_common_v1_enum_im_proto_depIdxs,
		EnumInfos:         file_common_v1_enum_im_proto_enumTypes,
		MessageInfos:      file_common_v1_enum_im_proto_msgTypes,
	}.Build()
	File_common_v1_enum_im_proto = out.File
	file_common_v1_enum_im_proto_rawDesc = nil
	file_common_v1_enum_im_proto_goTypes = nil
	file_common_v1_enum_im_proto_depIdxs = nil
}
