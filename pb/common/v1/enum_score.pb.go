// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: common/v1/enum_score.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 统计类型 1.签到, 2.每日任务 3.福利任务 4.邀请后注册;
type SCORE_TASK int32

const (
	// 未知类型
	SCORE_TASK_TYPE_INVALID SCORE_TASK = 0
	// 签到
	SCORE_TASK_TYPE_SIGN SCORE_TASK = 1
	// 每日任务
	SCORE_TASK_TYPE_EVERYDAY SCORE_TASK = 2
	// 福利任务(只能做一次)
	SCORE_TASK_TYPE_DO_ONCE SCORE_TASK = 3
	// 邀请任务后注册
	SCORE_TASK_TYPE_INVITE_AND_REGISTER SCORE_TASK = 4
)

// Enum value maps for SCORE_TASK.
var (
	SCORE_TASK_name = map[int32]string{
		0: "TASK_TYPE_INVALID",
		1: "TASK_TYPE_SIGN",
		2: "TASK_TYPE_EVERYDAY",
		3: "TASK_TYPE_DO_ONCE",
		4: "TASK_TYPE_INVITE_AND_REGISTER",
	}
	SCORE_TASK_value = map[string]int32{
		"TASK_TYPE_INVALID":             0,
		"TASK_TYPE_SIGN":                1,
		"TASK_TYPE_EVERYDAY":            2,
		"TASK_TYPE_DO_ONCE":             3,
		"TASK_TYPE_INVITE_AND_REGISTER": 4,
	}
)

func (x SCORE_TASK) Enum() *SCORE_TASK {
	p := new(SCORE_TASK)
	*p = x
	return p
}

func (x SCORE_TASK) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCORE_TASK) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_score_proto_enumTypes[0].Descriptor()
}

func (SCORE_TASK) Type() protoreflect.EnumType {
	return &file_common_v1_enum_score_proto_enumTypes[0]
}

func (x SCORE_TASK) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCORE_TASK.Descriptor instead.
func (SCORE_TASK) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_score_proto_rawDescGZIP(), []int{0, 0}
}

// TID:TaskID 积分任务ID，跟数据库需要匹配
type SCORE_TID int32

const (
	// 未知类型
	SCORE_TID_INVALID SCORE_TID = 0
	// 每日签到
	SCORE_TID_SIGN SCORE_TID = 1
	// 浏览活动
	SCORE_TID_VIEW_GOOD SCORE_TID = 2
	// 收藏数字藏品
	SCORE_TID_COLLECT_GOOD_SKU SCORE_TID = 3
	// 分享活动
	SCORE_TID_SHARE_GOOD SCORE_TID = 4
	// 邀请好友，只要这个邀请动作，不需要注册，也可以给奖励
	SCORE_TID_INVITE_USER SCORE_TID = 5
	// 获得数字藏品
	SCORE_TID_PAY_GOOD_SKU SCORE_TID = 6
	// 用户实名认证
	SCORE_TID_USER_CERTIFICATION SCORE_TID = 7
	// 邀请好友注册成功
	SCORE_TID_INVITE_USER_MUST_REGISTER SCORE_TID = 8
	// 新注册用户
	SCORE_TID_REGISTER_NEW_USER SCORE_TID = 9
)

// Enum value maps for SCORE_TID.
var (
	SCORE_TID_name = map[int32]string{
		0: "TID_INVALID",
		1: "TID_SIGN",
		2: "TID_VIEW_GOOD",
		3: "TID_COLLECT_GOOD_SKU",
		4: "TID_SHARE_GOOD",
		5: "TID_INVITE_USER",
		6: "TID_PAY_GOOD_SKU",
		7: "TID_USER_CERTIFICATION",
		8: "TID_INVITE_USER_MUST_REGISTER",
		9: "TID_REGISTER_NEW_USER",
	}
	SCORE_TID_value = map[string]int32{
		"TID_INVALID":                   0,
		"TID_SIGN":                      1,
		"TID_VIEW_GOOD":                 2,
		"TID_COLLECT_GOOD_SKU":          3,
		"TID_SHARE_GOOD":                4,
		"TID_INVITE_USER":               5,
		"TID_PAY_GOOD_SKU":              6,
		"TID_USER_CERTIFICATION":        7,
		"TID_INVITE_USER_MUST_REGISTER": 8,
		"TID_REGISTER_NEW_USER":         9,
	}
)

func (x SCORE_TID) Enum() *SCORE_TID {
	p := new(SCORE_TID)
	*p = x
	return p
}

func (x SCORE_TID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCORE_TID) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_score_proto_enumTypes[1].Descriptor()
}

func (SCORE_TID) Type() protoreflect.EnumType {
	return &file_common_v1_enum_score_proto_enumTypes[1]
}

func (x SCORE_TID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCORE_TID.Descriptor instead.
func (SCORE_TID) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_score_proto_rawDescGZIP(), []int{0, 1}
}

// 目标类型
type SCORE_TARGET int32

const (
	// 未知类型
	SCORE_TARGET_INVALID SCORE_TARGET = 0
	// 签到
	SCORE_TARGET_SIGN SCORE_TARGET = 1
	// 邀请
	SCORE_TARGET_INVITE_REGISTER SCORE_TARGET = 2
	// 商城
	SCORE_TARGET_SHOP SCORE_TARGET = 3
)

// Enum value maps for SCORE_TARGET.
var (
	SCORE_TARGET_name = map[int32]string{
		0: "TARGET_INVALID",
		1: "TARGET_SIGN",
		2: "TARGET_INVITE_REGISTER",
		3: "TARGET_SHOP",
	}
	SCORE_TARGET_value = map[string]int32{
		"TARGET_INVALID":         0,
		"TARGET_SIGN":            1,
		"TARGET_INVITE_REGISTER": 2,
		"TARGET_SHOP":            3,
	}
)

func (x SCORE_TARGET) Enum() *SCORE_TARGET {
	p := new(SCORE_TARGET)
	*p = x
	return p
}

func (x SCORE_TARGET) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCORE_TARGET) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_score_proto_enumTypes[2].Descriptor()
}

func (SCORE_TARGET) Type() protoreflect.EnumType {
	return &file_common_v1_enum_score_proto_enumTypes[2]
}

func (x SCORE_TARGET) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCORE_TARGET.Descriptor instead.
func (SCORE_TARGET) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_score_proto_rawDescGZIP(), []int{0, 2}
}

// LPT:LogProcessType 日志处理类型
type SCORE_LPT int32

const (
	// 未知类型
	SCORE_LPT_INVALID SCORE_LPT = 0
	// 增加
	SCORE_LPT_INCREASE SCORE_LPT = 1
	// 减少
	SCORE_LPT_DECREASE SCORE_LPT = 2
)

// Enum value maps for SCORE_LPT.
var (
	SCORE_LPT_name = map[int32]string{
		0: "LPT_INVALID",
		1: "LPT_INCREASE",
		2: "LPT_DECREASE",
	}
	SCORE_LPT_value = map[string]int32{
		"LPT_INVALID":  0,
		"LPT_INCREASE": 1,
		"LPT_DECREASE": 2,
	}
)

func (x SCORE_LPT) Enum() *SCORE_LPT {
	p := new(SCORE_LPT)
	*p = x
	return p
}

func (x SCORE_LPT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCORE_LPT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_score_proto_enumTypes[3].Descriptor()
}

func (SCORE_LPT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_score_proto_enumTypes[3]
}

func (x SCORE_LPT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCORE_LPT.Descriptor instead.
func (SCORE_LPT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_score_proto_rawDescGZIP(), []int{0, 3}
}

// SCORE:Score 积分相关枚举值
type SCORE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SCORE) Reset() {
	*x = SCORE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_enum_score_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCORE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCORE) ProtoMessage() {}

func (x *SCORE) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_enum_score_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCORE.ProtoReflect.Descriptor instead.
func (*SCORE) Descriptor() ([]byte, []int) {
	return file_common_v1_enum_score_proto_rawDescGZIP(), []int{0}
}

var File_common_v1_enum_score_proto protoreflect.FileDescriptor

var file_common_v1_enum_score_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0x92, 0x04, 0x0a, 0x05, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x22, 0x83, 0x01, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x5f, 0x4f, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x22, 0xea, 0x01, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x49, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x53, 0x4b, 0x55, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x53, 0x4b, 0x55, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x09, 0x22, 0x5a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x03,
	0x22, 0x3a, 0x0a, 0x03, 0x4c, 0x50, 0x54, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x50, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x50, 0x54, 0x5f,
	0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x50,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x42, 0x85, 0x01, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0e,
	0x45, 0x6e, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x1f, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_enum_score_proto_rawDescOnce sync.Once
	file_common_v1_enum_score_proto_rawDescData = file_common_v1_enum_score_proto_rawDesc
)

func file_common_v1_enum_score_proto_rawDescGZIP() []byte {
	file_common_v1_enum_score_proto_rawDescOnce.Do(func() {
		file_common_v1_enum_score_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_enum_score_proto_rawDescData)
	})
	return file_common_v1_enum_score_proto_rawDescData
}

var file_common_v1_enum_score_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_common_v1_enum_score_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_v1_enum_score_proto_goTypes = []interface{}{
	(SCORE_TASK)(0),   // 0: common.v1.SCORE.TASK
	(SCORE_TID)(0),    // 1: common.v1.SCORE.TID
	(SCORE_TARGET)(0), // 2: common.v1.SCORE.TARGET
	(SCORE_LPT)(0),    // 3: common.v1.SCORE.LPT
	(*SCORE)(nil),     // 4: common.v1.SCORE
}
var file_common_v1_enum_score_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_v1_enum_score_proto_init() }
func file_common_v1_enum_score_proto_init() {
	if File_common_v1_enum_score_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v1_enum_score_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCORE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_enum_score_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_enum_score_proto_goTypes,
		DependencyIndexes: file_common_v1_enum_score_proto_depIdxs,
		EnumInfos:         file_common_v1_enum_score_proto_enumTypes,
		MessageInfos:      file_common_v1_enum_score_proto_msgTypes,
	}.Build()
	File_common_v1_enum_score_proto = out.File
	file_common_v1_enum_score_proto_rawDesc = nil
	file_common_v1_enum_score_proto_goTypes = nil
	file_common_v1_enum_score_proto_depIdxs = nil
}
