// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        (unknown)
// source: common/v1/enum_track.proto

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TOTAL_EVENT:TotalEventType 统计信息
type TRACK_TOTAL_EVENT int32

const (
	// 未知类型
	TRACK_TOTAL_EVENT_INVALID TRACK_TOTAL_EVENT = 0
	// 创建社区成员
	TRACK_TOTAL_EVENT_COMMUNITY_CREATE_MEMBER TRACK_TOTAL_EVENT = 1
	// 删除社区成员
	TRACK_TOTAL_EVENT_COMMUNITY_DELETE_MEMBER TRACK_TOTAL_EVENT = 2
	// 创建空间成员
	TRACK_TOTAL_EVENT_SPACE_CREATE_MEMBER TRACK_TOTAL_EVENT = 3
	// 删除空间成员
	TRACK_TOTAL_EVENT_SPACE_DELETE_MEMBER TRACK_TOTAL_EVENT = 4
	// 创建文件
	TRACK_TOTAL_EVENT_CREATE_FILE TRACK_TOTAL_EVENT = 5
	// 删除文件
	TRACK_TOTAL_EVENT_DELETE_FILE TRACK_TOTAL_EVENT = 6
	// 创建评论
	TRACK_TOTAL_EVENT_CREATE_COMMENT TRACK_TOTAL_EVENT = 7
	// 删除评论
	TRACK_TOTAL_EVENT_DELETE_COMMENT TRACK_TOTAL_EVENT = 8
	// 创建表情
	TRACK_TOTAL_EVENT_CREATE_EMOJI TRACK_TOTAL_EVENT = 9
	// 删除表情
	TRACK_TOTAL_EVENT_DELETE_EMOJI TRACK_TOTAL_EVENT = 10
	// 创建分享
	TRACK_TOTAL_EVENT_CREATE_SHARE TRACK_TOTAL_EVENT = 11
	// 删除分享
	TRACK_TOTAL_EVENT_DELETE_SHARE TRACK_TOTAL_EVENT = 12
	// 用户主动退出空间
	TRACK_TOTAL_EVENT_SPACE_QUIT_MEMBER TRACK_TOTAL_EVENT = 13
)

// Enum value maps for TRACK_TOTAL_EVENT.
var (
	TRACK_TOTAL_EVENT_name = map[int32]string{
		0:  "TOTAL_EVENT_INVALID",
		1:  "TOTAL_EVENT_COMMUNITY_CREATE_MEMBER",
		2:  "TOTAL_EVENT_COMMUNITY_DELETE_MEMBER",
		3:  "TOTAL_EVENT_SPACE_CREATE_MEMBER",
		4:  "TOTAL_EVENT_SPACE_DELETE_MEMBER",
		5:  "TOTAL_EVENT_CREATE_FILE",
		6:  "TOTAL_EVENT_DELETE_FILE",
		7:  "TOTAL_EVENT_CREATE_COMMENT",
		8:  "TOTAL_EVENT_DELETE_COMMENT",
		9:  "TOTAL_EVENT_CREATE_EMOJI",
		10: "TOTAL_EVENT_DELETE_EMOJI",
		11: "TOTAL_EVENT_CREATE_SHARE",
		12: "TOTAL_EVENT_DELETE_SHARE",
		13: "TOTAL_EVENT_SPACE_QUIT_MEMBER",
	}
	TRACK_TOTAL_EVENT_value = map[string]int32{
		"TOTAL_EVENT_INVALID":                 0,
		"TOTAL_EVENT_COMMUNITY_CREATE_MEMBER": 1,
		"TOTAL_EVENT_COMMUNITY_DELETE_MEMBER": 2,
		"TOTAL_EVENT_SPACE_CREATE_MEMBER":     3,
		"TOTAL_EVENT_SPACE_DELETE_MEMBER":     4,
		"TOTAL_EVENT_CREATE_FILE":             5,
		"TOTAL_EVENT_DELETE_FILE":             6,
		"TOTAL_EVENT_CREATE_COMMENT":          7,
		"TOTAL_EVENT_DELETE_COMMENT":          8,
		"TOTAL_EVENT_CREATE_EMOJI":            9,
		"TOTAL_EVENT_DELETE_EMOJI":            10,
		"TOTAL_EVENT_CREATE_SHARE":            11,
		"TOTAL_EVENT_DELETE_SHARE":            12,
		"TOTAL_EVENT_SPACE_QUIT_MEMBER":       13,
	}
)

func (x TRACK_TOTAL_EVENT) Enum() *TRACK_TOTAL_EVENT {
	p := new(TRACK_TOTAL_EVENT)
	*p = x
	return p
}

func (x TRACK_TOTAL_EVENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRACK_TOTAL_EVENT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_track_proto_enumTypes[0].Descriptor()
}

func (TRACK_TOTAL_EVENT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_track_proto_enumTypes[0]
}

func (x TRACK_TOTAL_EVENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRACK_TOTAL_EVENT.Descriptor instead.
func (TRACK_TOTAL_EVENT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0, 0}
}

// TOTAL_KEY:TotalKey 统计Key
type TRACK_TOTAL_KEY int32

const (
	// 无效枚举值
	TRACK_TOTAL_KEY_INVALID TRACK_TOTAL_KEY = 0
	// 成员总数
	TRACK_TOTAL_KEY_ALL_MEMBER_CNT TRACK_TOTAL_KEY = 1
	// 新用户数
	TRACK_TOTAL_KEY_NEW_MEMBER_CNT TRACK_TOTAL_KEY = 2
	// 活跃用户数
	TRACK_TOTAL_KEY_ACTIVE_MEMBER_CNT TRACK_TOTAL_KEY = 3
	// 文件总数
	TRACK_TOTAL_KEY_ALL_FILE_CNT TRACK_TOTAL_KEY = 4
	// emoji总数
	TRACK_TOTAL_KEY_ALL_EMOJI_CNT TRACK_TOTAL_KEY = 5
	// 评论总数
	TRACK_TOTAL_KEY_ALL_COMMENT_CNT TRACK_TOTAL_KEY = 6
	// 分享总数
	TRACK_TOTAL_KEY_ALL_SHARE_CNT TRACK_TOTAL_KEY = 7
	// 创建文件数
	TRACK_TOTAL_KEY_CREATE_FILE_CNT TRACK_TOTAL_KEY = 8
	// 创建表情数
	TRACK_TOTAL_KEY_CREATE_EMOJI_CNT TRACK_TOTAL_KEY = 9
	// 创建评论数
	TRACK_TOTAL_KEY_CREATE_COMMENT_CNT TRACK_TOTAL_KEY = 10
	// 创建分享数
	TRACK_TOTAL_KEY_CREATE_SHARE_CNT TRACK_TOTAL_KEY = 11
)

// Enum value maps for TRACK_TOTAL_KEY.
var (
	TRACK_TOTAL_KEY_name = map[int32]string{
		0:  "TOTAL_KEY_INVALID",
		1:  "TOTAL_KEY_ALL_MEMBER_CNT",
		2:  "TOTAL_KEY_NEW_MEMBER_CNT",
		3:  "TOTAL_KEY_ACTIVE_MEMBER_CNT",
		4:  "TOTAL_KEY_ALL_FILE_CNT",
		5:  "TOTAL_KEY_ALL_EMOJI_CNT",
		6:  "TOTAL_KEY_ALL_COMMENT_CNT",
		7:  "TOTAL_KEY_ALL_SHARE_CNT",
		8:  "TOTAL_KEY_CREATE_FILE_CNT",
		9:  "TOTAL_KEY_CREATE_EMOJI_CNT",
		10: "TOTAL_KEY_CREATE_COMMENT_CNT",
		11: "TOTAL_KEY_CREATE_SHARE_CNT",
	}
	TRACK_TOTAL_KEY_value = map[string]int32{
		"TOTAL_KEY_INVALID":            0,
		"TOTAL_KEY_ALL_MEMBER_CNT":     1,
		"TOTAL_KEY_NEW_MEMBER_CNT":     2,
		"TOTAL_KEY_ACTIVE_MEMBER_CNT":  3,
		"TOTAL_KEY_ALL_FILE_CNT":       4,
		"TOTAL_KEY_ALL_EMOJI_CNT":      5,
		"TOTAL_KEY_ALL_COMMENT_CNT":    6,
		"TOTAL_KEY_ALL_SHARE_CNT":      7,
		"TOTAL_KEY_CREATE_FILE_CNT":    8,
		"TOTAL_KEY_CREATE_EMOJI_CNT":   9,
		"TOTAL_KEY_CREATE_COMMENT_CNT": 10,
		"TOTAL_KEY_CREATE_SHARE_CNT":   11,
	}
)

func (x TRACK_TOTAL_KEY) Enum() *TRACK_TOTAL_KEY {
	p := new(TRACK_TOTAL_KEY)
	*p = x
	return p
}

func (x TRACK_TOTAL_KEY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRACK_TOTAL_KEY) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_track_proto_enumTypes[1].Descriptor()
}

func (TRACK_TOTAL_KEY) Type() protoreflect.EnumType {
	return &file_common_v1_enum_track_proto_enumTypes[1]
}

func (x TRACK_TOTAL_KEY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRACK_TOTAL_KEY.Descriptor instead.
func (TRACK_TOTAL_KEY) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0, 1}
}

// TOTAL_TABLE:TotalTable 统计table
type TRACK_TOTAL_TABLE int32

const (
	// 无效
	TRACK_TOTAL_TABLE_INVALID TRACK_TOTAL_TABLE = 0
	// TOTAL_TABLE_COMMUNITY_ALL
	TRACK_TOTAL_TABLE_COMMUNITY_ALL TRACK_TOTAL_TABLE = 1
	// TOTAL_TABLE_COMMUNITY_DATE
	TRACK_TOTAL_TABLE_COMMUNITY_DATE TRACK_TOTAL_TABLE = 2
	// TOTAL_TABLE_SPACE_ALL
	TRACK_TOTAL_TABLE_SPACE_ALL TRACK_TOTAL_TABLE = 3
	// TOTAL_TABLE_SPACE_DATE
	TRACK_TOTAL_TABLE_SPACE_DATE TRACK_TOTAL_TABLE = 4
)

// Enum value maps for TRACK_TOTAL_TABLE.
var (
	TRACK_TOTAL_TABLE_name = map[int32]string{
		0: "TOTAL_TABLE_INVALID",
		1: "TOTAL_TABLE_COMMUNITY_ALL",
		2: "TOTAL_TABLE_COMMUNITY_DATE",
		3: "TOTAL_TABLE_SPACE_ALL",
		4: "TOTAL_TABLE_SPACE_DATE",
	}
	TRACK_TOTAL_TABLE_value = map[string]int32{
		"TOTAL_TABLE_INVALID":        0,
		"TOTAL_TABLE_COMMUNITY_ALL":  1,
		"TOTAL_TABLE_COMMUNITY_DATE": 2,
		"TOTAL_TABLE_SPACE_ALL":      3,
		"TOTAL_TABLE_SPACE_DATE":     4,
	}
)

func (x TRACK_TOTAL_TABLE) Enum() *TRACK_TOTAL_TABLE {
	p := new(TRACK_TOTAL_TABLE)
	*p = x
	return p
}

func (x TRACK_TOTAL_TABLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRACK_TOTAL_TABLE) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_track_proto_enumTypes[2].Descriptor()
}

func (TRACK_TOTAL_TABLE) Type() protoreflect.EnumType {
	return &file_common_v1_enum_track_proto_enumTypes[2]
}

func (x TRACK_TOTAL_TABLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRACK_TOTAL_TABLE.Descriptor instead.
func (TRACK_TOTAL_TABLE) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0, 2}
}

// 事件类型
type TRACK_EVENT int32

const (
	// 无效
	TRACK_EVENT_INVALID TRACK_EVENT = 0
	// 社区
	TRACK_EVENT_COMMUNITY TRACK_EVENT = 1
	// 社区
	TRACK_EVENT_COMMUNITY_MEMBER TRACK_EVENT = 2
	// 分组
	TRACK_EVENT_SPACE_GROUP TRACK_EVENT = 3
	// 空间
	TRACK_EVENT_SPACE TRACK_EVENT = 4
	// 身份
	TRACK_EVENT_AUTH TRACK_EVENT = 5
	// 手机
	TRACK_EVENT_PHONE TRACK_EVENT = 6
	// 文件
	TRACK_EVENT_FILE TRACK_EVENT = 7
	// 用户
	TRACK_EVENT_USER TRACK_EVENT = 8
)

// Enum value maps for TRACK_EVENT.
var (
	TRACK_EVENT_name = map[int32]string{
		0: "EVENT_INVALID",
		1: "EVENT_COMMUNITY",
		2: "EVENT_COMMUNITY_MEMBER",
		3: "EVENT_SPACE_GROUP",
		4: "EVENT_SPACE",
		5: "EVENT_AUTH",
		6: "EVENT_PHONE",
		7: "EVENT_FILE",
		8: "EVENT_USER",
	}
	TRACK_EVENT_value = map[string]int32{
		"EVENT_INVALID":          0,
		"EVENT_COMMUNITY":        1,
		"EVENT_COMMUNITY_MEMBER": 2,
		"EVENT_SPACE_GROUP":      3,
		"EVENT_SPACE":            4,
		"EVENT_AUTH":             5,
		"EVENT_PHONE":            6,
		"EVENT_FILE":             7,
		"EVENT_USER":             8,
	}
)

func (x TRACK_EVENT) Enum() *TRACK_EVENT {
	p := new(TRACK_EVENT)
	*p = x
	return p
}

func (x TRACK_EVENT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRACK_EVENT) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_track_proto_enumTypes[3].Descriptor()
}

func (TRACK_EVENT) Type() protoreflect.EnumType {
	return &file_common_v1_enum_track_proto_enumTypes[3]
}

func (x TRACK_EVENT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRACK_EVENT.Descriptor instead.
func (TRACK_EVENT) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0, 3}
}

// 动作类型
type TRACK_ACTION int32

const (
	// 无效
	TRACK_ACTION_INVALID TRACK_ACTION = 0
	// 社区
	TRACK_ACTION_CREATE TRACK_ACTION = 1
	// 分组
	TRACK_ACTION_UPDATE TRACK_ACTION = 2
	// 空间
	TRACK_ACTION_DELETE TRACK_ACTION = 3
	// 单个查看
	TRACK_ACTION_VIEW TRACK_ACTION = 4
	// 单个查看
	TRACK_ACTION_LIST_VIEW TRACK_ACTION = 5
	// 身份
	TRACK_ACTION_LOGIN TRACK_ACTION = 6
	// 手机
	TRACK_ACTION_REGISTER TRACK_ACTION = 7
	// 文件
	TRACK_ACTION_LOGOUT TRACK_ACTION = 8
	// 发送Code
	TRACK_ACTION_SEND_CODE TRACK_ACTION = 9
	// 调整名称
	TRACK_ACTION_RENAME TRACK_ACTION = 10
	// 调整头像
	TRACK_ACTION_CHANGE_AVATAR TRACK_ACTION = 11
	// 改变社区
	TRACK_ACTION_CHANGE_CMT TRACK_ACTION = 12
)

// Enum value maps for TRACK_ACTION.
var (
	TRACK_ACTION_name = map[int32]string{
		0:  "ACTION_INVALID",
		1:  "ACTION_CREATE",
		2:  "ACTION_UPDATE",
		3:  "ACTION_DELETE",
		4:  "ACTION_VIEW",
		5:  "ACTION_LIST_VIEW",
		6:  "ACTION_LOGIN",
		7:  "ACTION_REGISTER",
		8:  "ACTION_LOGOUT",
		9:  "ACTION_SEND_CODE",
		10: "ACTION_RENAME",
		11: "ACTION_CHANGE_AVATAR",
		12: "ACTION_CHANGE_CMT",
	}
	TRACK_ACTION_value = map[string]int32{
		"ACTION_INVALID":       0,
		"ACTION_CREATE":        1,
		"ACTION_UPDATE":        2,
		"ACTION_DELETE":        3,
		"ACTION_VIEW":          4,
		"ACTION_LIST_VIEW":     5,
		"ACTION_LOGIN":         6,
		"ACTION_REGISTER":      7,
		"ACTION_LOGOUT":        8,
		"ACTION_SEND_CODE":     9,
		"ACTION_RENAME":        10,
		"ACTION_CHANGE_AVATAR": 11,
		"ACTION_CHANGE_CMT":    12,
	}
)

func (x TRACK_ACTION) Enum() *TRACK_ACTION {
	p := new(TRACK_ACTION)
	*p = x
	return p
}

func (x TRACK_ACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRACK_ACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_track_proto_enumTypes[4].Descriptor()
}

func (TRACK_ACTION) Type() protoreflect.EnumType {
	return &file_common_v1_enum_track_proto_enumTypes[4]
}

func (x TRACK_ACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRACK_ACTION.Descriptor instead.
func (TRACK_ACTION) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0, 4}
}

// F:Field 字段
type TRACK_F int32

const (
	// 无效
	TRACK_F_INVALID TRACK_F = 0
	// 社区
	TRACK_F_LOGIN_TYPE TRACK_F = 1
	// 分组
	TRACK_F_LOGIN_ACCOUNT TRACK_F = 2
	// 社区
	TRACK_F_REGISTER_TYPE TRACK_F = 3
	// 分组
	TRACK_F_REGISTER_ACCOUNT TRACK_F = 4
)

// Enum value maps for TRACK_F.
var (
	TRACK_F_name = map[int32]string{
		0: "F_INVALID",
		1: "F_LOGIN_TYPE",
		2: "F_LOGIN_ACCOUNT",
		3: "F_REGISTER_TYPE",
		4: "F_REGISTER_ACCOUNT",
	}
	TRACK_F_value = map[string]int32{
		"F_INVALID":          0,
		"F_LOGIN_TYPE":       1,
		"F_LOGIN_ACCOUNT":    2,
		"F_REGISTER_TYPE":    3,
		"F_REGISTER_ACCOUNT": 4,
	}
)

func (x TRACK_F) Enum() *TRACK_F {
	p := new(TRACK_F)
	*p = x
	return p
}

func (x TRACK_F) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRACK_F) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_enum_track_proto_enumTypes[5].Descriptor()
}

func (TRACK_F) Type() protoreflect.EnumType {
	return &file_common_v1_enum_track_proto_enumTypes[5]
}

func (x TRACK_F) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRACK_F.Descriptor instead.
func (TRACK_F) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0, 5}
}

// TRACK:大数据打点相关枚举值
type TRACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TRACK) Reset() {
	*x = TRACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_enum_track_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TRACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TRACK) ProtoMessage() {}

func (x *TRACK) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_enum_track_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TRACK.ProtoReflect.Descriptor instead.
func (*TRACK) Descriptor() ([]byte, []int) {
	return file_common_v1_enum_track_proto_rawDescGZIP(), []int{0}
}

var File_common_v1_enum_track_proto protoreflect.FileDescriptor

var file_common_v1_enum_track_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xaa, 0x0c, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x22, 0xd7, 0x03, 0x0a, 0x0b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x10, 0x09, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x51, 0x55,
	0x49, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x22, 0xf5, 0x02, 0x0a, 0x09,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x45, 0x57, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49,
	0x5f, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4e, 0x54,
	0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x4a, 0x49, 0x5f, 0x43, 0x4e, 0x54, 0x10,
	0x09, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4e,
	0x54, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4e,
	0x54, 0x10, 0x0b, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x04, 0x22, 0xb4, 0x01, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x54, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x08, 0x22, 0x90, 0x02, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54,
	0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x56, 0x41,
	0x54, 0x41, 0x52, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4d, 0x54, 0x10, 0x0c, 0x22, 0x66, 0x0a, 0x01,
	0x46, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x04, 0x42, 0x85, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1f, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa,
	0x02, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_enum_track_proto_rawDescOnce sync.Once
	file_common_v1_enum_track_proto_rawDescData = file_common_v1_enum_track_proto_rawDesc
)

func file_common_v1_enum_track_proto_rawDescGZIP() []byte {
	file_common_v1_enum_track_proto_rawDescOnce.Do(func() {
		file_common_v1_enum_track_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_enum_track_proto_rawDescData)
	})
	return file_common_v1_enum_track_proto_rawDescData
}

var file_common_v1_enum_track_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_common_v1_enum_track_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_v1_enum_track_proto_goTypes = []interface{}{
	(TRACK_TOTAL_EVENT)(0), // 0: common.v1.TRACK.TOTAL_EVENT
	(TRACK_TOTAL_KEY)(0),   // 1: common.v1.TRACK.TOTAL_KEY
	(TRACK_TOTAL_TABLE)(0), // 2: common.v1.TRACK.TOTAL_TABLE
	(TRACK_EVENT)(0),       // 3: common.v1.TRACK.EVENT
	(TRACK_ACTION)(0),      // 4: common.v1.TRACK.ACTION
	(TRACK_F)(0),           // 5: common.v1.TRACK.F
	(*TRACK)(nil),          // 6: common.v1.TRACK
}
var file_common_v1_enum_track_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_v1_enum_track_proto_init() }
func file_common_v1_enum_track_proto_init() {
	if File_common_v1_enum_track_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_v1_enum_track_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TRACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_enum_track_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_enum_track_proto_goTypes,
		DependencyIndexes: file_common_v1_enum_track_proto_depIdxs,
		EnumInfos:         file_common_v1_enum_track_proto_enumTypes,
		MessageInfos:      file_common_v1_enum_track_proto_msgTypes,
	}.Build()
	File_common_v1_enum_track_proto = out.File
	file_common_v1_enum_track_proto_rawDesc = nil
	file_common_v1_enum_track_proto_goTypes = nil
	file_common_v1_enum_track_proto_depIdxs = nil
}
