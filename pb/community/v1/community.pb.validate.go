// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: community/v1/community.proto

package communityv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.CMT_ROLE(0)
)

// Validate checks the field values on HomeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HomeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HomeReqMultiError, or nil if none found.
func (m *HomeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HomeReqMultiError(errors)
	}

	return nil
}

// HomeReqMultiError is an error wrapping multiple validation errors returned
// by HomeReq.ValidateAll() if the designated constraints aren't met.
type HomeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeReqMultiError) AllErrors() []error { return m }

// HomeReqValidationError is the validation error returned by HomeReq.Validate
// if the designated constraints aren't met.
type HomeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeReqValidationError) ErrorName() string { return "HomeReqValidationError" }

// Error satisfies the builtin error interface
func (e HomeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeReqValidationError{}

// Validate checks the field values on HomeRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HomeRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HomeResMultiError, or nil if none found.
func (m *HomeRes) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Logo

	// no validation rules for Ctime

	// no validation rules for Access

	// no validation rules for GongxinbuBeian

	// no validation rules for GonganbuBeian

	if len(errors) > 0 {
		return HomeResMultiError(errors)
	}

	return nil
}

// HomeResMultiError is an error wrapping multiple validation errors returned
// by HomeRes.ValidateAll() if the designated constraints aren't met.
type HomeResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeResMultiError) AllErrors() []error { return m }

// HomeResValidationError is the validation error returned by HomeRes.Validate
// if the designated constraints aren't met.
type HomeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeResValidationError) ErrorName() string { return "HomeResValidationError" }

// Error satisfies the builtin error interface
func (e HomeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeResValidationError{}

// Validate checks the field values on GetThemeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetThemeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThemeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetThemeReqMultiError, or
// nil if none found.
func (m *GetThemeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThemeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetThemeReqMultiError(errors)
	}

	return nil
}

// GetThemeReqMultiError is an error wrapping multiple validation errors
// returned by GetThemeReq.ValidateAll() if the designated constraints aren't met.
type GetThemeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThemeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThemeReqMultiError) AllErrors() []error { return m }

// GetThemeReqValidationError is the validation error returned by
// GetThemeReq.Validate if the designated constraints aren't met.
type GetThemeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThemeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThemeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThemeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThemeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThemeReqValidationError) ErrorName() string { return "GetThemeReqValidationError" }

// Error satisfies the builtin error interface
func (e GetThemeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThemeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThemeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThemeReqValidationError{}

// Validate checks the field values on GetThemeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetThemeRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThemeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetThemeResMultiError, or
// nil if none found.
func (m *GetThemeRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThemeRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsCustom

	// no validation rules for ThemeName

	// no validation rules for CustomColor

	// no validation rules for DefaultAppearance

	if len(errors) > 0 {
		return GetThemeResMultiError(errors)
	}

	return nil
}

// GetThemeResMultiError is an error wrapping multiple validation errors
// returned by GetThemeRes.ValidateAll() if the designated constraints aren't met.
type GetThemeResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThemeResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThemeResMultiError) AllErrors() []error { return m }

// GetThemeResValidationError is the validation error returned by
// GetThemeRes.Validate if the designated constraints aren't met.
type GetThemeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThemeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThemeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThemeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThemeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThemeResValidationError) ErrorName() string { return "GetThemeResValidationError" }

// Error satisfies the builtin error interface
func (e GetThemeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThemeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThemeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThemeResValidationError{}

// Validate checks the field values on SetThemeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetThemeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThemeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetThemeReqMultiError, or
// nil if none found.
func (m *SetThemeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThemeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsCustom

	// no validation rules for ThemeName

	// no validation rules for CustomColor

	// no validation rules for DefaultAppearance

	if len(errors) > 0 {
		return SetThemeReqMultiError(errors)
	}

	return nil
}

// SetThemeReqMultiError is an error wrapping multiple validation errors
// returned by SetThemeReq.ValidateAll() if the designated constraints aren't met.
type SetThemeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThemeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThemeReqMultiError) AllErrors() []error { return m }

// SetThemeReqValidationError is the validation error returned by
// SetThemeReq.Validate if the designated constraints aren't met.
type SetThemeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThemeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThemeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThemeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThemeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThemeReqValidationError) ErrorName() string { return "SetThemeReqValidationError" }

// Error satisfies the builtin error interface
func (e SetThemeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThemeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThemeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThemeReqValidationError{}

// Validate checks the field values on SetThemeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetThemeRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetThemeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetThemeResMultiError, or
// nil if none found.
func (m *SetThemeRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SetThemeRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetThemeResMultiError(errors)
	}

	return nil
}

// SetThemeResMultiError is an error wrapping multiple validation errors
// returned by SetThemeRes.ValidateAll() if the designated constraints aren't met.
type SetThemeResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetThemeResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetThemeResMultiError) AllErrors() []error { return m }

// SetThemeResValidationError is the validation error returned by
// SetThemeRes.Validate if the designated constraints aren't met.
type SetThemeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetThemeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetThemeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetThemeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetThemeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetThemeResValidationError) ErrorName() string { return "SetThemeResValidationError" }

// Error satisfies the builtin error interface
func (e SetThemeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetThemeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetThemeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetThemeResValidationError{}

// Validate checks the field values on GetHomeOptionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHomeOptionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeOptionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeOptionReqMultiError, or nil if none found.
func (m *GetHomeOptionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeOptionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return GetHomeOptionReqMultiError(errors)
	}

	return nil
}

// GetHomeOptionReqMultiError is an error wrapping multiple validation errors
// returned by GetHomeOptionReq.ValidateAll() if the designated constraints
// aren't met.
type GetHomeOptionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeOptionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeOptionReqMultiError) AllErrors() []error { return m }

// GetHomeOptionReqValidationError is the validation error returned by
// GetHomeOptionReq.Validate if the designated constraints aren't met.
type GetHomeOptionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeOptionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeOptionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeOptionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeOptionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeOptionReqValidationError) ErrorName() string { return "GetHomeOptionReqValidationError" }

// Error satisfies the builtin error interface
func (e GetHomeOptionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeOptionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeOptionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeOptionReqValidationError{}

// Validate checks the field values on GetHomeOptionRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHomeOptionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeOptionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeOptionResMultiError, or nil if none found.
func (m *GetHomeOptionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeOptionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSetHome

	// no validation rules for IsSetBanner

	// no validation rules for ArticleSortByLogin

	// no validation rules for ArticleSortByNotLogin

	// no validation rules for ArticleHotShowSum

	// no validation rules for ArticleHotShowWithLatest

	// no validation rules for BannerImg

	// no validation rules for BannerTitle

	// no validation rules for BannerLink

	// no validation rules for DefaultPageByNewUser

	// no validation rules for DefaultPageByNotLogin

	// no validation rules for DefaultPageByLogin

	if len(errors) > 0 {
		return GetHomeOptionResMultiError(errors)
	}

	return nil
}

// GetHomeOptionResMultiError is an error wrapping multiple validation errors
// returned by GetHomeOptionRes.ValidateAll() if the designated constraints
// aren't met.
type GetHomeOptionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeOptionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeOptionResMultiError) AllErrors() []error { return m }

// GetHomeOptionResValidationError is the validation error returned by
// GetHomeOptionRes.Validate if the designated constraints aren't met.
type GetHomeOptionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeOptionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeOptionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeOptionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeOptionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeOptionResValidationError) ErrorName() string { return "GetHomeOptionResValidationError" }

// Error satisfies the builtin error interface
func (e GetHomeOptionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeOptionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeOptionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeOptionResValidationError{}

// Validate checks the field values on PutHomeOptionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutHomeOptionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutHomeOptionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutHomeOptionReqMultiError, or nil if none found.
func (m *PutHomeOptionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutHomeOptionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := PutHomeOptionReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ArticleSortByLogin

	// no validation rules for ArticleSortByNotLogin

	if m.IsSetHome != nil {
		// no validation rules for IsSetHome
	}

	if m.IsSetBanner != nil {
		// no validation rules for IsSetBanner
	}

	if m.ArticleHotShowSum != nil {
		// no validation rules for ArticleHotShowSum
	}

	if m.ArticleHotShowWithLatest != nil {
		// no validation rules for ArticleHotShowWithLatest
	}

	if m.BannerImg != nil {
		// no validation rules for BannerImg
	}

	if m.BannerTitle != nil {
		// no validation rules for BannerTitle
	}

	if m.BannerLink != nil {
		// no validation rules for BannerLink
	}

	if m.DefaultPageByNewUser != nil {
		// no validation rules for DefaultPageByNewUser
	}

	if m.DefaultPageByNotLogin != nil {
		// no validation rules for DefaultPageByNotLogin
	}

	if m.DefaultPageByLogin != nil {
		// no validation rules for DefaultPageByLogin
	}

	if len(errors) > 0 {
		return PutHomeOptionReqMultiError(errors)
	}

	return nil
}

// PutHomeOptionReqMultiError is an error wrapping multiple validation errors
// returned by PutHomeOptionReq.ValidateAll() if the designated constraints
// aren't met.
type PutHomeOptionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutHomeOptionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutHomeOptionReqMultiError) AllErrors() []error { return m }

// PutHomeOptionReqValidationError is the validation error returned by
// PutHomeOptionReq.Validate if the designated constraints aren't met.
type PutHomeOptionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutHomeOptionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutHomeOptionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutHomeOptionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutHomeOptionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutHomeOptionReqValidationError) ErrorName() string { return "PutHomeOptionReqValidationError" }

// Error satisfies the builtin error interface
func (e PutHomeOptionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutHomeOptionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutHomeOptionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutHomeOptionReqValidationError{}

// Validate checks the field values on PutHomeOptionRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutHomeOptionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutHomeOptionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutHomeOptionResMultiError, or nil if none found.
func (m *PutHomeOptionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PutHomeOptionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutHomeOptionResMultiError(errors)
	}

	return nil
}

// PutHomeOptionResMultiError is an error wrapping multiple validation errors
// returned by PutHomeOptionRes.ValidateAll() if the designated constraints
// aren't met.
type PutHomeOptionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutHomeOptionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutHomeOptionResMultiError) AllErrors() []error { return m }

// PutHomeOptionResValidationError is the validation error returned by
// PutHomeOptionRes.Validate if the designated constraints aren't met.
type PutHomeOptionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutHomeOptionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutHomeOptionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutHomeOptionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutHomeOptionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutHomeOptionResValidationError) ErrorName() string { return "PutHomeOptionResValidationError" }

// Error satisfies the builtin error interface
func (e PutHomeOptionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutHomeOptionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutHomeOptionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutHomeOptionResValidationError{}

// Validate checks the field values on ApplyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyReqMultiError, or nil
// if none found.
func (m *ApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ApplyReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := ApplyReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Logo

	// no validation rules for Description

	// no validation rules for Visibility

	// no validation rules for AllowInviteMember

	if len(errors) > 0 {
		return ApplyReqMultiError(errors)
	}

	return nil
}

// ApplyReqMultiError is an error wrapping multiple validation errors returned
// by ApplyReq.ValidateAll() if the designated constraints aren't met.
type ApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyReqMultiError) AllErrors() []error { return m }

// ApplyReqValidationError is the validation error returned by
// ApplyReq.Validate if the designated constraints aren't met.
type ApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyReqValidationError) ErrorName() string { return "ApplyReqValidationError" }

// Error satisfies the builtin error interface
func (e ApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyReqValidationError{}

// Validate checks the field values on ApplyRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApplyRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApplyResMultiError, or nil
// if none found.
func (m *ApplyRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommunity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyResValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyResValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommunity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyResValidationError{
				field:  "Community",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyResMultiError(errors)
	}

	return nil
}

// ApplyResMultiError is an error wrapping multiple validation errors returned
// by ApplyRes.ValidateAll() if the designated constraints aren't met.
type ApplyResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyResMultiError) AllErrors() []error { return m }

// ApplyResValidationError is the validation error returned by
// ApplyRes.Validate if the designated constraints aren't met.
type ApplyResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyResValidationError) ErrorName() string { return "ApplyResValidationError" }

// Error satisfies the builtin error interface
func (e ApplyResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyResValidationError{}

// Validate checks the field values on InfoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoReqMultiError, or nil if none found.
func (m *InfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return InfoReqMultiError(errors)
	}

	return nil
}

// InfoReqMultiError is an error wrapping multiple validation errors returned
// by InfoReq.ValidateAll() if the designated constraints aren't met.
type InfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoReqMultiError) AllErrors() []error { return m }

// InfoReqValidationError is the validation error returned by InfoReq.Validate
// if the designated constraints aren't met.
type InfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoReqValidationError) ErrorName() string { return "InfoReqValidationError" }

// Error satisfies the builtin error interface
func (e InfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoReqValidationError{}

// Validate checks the field values on InfoRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoResMultiError, or nil if none found.
func (m *InfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommunity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoResValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoResValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommunity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoResValidationError{
				field:  "Community",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InfoResMultiError(errors)
	}

	return nil
}

// InfoResMultiError is an error wrapping multiple validation errors returned
// by InfoRes.ValidateAll() if the designated constraints aren't met.
type InfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoResMultiError) AllErrors() []error { return m }

// InfoResValidationError is the validation error returned by InfoRes.Validate
// if the designated constraints aren't met.
type InfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoResValidationError) ErrorName() string { return "InfoResValidationError" }

// Error satisfies the builtin error interface
func (e InfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoResValidationError{}

// Validate checks the field values on UpdateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateReqMultiError, or nil
// if none found.
func (m *UpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := UpdateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) < 1 {
			err := UpdateReqValidationError{
				field:  "Name",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Logo != nil {
		// no validation rules for Logo
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.GongxinbuBeian != nil {
		// no validation rules for GongxinbuBeian
	}

	if m.GonganbuBeian != nil {
		// no validation rules for GonganbuBeian
	}

	if len(errors) > 0 {
		return UpdateReqMultiError(errors)
	}

	return nil
}

// UpdateReqMultiError is an error wrapping multiple validation errors returned
// by UpdateReq.ValidateAll() if the designated constraints aren't met.
type UpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReqMultiError) AllErrors() []error { return m }

// UpdateReqValidationError is the validation error returned by
// UpdateReq.Validate if the designated constraints aren't met.
type UpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReqValidationError) ErrorName() string { return "UpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReqValidationError{}

// Validate checks the field values on UpdateRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResMultiError, or nil
// if none found.
func (m *UpdateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommunity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResValidationError{
					field:  "Community",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommunity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResValidationError{
				field:  "Community",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResMultiError(errors)
	}

	return nil
}

// UpdateResMultiError is an error wrapping multiple validation errors returned
// by UpdateRes.ValidateAll() if the designated constraints aren't met.
type UpdateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResMultiError) AllErrors() []error { return m }

// UpdateResValidationError is the validation error returned by
// UpdateRes.Validate if the designated constraints aren't met.
type UpdateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResValidationError) ErrorName() string { return "UpdateResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResValidationError{}

// Validate checks the field values on CommunityBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommunityBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityBaseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommunityBaseInfoMultiError, or nil if none found.
func (m *CommunityBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Logo

	// no validation rules for Domain

	if all {
		switch v := interface{}(m.GetTheme()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommunityBaseInfoValidationError{
					field:  "Theme",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommunityBaseInfoValidationError{
					field:  "Theme",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTheme()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommunityBaseInfoValidationError{
				field:  "Theme",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommunityBaseInfoMultiError(errors)
	}

	return nil
}

// CommunityBaseInfoMultiError is an error wrapping multiple validation errors
// returned by CommunityBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type CommunityBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityBaseInfoMultiError) AllErrors() []error { return m }

// CommunityBaseInfoValidationError is the validation error returned by
// CommunityBaseInfo.Validate if the designated constraints aren't met.
type CommunityBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityBaseInfoValidationError) ErrorName() string {
	return "CommunityBaseInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CommunityBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityBaseInfoValidationError{}

// Validate checks the field values on CmtTheme with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CmtTheme) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmtTheme with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CmtThemeMultiError, or nil
// if none found.
func (m *CmtTheme) ValidateAll() error {
	return m.validate(true)
}

func (m *CmtTheme) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsCustom

	// no validation rules for ThemeName

	// no validation rules for CustomColor

	// no validation rules for DefaultAppearance

	if len(errors) > 0 {
		return CmtThemeMultiError(errors)
	}

	return nil
}

// CmtThemeMultiError is an error wrapping multiple validation errors returned
// by CmtTheme.ValidateAll() if the designated constraints aren't met.
type CmtThemeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmtThemeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmtThemeMultiError) AllErrors() []error { return m }

// CmtThemeValidationError is the validation error returned by
// CmtTheme.Validate if the designated constraints aren't met.
type CmtThemeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmtThemeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmtThemeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmtThemeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmtThemeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmtThemeValidationError) ErrorName() string { return "CmtThemeValidationError" }

// Error satisfies the builtin error interface
func (e CmtThemeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmtTheme.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmtThemeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmtThemeValidationError{}

// Validate checks the field values on CommunityMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommunityMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommunityMemberMultiError, or nil if none found.
func (m *CommunityMember) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for LastActiveTime

	if len(errors) > 0 {
		return CommunityMemberMultiError(errors)
	}

	return nil
}

// CommunityMemberMultiError is an error wrapping multiple validation errors
// returned by CommunityMember.ValidateAll() if the designated constraints
// aren't met.
type CommunityMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityMemberMultiError) AllErrors() []error { return m }

// CommunityMemberValidationError is the validation error returned by
// CommunityMember.Validate if the designated constraints aren't met.
type CommunityMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityMemberValidationError) ErrorName() string { return "CommunityMemberValidationError" }

// Error satisfies the builtin error interface
func (e CommunityMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityMemberValidationError{}
