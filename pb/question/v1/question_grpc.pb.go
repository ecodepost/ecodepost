// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package questionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionClient is the client API for Question service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionClient interface {
	// 创建问答
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	// 修改问答
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error)
	// 获取文档内容的链接，前端读取文件内容渲染，有缓存，走CDN流量鉴权到OSS
	//  rpc Info(InfoReq) returns (InfoRes);
	// 创作者获取文档内容，无缓存，走机房流量
	//  rpc GetContentByCreator(GetContentByCreatorReq) returns (GetContentByCreatorRes);
	// 获取文档内容的链接，前端读取文件内容渲染，有缓存，走CDN流量鉴权到OSS
	//  rpc GetContent(GetContentReq) returns (GetContentRes);
	// 删除文章
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error)
	// List Question
	ListQuestion(ctx context.Context, in *ListQuestionReq, opts ...grpc.CallOption) (*ListQuestionRes, error)
	// List Answer
	ListAnswer(ctx context.Context, in *ListAnswerReq, opts ...grpc.CallOption) (*ListAnswerRes, error)
	// 获取文档内容的链接，前端读取文件内容渲染，有缓存，走CDN流量鉴权到OSS
	MyInfo(ctx context.Context, in *MyInfoReq, opts ...grpc.CallOption) (*MyInfoRes, error)
	// 用户公开创建的文章列表
	PublicListByUserCreated(ctx context.Context, in *PublicListByUserCreatedReq, opts ...grpc.CallOption) (*PublicListByUserCreatedRes, error)
}

type questionClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionClient(cc grpc.ClientConnInterface) QuestionClient {
	return &questionClient{cc}
}

func (c *questionClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error) {
	out := new(UpdateRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error) {
	out := new(DeleteRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) ListQuestion(ctx context.Context, in *ListQuestionReq, opts ...grpc.CallOption) (*ListQuestionRes, error) {
	out := new(ListQuestionRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/ListQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) ListAnswer(ctx context.Context, in *ListAnswerReq, opts ...grpc.CallOption) (*ListAnswerRes, error) {
	out := new(ListAnswerRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/ListAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) MyInfo(ctx context.Context, in *MyInfoReq, opts ...grpc.CallOption) (*MyInfoRes, error) {
	out := new(MyInfoRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/MyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) PublicListByUserCreated(ctx context.Context, in *PublicListByUserCreatedReq, opts ...grpc.CallOption) (*PublicListByUserCreatedRes, error) {
	out := new(PublicListByUserCreatedRes)
	err := c.cc.Invoke(ctx, "/question.v1.Question/PublicListByUserCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServer is the server API for Question service.
// All implementations should embed UnimplementedQuestionServer
// for forward compatibility
type QuestionServer interface {
	// 创建问答
	Create(context.Context, *CreateReq) (*CreateRes, error)
	// 修改问答
	Update(context.Context, *UpdateReq) (*UpdateRes, error)
	// 获取文档内容的链接，前端读取文件内容渲染，有缓存，走CDN流量鉴权到OSS
	//  rpc Info(InfoReq) returns (InfoRes);
	// 创作者获取文档内容，无缓存，走机房流量
	//  rpc GetContentByCreator(GetContentByCreatorReq) returns (GetContentByCreatorRes);
	// 获取文档内容的链接，前端读取文件内容渲染，有缓存，走CDN流量鉴权到OSS
	//  rpc GetContent(GetContentReq) returns (GetContentRes);
	// 删除文章
	Delete(context.Context, *DeleteReq) (*DeleteRes, error)
	// List Question
	ListQuestion(context.Context, *ListQuestionReq) (*ListQuestionRes, error)
	// List Answer
	ListAnswer(context.Context, *ListAnswerReq) (*ListAnswerRes, error)
	// 获取文档内容的链接，前端读取文件内容渲染，有缓存，走CDN流量鉴权到OSS
	MyInfo(context.Context, *MyInfoReq) (*MyInfoRes, error)
	// 用户公开创建的文章列表
	PublicListByUserCreated(context.Context, *PublicListByUserCreatedReq) (*PublicListByUserCreatedRes, error)
}

// UnimplementedQuestionServer should be embedded to have forward compatible implementations.
type UnimplementedQuestionServer struct {
}

func (UnimplementedQuestionServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedQuestionServer) Update(context.Context, *UpdateReq) (*UpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedQuestionServer) Delete(context.Context, *DeleteReq) (*DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQuestionServer) ListQuestion(context.Context, *ListQuestionReq) (*ListQuestionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestion not implemented")
}
func (UnimplementedQuestionServer) ListAnswer(context.Context, *ListAnswerReq) (*ListAnswerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnswer not implemented")
}
func (UnimplementedQuestionServer) MyInfo(context.Context, *MyInfoReq) (*MyInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyInfo not implemented")
}
func (UnimplementedQuestionServer) PublicListByUserCreated(context.Context, *PublicListByUserCreatedReq) (*PublicListByUserCreatedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListByUserCreated not implemented")
}

// UnsafeQuestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServer will
// result in compilation errors.
type UnsafeQuestionServer interface {
	mustEmbedUnimplementedQuestionServer()
}

func RegisterQuestionServer(s grpc.ServiceRegistrar, srv QuestionServer) {
	s.RegisterService(&Question_ServiceDesc, srv)
}

func _Question_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_ListQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).ListQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/ListQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).ListQuestion(ctx, req.(*ListQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_ListAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).ListAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/ListAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).ListAnswer(ctx, req.(*ListAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_MyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).MyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/MyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).MyInfo(ctx, req.(*MyInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_PublicListByUserCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListByUserCreatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).PublicListByUserCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question.v1.Question/PublicListByUserCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).PublicListByUserCreated(ctx, req.(*PublicListByUserCreatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Question_ServiceDesc is the grpc.ServiceDesc for Question service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Question_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question.v1.Question",
	HandlerType: (*QuestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Question_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Question_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Question_Delete_Handler,
		},
		{
			MethodName: "ListQuestion",
			Handler:    _Question_ListQuestion_Handler,
		},
		{
			MethodName: "ListAnswer",
			Handler:    _Question_ListAnswer_Handler,
		},
		{
			MethodName: "MyInfo",
			Handler:    _Question_MyInfo_Handler,
		},
		{
			MethodName: "PublicListByUserCreated",
			Handler:    _Question_PublicListByUserCreated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question/v1/question.proto",
}
