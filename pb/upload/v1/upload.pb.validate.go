// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: upload/v1/upload.proto

package uploadv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.CMN_UP_TYPE(0)
)

// Validate checks the field values on GetTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTokenReqMultiError, or
// nil if none found.
func (m *GetTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := GetTokenReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClientIp

	// no validation rules for Refer

	// no validation rules for SpaceGuid

	if len(errors) > 0 {
		return GetTokenReqMultiError(errors)
	}

	return nil
}

// GetTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetTokenReq.ValidateAll() if the designated constraints aren't met.
type GetTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenReqMultiError) AllErrors() []error { return m }

// GetTokenReqValidationError is the validation error returned by
// GetTokenReq.Validate if the designated constraints aren't met.
type GetTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenReqValidationError) ErrorName() string { return "GetTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenReqValidationError{}

// Validate checks the field values on GetTokenRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTokenResMultiError, or
// nil if none found.
func (m *GetTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTokenResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTokenResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTokenResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTokenResMultiError(errors)
	}

	return nil
}

// GetTokenResMultiError is an error wrapping multiple validation errors
// returned by GetTokenRes.ValidateAll() if the designated constraints aren't met.
type GetTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenResMultiError) AllErrors() []error { return m }

// GetTokenResValidationError is the validation error returned by
// GetTokenRes.Validate if the designated constraints aren't met.
type GetTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenResValidationError) ErrorName() string { return "GetTokenResValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenResValidationError{}

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for AccessKeyId

	// no validation rules for AccessKeySecret

	// no validation rules for StsToken

	// no validation rules for Bucket

	// no validation rules for Expiration

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on GetPathReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPathReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPathReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPathReqMultiError, or
// nil if none found.
func (m *GetPathReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPathReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadType

	// no validation rules for FileName

	if m.GetUid() <= 0 {
		err := GetPathReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClientIp

	// no validation rules for Refer

	// no validation rules for SpaceGuid

	if len(errors) > 0 {
		return GetPathReqMultiError(errors)
	}

	return nil
}

// GetPathReqMultiError is an error wrapping multiple validation errors
// returned by GetPathReq.ValidateAll() if the designated constraints aren't met.
type GetPathReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPathReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPathReqMultiError) AllErrors() []error { return m }

// GetPathReqValidationError is the validation error returned by
// GetPathReq.Validate if the designated constraints aren't met.
type GetPathReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPathReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPathReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPathReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPathReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPathReqValidationError) ErrorName() string { return "GetPathReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPathReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPathReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPathReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPathReqValidationError{}

// Validate checks the field values on GetPathRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPathRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPathRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPathResMultiError, or
// nil if none found.
func (m *GetPathRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPathRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bucket

	// no validation rules for Path

	// no validation rules for CdnName

	if len(errors) > 0 {
		return GetPathResMultiError(errors)
	}

	return nil
}

// GetPathResMultiError is an error wrapping multiple validation errors
// returned by GetPathRes.ValidateAll() if the designated constraints aren't met.
type GetPathResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPathResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPathResMultiError) AllErrors() []error { return m }

// GetPathResValidationError is the validation error returned by
// GetPathRes.Validate if the designated constraints aren't met.
type GetPathResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPathResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPathResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPathResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPathResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPathResValidationError) ErrorName() string { return "GetPathResValidationError" }

// Error satisfies the builtin error interface
func (e GetPathResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPathRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPathResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPathResValidationError{}

// Validate checks the field values on UploadLocalFileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadLocalFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadLocalFileReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadLocalFileReqMultiError, or nil if none found.
func (m *UploadLocalFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadLocalFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DstPath

	// no validation rules for File

	if len(errors) > 0 {
		return UploadLocalFileReqMultiError(errors)
	}

	return nil
}

// UploadLocalFileReqMultiError is an error wrapping multiple validation errors
// returned by UploadLocalFileReq.ValidateAll() if the designated constraints
// aren't met.
type UploadLocalFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadLocalFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadLocalFileReqMultiError) AllErrors() []error { return m }

// UploadLocalFileReqValidationError is the validation error returned by
// UploadLocalFileReq.Validate if the designated constraints aren't met.
type UploadLocalFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadLocalFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadLocalFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadLocalFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadLocalFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadLocalFileReqValidationError) ErrorName() string {
	return "UploadLocalFileReqValidationError"
}

// Error satisfies the builtin error interface
func (e UploadLocalFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadLocalFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadLocalFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadLocalFileReqValidationError{}

// Validate checks the field values on UploadLocalFileRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadLocalFileRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadLocalFileRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadLocalFileResMultiError, or nil if none found.
func (m *UploadLocalFileRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadLocalFileRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadLocalFileResMultiError(errors)
	}

	return nil
}

// UploadLocalFileResMultiError is an error wrapping multiple validation errors
// returned by UploadLocalFileRes.ValidateAll() if the designated constraints
// aren't met.
type UploadLocalFileResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadLocalFileResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadLocalFileResMultiError) AllErrors() []error { return m }

// UploadLocalFileResValidationError is the validation error returned by
// UploadLocalFileRes.Validate if the designated constraints aren't met.
type UploadLocalFileResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadLocalFileResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadLocalFileResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadLocalFileResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadLocalFileResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadLocalFileResValidationError) ErrorName() string {
	return "UploadLocalFileResValidationError"
}

// Error satisfies the builtin error interface
func (e UploadLocalFileResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadLocalFileRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadLocalFileResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadLocalFileResValidationError{}

// Validate checks the field values on ShowImageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowImageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowImageReqMultiError, or
// nil if none found.
func (m *ShowImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	if len(errors) > 0 {
		return ShowImageReqMultiError(errors)
	}

	return nil
}

// ShowImageReqMultiError is an error wrapping multiple validation errors
// returned by ShowImageReq.ValidateAll() if the designated constraints aren't met.
type ShowImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowImageReqMultiError) AllErrors() []error { return m }

// ShowImageReqValidationError is the validation error returned by
// ShowImageReq.Validate if the designated constraints aren't met.
type ShowImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowImageReqValidationError) ErrorName() string { return "ShowImageReqValidationError" }

// Error satisfies the builtin error interface
func (e ShowImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowImageReqValidationError{}

// Validate checks the field values on ShowImageRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowImageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowImageRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowImageResMultiError, or
// nil if none found.
func (m *ShowImageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowImageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	if len(errors) > 0 {
		return ShowImageResMultiError(errors)
	}

	return nil
}

// ShowImageResMultiError is an error wrapping multiple validation errors
// returned by ShowImageRes.ValidateAll() if the designated constraints aren't met.
type ShowImageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowImageResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowImageResMultiError) AllErrors() []error { return m }

// ShowImageResValidationError is the validation error returned by
// ShowImageRes.Validate if the designated constraints aren't met.
type ShowImageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowImageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowImageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowImageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowImageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowImageResValidationError) ErrorName() string { return "ShowImageResValidationError" }

// Error satisfies the builtin error interface
func (e ShowImageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowImageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowImageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowImageResValidationError{}
