// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comment/v1/comment.proto

package commentv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.FILE_ACT(0)
)

// Validate checks the field values on CreateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReqMultiError, or nil
// if none found.
func (m *CreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CreateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := CreateReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	// no validation rules for ActionGuid

	// no validation rules for ActionType

	// no validation rules for CommentGuid

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Ctime

	// no validation rules for Utime

	// no validation rules for Ip

	if len(errors) > 0 {
		return CreateReqMultiError(errors)
	}

	return nil
}

// CreateReqMultiError is an error wrapping multiple validation errors returned
// by CreateReq.ValidateAll() if the designated constraints aren't met.
type CreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReqMultiError) AllErrors() []error { return m }

// CreateReqValidationError is the validation error returned by
// CreateReq.Validate if the designated constraints aren't met.
type CreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReqValidationError) ErrorName() string { return "CreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReqValidationError{}

// Validate checks the field values on CreateRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResMultiError, or nil
// if none found.
func (m *CreateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentGuid

	if len(errors) > 0 {
		return CreateResMultiError(errors)
	}

	return nil
}

// CreateResMultiError is an error wrapping multiple validation errors returned
// by CreateRes.ValidateAll() if the designated constraints aren't met.
type CreateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResMultiError) AllErrors() []error { return m }

// CreateResValidationError is the validation error returned by
// CreateRes.Validate if the designated constraints aren't met.
type CreateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResValidationError) ErrorName() string { return "CreateResValidationError" }

// Error satisfies the builtin error interface
func (e CreateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResValidationError{}

// Validate checks the field values on ListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ListReqMultiError, or nil if none found.
func (m *ListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := ListReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListReqMultiError(errors)
	}

	return nil
}

// ListReqMultiError is an error wrapping multiple validation errors returned
// by ListReq.ValidateAll() if the designated constraints aren't met.
type ListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReqMultiError) AllErrors() []error { return m }

// ListReqValidationError is the validation error returned by ListReq.Validate
// if the designated constraints aren't met.
type ListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReqValidationError) ErrorName() string { return "ListReqValidationError" }

// Error satisfies the builtin error interface
func (e ListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReqValidationError{}

// Validate checks the field values on ListRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ListResMultiError, or nil if none found.
func (m *ListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CntComment

	if len(errors) > 0 {
		return ListResMultiError(errors)
	}

	return nil
}

// ListResMultiError is an error wrapping multiple validation errors returned
// by ListRes.ValidateAll() if the designated constraints aren't met.
type ListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResMultiError) AllErrors() []error { return m }

// ListResValidationError is the validation error returned by ListRes.Validate
// if the designated constraints aren't met.
type ListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResValidationError) ErrorName() string { return "ListResValidationError" }

// Error satisfies the builtin error interface
func (e ListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResValidationError{}

// Validate checks the field values on ChildListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChildListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChildListReqMultiError, or
// nil if none found.
func (m *ChildListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentGuid

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := ChildListReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChildListReqMultiError(errors)
	}

	return nil
}

// ChildListReqMultiError is an error wrapping multiple validation errors
// returned by ChildListReq.ValidateAll() if the designated constraints aren't met.
type ChildListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildListReqMultiError) AllErrors() []error { return m }

// ChildListReqValidationError is the validation error returned by
// ChildListReq.Validate if the designated constraints aren't met.
type ChildListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildListReqValidationError) ErrorName() string { return "ChildListReqValidationError" }

// Error satisfies the builtin error interface
func (e ChildListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildListReqValidationError{}

// Validate checks the field values on ChildListRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChildListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChildListRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChildListResMultiError, or
// nil if none found.
func (m *ChildListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChildListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChildListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChildListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChildListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChildListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChildListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChildListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CntComment

	if len(errors) > 0 {
		return ChildListResMultiError(errors)
	}

	return nil
}

// ChildListResMultiError is an error wrapping multiple validation errors
// returned by ChildListRes.ValidateAll() if the designated constraints aren't met.
type ChildListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChildListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChildListResMultiError) AllErrors() []error { return m }

// ChildListResValidationError is the validation error returned by
// ChildListRes.Validate if the designated constraints aren't met.
type ChildListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChildListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChildListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChildListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChildListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChildListResValidationError) ErrorName() string { return "ChildListResValidationError" }

// Error satisfies the builtin error interface
func (e ChildListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChildListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChildListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChildListResValidationError{}

// Validate checks the field values on DeleteReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteReqMultiError, or nil
// if none found.
func (m *DeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := DeleteReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommentGuid()) < 1 {
		err := DeleteReqValidationError{
			field:  "CommentGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBizGuid()) < 1 {
		err := DeleteReqValidationError{
			field:  "BizGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BizType

	// no validation rules for DeleteType

	if len(errors) > 0 {
		return DeleteReqMultiError(errors)
	}

	return nil
}

// DeleteReqMultiError is an error wrapping multiple validation errors returned
// by DeleteReq.ValidateAll() if the designated constraints aren't met.
type DeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReqMultiError) AllErrors() []error { return m }

// DeleteReqValidationError is the validation error returned by
// DeleteReq.Validate if the designated constraints aren't met.
type DeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReqValidationError) ErrorName() string { return "DeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReqValidationError{}

// Validate checks the field values on DeleteRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResMultiError, or nil
// if none found.
func (m *DeleteRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResMultiError(errors)
	}

	return nil
}

// DeleteResMultiError is an error wrapping multiple validation errors returned
// by DeleteRes.ValidateAll() if the designated constraints aren't met.
type DeleteResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResMultiError) AllErrors() []error { return m }

// DeleteResValidationError is the validation error returned by
// DeleteRes.Validate if the designated constraints aren't met.
type DeleteResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResValidationError) ErrorName() string { return "DeleteResValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResValidationError{}

// Validate checks the field values on ListByUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListByUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListByUserReqMultiError, or
// nil if none found.
func (m *ListByUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizGuid

	// no validation rules for BizType

	if m.GetUid() <= 0 {
		err := ListByUserReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListByUserReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListByUserReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListByUserReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListByUserReqMultiError(errors)
	}

	return nil
}

// ListByUserReqMultiError is an error wrapping multiple validation errors
// returned by ListByUserReq.ValidateAll() if the designated constraints
// aren't met.
type ListByUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByUserReqMultiError) AllErrors() []error { return m }

// ListByUserReqValidationError is the validation error returned by
// ListByUserReq.Validate if the designated constraints aren't met.
type ListByUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByUserReqValidationError) ErrorName() string { return "ListByUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListByUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByUserReqValidationError{}

// Validate checks the field values on ListByUserRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListByUserRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByUserRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListByUserResMultiError, or
// nil if none found.
func (m *ListByUserRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByUserRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListByUserResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListByUserResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListByUserResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListByUserResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListByUserResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListByUserResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CntComment

	if len(errors) > 0 {
		return ListByUserResMultiError(errors)
	}

	return nil
}

// ListByUserResMultiError is an error wrapping multiple validation errors
// returned by ListByUserRes.ValidateAll() if the designated constraints
// aren't met.
type ListByUserResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByUserResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByUserResMultiError) AllErrors() []error { return m }

// ListByUserResValidationError is the validation error returned by
// ListByUserRes.Validate if the designated constraints aren't met.
type ListByUserResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByUserResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByUserResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByUserResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByUserResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByUserResValidationError) ErrorName() string { return "ListByUserResValidationError" }

// Error satisfies the builtin error interface
func (e ListByUserResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByUserRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByUserResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByUserResValidationError{}

// Validate checks the field values on CommentDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentDetailMultiError, or
// nil if none found.
func (m *CommentDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentGuid

	// no validation rules for BizGuid

	// no validation rules for BizType

	// no validation rules for Content

	// no validation rules for ReplyToGuid

	// no validation rules for ReplyToRootGuid

	// no validation rules for Uid

	// no validation rules for UserNickname

	// no validation rules for UserAvatar

	// no validation rules for ReplyToUid

	// no validation rules for ReplyNickname

	// no validation rules for ReplyAvatar

	// no validation rules for CntStar

	// no validation rules for StarStatus

	// no validation rules for Ctime

	// no validation rules for IsReply

	// no validation rules for ActionGuid

	// no validation rules for ActionType

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentDetailValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentDetailValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentDetailValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CntChildComment

	// no validation rules for HasMoreChildComment

	// no validation rules for IpLocation

	if len(errors) > 0 {
		return CommentDetailMultiError(errors)
	}

	return nil
}

// CommentDetailMultiError is an error wrapping multiple validation errors
// returned by CommentDetail.ValidateAll() if the designated constraints
// aren't met.
type CommentDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentDetailMultiError) AllErrors() []error { return m }

// CommentDetailValidationError is the validation error returned by
// CommentDetail.Validate if the designated constraints aren't met.
type CommentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentDetailValidationError) ErrorName() string { return "CommentDetailValidationError" }

// Error satisfies the builtin error interface
func (e CommentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentDetailValidationError{}
