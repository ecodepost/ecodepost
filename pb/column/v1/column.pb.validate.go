// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: column/v1/column.proto

package columnv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.FILE_FORMAT(0)
)

// Validate checks the field values on CreateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReqMultiError, or nil
// if none found.
func (m *CreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CreateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := CreateReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := CreateReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentGuid

	// no validation rules for Format

	// no validation rules for Content

	// no validation rules for HeadImage

	// no validation rules for Ctime

	// no validation rules for Utime

	// no validation rules for CntView

	// no validation rules for Ip

	if len(errors) > 0 {
		return CreateReqMultiError(errors)
	}

	return nil
}

// CreateReqMultiError is an error wrapping multiple validation errors returned
// by CreateReq.ValidateAll() if the designated constraints aren't met.
type CreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReqMultiError) AllErrors() []error { return m }

// CreateReqValidationError is the validation error returned by
// CreateReq.Validate if the designated constraints aren't met.
type CreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReqValidationError) ErrorName() string { return "CreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReqValidationError{}

// Validate checks the field values on CreateRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResMultiError, or nil
// if none found.
func (m *CreateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResMultiError(errors)
	}

	return nil
}

// CreateResMultiError is an error wrapping multiple validation errors returned
// by CreateRes.ValidateAll() if the designated constraints aren't met.
type CreateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResMultiError) AllErrors() []error { return m }

// CreateResValidationError is the validation error returned by
// CreateRes.Validate if the designated constraints aren't met.
type CreateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResValidationError) ErrorName() string { return "CreateResValidationError" }

// Error satisfies the builtin error interface
func (e CreateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResValidationError{}

// Validate checks the field values on UpdateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateReqMultiError, or nil
// if none found.
func (m *UpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := UpdateReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFileGuid()) < 1 {
		err := UpdateReqValidationError{
			field:  "FileGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := UpdateReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FileFormat

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.HeadImage != nil {
		// no validation rules for HeadImage
	}

	if len(errors) > 0 {
		return UpdateReqMultiError(errors)
	}

	return nil
}

// UpdateReqMultiError is an error wrapping multiple validation errors returned
// by UpdateReq.ValidateAll() if the designated constraints aren't met.
type UpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReqMultiError) AllErrors() []error { return m }

// UpdateReqValidationError is the validation error returned by
// UpdateReq.Validate if the designated constraints aren't met.
type UpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReqValidationError) ErrorName() string { return "UpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReqValidationError{}

// Validate checks the field values on UpdateRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateResMultiError, or nil
// if none found.
func (m *UpdateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateResMultiError(errors)
	}

	return nil
}

// UpdateResMultiError is an error wrapping multiple validation errors returned
// by UpdateRes.ValidateAll() if the designated constraints aren't met.
type UpdateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResMultiError) AllErrors() []error { return m }

// UpdateResValidationError is the validation error returned by
// UpdateRes.Validate if the designated constraints aren't met.
type UpdateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResValidationError) ErrorName() string { return "UpdateResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResValidationError{}

// Validate checks the field values on DeleteReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteReqMultiError, or nil
// if none found.
func (m *DeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := DeleteReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := DeleteReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteReqMultiError(errors)
	}

	return nil
}

// DeleteReqMultiError is an error wrapping multiple validation errors returned
// by DeleteReq.ValidateAll() if the designated constraints aren't met.
type DeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReqMultiError) AllErrors() []error { return m }

// DeleteReqValidationError is the validation error returned by
// DeleteReq.Validate if the designated constraints aren't met.
type DeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReqValidationError) ErrorName() string { return "DeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReqValidationError{}

// Validate checks the field values on DeleteRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResMultiError, or nil
// if none found.
func (m *DeleteRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResMultiError(errors)
	}

	return nil
}

// DeleteResMultiError is an error wrapping multiple validation errors returned
// by DeleteRes.ValidateAll() if the designated constraints aren't met.
type DeleteResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResMultiError) AllErrors() []error { return m }

// DeleteResValidationError is the validation error returned by
// DeleteRes.Validate if the designated constraints aren't met.
type DeleteResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResValidationError) ErrorName() string { return "DeleteResValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResValidationError{}

// Validate checks the field values on ChangeSortReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeSortReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSortReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangeSortReqMultiError, or
// nil if none found.
func (m *ChangeSortReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSortReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ChangeSortReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFileGuid()) < 1 {
		err := ChangeSortReqValidationError{
			field:  "FileGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.TargetFileGuid != nil {
		// no validation rules for TargetFileGuid
	}

	if m.DropPosition != nil {
		// no validation rules for DropPosition
	}

	if m.ParentFileGuid != nil {
		// no validation rules for ParentFileGuid
	}

	if len(errors) > 0 {
		return ChangeSortReqMultiError(errors)
	}

	return nil
}

// ChangeSortReqMultiError is an error wrapping multiple validation errors
// returned by ChangeSortReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeSortReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSortReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSortReqMultiError) AllErrors() []error { return m }

// ChangeSortReqValidationError is the validation error returned by
// ChangeSortReq.Validate if the designated constraints aren't met.
type ChangeSortReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSortReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSortReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSortReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSortReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSortReqValidationError) ErrorName() string { return "ChangeSortReqValidationError" }

// Error satisfies the builtin error interface
func (e ChangeSortReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSortReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSortReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSortReqValidationError{}

// Validate checks the field values on ChangeSortRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChangeSortRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSortRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangeSortResMultiError, or
// nil if none found.
func (m *ChangeSortRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSortRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeSortResMultiError(errors)
	}

	return nil
}

// ChangeSortResMultiError is an error wrapping multiple validation errors
// returned by ChangeSortRes.ValidateAll() if the designated constraints
// aren't met.
type ChangeSortResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSortResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSortResMultiError) AllErrors() []error { return m }

// ChangeSortResValidationError is the validation error returned by
// ChangeSortRes.Validate if the designated constraints aren't met.
type ChangeSortResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSortResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSortResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSortResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSortResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSortResValidationError) ErrorName() string { return "ChangeSortResValidationError" }

// Error satisfies the builtin error interface
func (e ChangeSortResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSortRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSortResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSortResValidationError{}

// Validate checks the field values on PermissionRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermissionRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionResMultiError, or
// nil if none found.
func (m *PermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for IsAllowWrite

	// no validation rules for IsAllowDelete

	// no validation rules for IsAllowSetComment

	// no validation rules for IsAllowCreateComment

	if len(errors) > 0 {
		return PermissionResMultiError(errors)
	}

	return nil
}

// PermissionResMultiError is an error wrapping multiple validation errors
// returned by PermissionRes.ValidateAll() if the designated constraints
// aren't met.
type PermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionResMultiError) AllErrors() []error { return m }

// PermissionResValidationError is the validation error returned by
// PermissionRes.Validate if the designated constraints aren't met.
type PermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionResValidationError) ErrorName() string { return "PermissionResValidationError" }

// Error satisfies the builtin error interface
func (e PermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionResValidationError{}

// Validate checks the field values on ListPermissionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionReqMultiError, or nil if none found.
func (m *ListPermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListPermissionReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := ListPermissionReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPermissionReqMultiError(errors)
	}

	return nil
}

// ListPermissionReqMultiError is an error wrapping multiple validation errors
// returned by ListPermissionReq.ValidateAll() if the designated constraints
// aren't met.
type ListPermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionReqMultiError) AllErrors() []error { return m }

// ListPermissionReqValidationError is the validation error returned by
// ListPermissionReq.Validate if the designated constraints aren't met.
type ListPermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionReqValidationError) ErrorName() string {
	return "ListPermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionReqValidationError{}

// Validate checks the field values on ListPermissionRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionResMultiError, or nil if none found.
func (m *ListPermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionResMultiError(errors)
	}

	return nil
}

// ListPermissionResMultiError is an error wrapping multiple validation errors
// returned by ListPermissionRes.ValidateAll() if the designated constraints
// aren't met.
type ListPermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionResMultiError) AllErrors() []error { return m }

// ListPermissionResValidationError is the validation error returned by
// ListPermissionRes.Validate if the designated constraints aren't met.
type ListPermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionResValidationError) ErrorName() string {
	return "ListPermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionResValidationError{}

// Validate checks the field values on ListFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFileReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFileReqMultiError, or
// nil if none found.
func (m *ListFileReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := ListFileReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFileReqMultiError(errors)
	}

	return nil
}

// ListFileReqMultiError is an error wrapping multiple validation errors
// returned by ListFileReq.ValidateAll() if the designated constraints aren't met.
type ListFileReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileReqMultiError) AllErrors() []error { return m }

// ListFileReqValidationError is the validation error returned by
// ListFileReq.Validate if the designated constraints aren't met.
type ListFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileReqValidationError) ErrorName() string { return "ListFileReqValidationError" }

// Error satisfies the builtin error interface
func (e ListFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileReqValidationError{}

// Validate checks the field values on ListFileRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFileRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFileRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFileResMultiError, or
// nil if none found.
func (m *ListFileRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFileRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFileResValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFileResValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFileResValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFileResMultiError(errors)
	}

	return nil
}

// ListFileResMultiError is an error wrapping multiple validation errors
// returned by ListFileRes.ValidateAll() if the designated constraints aren't met.
type ListFileResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFileResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFileResMultiError) AllErrors() []error { return m }

// ListFileResValidationError is the validation error returned by
// ListFileRes.Validate if the designated constraints aren't met.
type ListFileResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileResValidationError) ErrorName() string { return "ListFileResValidationError" }

// Error satisfies the builtin error interface
func (e ListFileResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileResValidationError{}

// Validate checks the field values on UpdateSpaceInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpaceInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpaceInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpaceInfoReqMultiError, or nil if none found.
func (m *UpdateSpaceInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpaceInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := UpdateSpaceInfoReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorUid

	if len(errors) > 0 {
		return UpdateSpaceInfoReqMultiError(errors)
	}

	return nil
}

// UpdateSpaceInfoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateSpaceInfoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateSpaceInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpaceInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpaceInfoReqMultiError) AllErrors() []error { return m }

// UpdateSpaceInfoReqValidationError is the validation error returned by
// UpdateSpaceInfoReq.Validate if the designated constraints aren't met.
type UpdateSpaceInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpaceInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpaceInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpaceInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpaceInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpaceInfoReqValidationError) ErrorName() string {
	return "UpdateSpaceInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpaceInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpaceInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpaceInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpaceInfoReqValidationError{}

// Validate checks the field values on UpdateSpaceInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpaceInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpaceInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpaceInfoResMultiError, or nil if none found.
func (m *UpdateSpaceInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpaceInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSpaceInfoResMultiError(errors)
	}

	return nil
}

// UpdateSpaceInfoResMultiError is an error wrapping multiple validation errors
// returned by UpdateSpaceInfoRes.ValidateAll() if the designated constraints
// aren't met.
type UpdateSpaceInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpaceInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpaceInfoResMultiError) AllErrors() []error { return m }

// UpdateSpaceInfoResValidationError is the validation error returned by
// UpdateSpaceInfoRes.Validate if the designated constraints aren't met.
type UpdateSpaceInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpaceInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpaceInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpaceInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpaceInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpaceInfoResValidationError) ErrorName() string {
	return "UpdateSpaceInfoResValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpaceInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpaceInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpaceInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpaceInfoResValidationError{}

// Validate checks the field values on CreateSpaceInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceInfoReqMultiError, or nil if none found.
func (m *CreateSpaceInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := CreateSpaceInfoReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorUid

	if len(errors) > 0 {
		return CreateSpaceInfoReqMultiError(errors)
	}

	return nil
}

// CreateSpaceInfoReqMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceInfoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceInfoReqMultiError) AllErrors() []error { return m }

// CreateSpaceInfoReqValidationError is the validation error returned by
// CreateSpaceInfoReq.Validate if the designated constraints aren't met.
type CreateSpaceInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceInfoReqValidationError) ErrorName() string {
	return "CreateSpaceInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceInfoReqValidationError{}

// Validate checks the field values on CreateSpaceInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceInfoResMultiError, or nil if none found.
func (m *CreateSpaceInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSpaceInfoResMultiError(errors)
	}

	return nil
}

// CreateSpaceInfoResMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceInfoRes.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceInfoResMultiError) AllErrors() []error { return m }

// CreateSpaceInfoResValidationError is the validation error returned by
// CreateSpaceInfoRes.Validate if the designated constraints aren't met.
type CreateSpaceInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceInfoResValidationError) ErrorName() string {
	return "CreateSpaceInfoResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceInfoResValidationError{}

// Validate checks the field values on GetSpaceInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpaceInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpaceInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpaceInfoReqMultiError, or nil if none found.
func (m *GetSpaceInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpaceInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := GetSpaceInfoReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSpaceInfoReqMultiError(errors)
	}

	return nil
}

// GetSpaceInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetSpaceInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetSpaceInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpaceInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpaceInfoReqMultiError) AllErrors() []error { return m }

// GetSpaceInfoReqValidationError is the validation error returned by
// GetSpaceInfoReq.Validate if the designated constraints aren't met.
type GetSpaceInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpaceInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpaceInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpaceInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpaceInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpaceInfoReqValidationError) ErrorName() string { return "GetSpaceInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSpaceInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpaceInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpaceInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpaceInfoReqValidationError{}

// Validate checks the field values on GetSpaceInfoRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpaceInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpaceInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpaceInfoResMultiError, or nil if none found.
func (m *GetSpaceInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpaceInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorUid

	// no validation rules for AuthorNickname

	// no validation rules for AuthorAvatar

	if len(errors) > 0 {
		return GetSpaceInfoResMultiError(errors)
	}

	return nil
}

// GetSpaceInfoResMultiError is an error wrapping multiple validation errors
// returned by GetSpaceInfoRes.ValidateAll() if the designated constraints
// aren't met.
type GetSpaceInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpaceInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpaceInfoResMultiError) AllErrors() []error { return m }

// GetSpaceInfoResValidationError is the validation error returned by
// GetSpaceInfoRes.Validate if the designated constraints aren't met.
type GetSpaceInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpaceInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpaceInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpaceInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpaceInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpaceInfoResValidationError) ErrorName() string { return "GetSpaceInfoResValidationError" }

// Error satisfies the builtin error interface
func (e GetSpaceInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpaceInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpaceInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpaceInfoResValidationError{}
