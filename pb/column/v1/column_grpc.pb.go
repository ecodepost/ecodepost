// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package columnv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColumnClient is the client API for Column service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColumnClient interface {
	// 创建文档
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	// 修改文档
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error)
	// 删除文章
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error)
	// 修改顺序
	ChangeSort(ctx context.Context, in *ChangeSortReq, opts ...grpc.CallOption) (*ChangeSortRes, error)
	// 列表的permission
	ListPermission(ctx context.Context, in *ListPermissionReq, opts ...grpc.CallOption) (*ListPermissionRes, error)
	// 获取文章所有Files
	ListFile(ctx context.Context, in *ListFileReq, opts ...grpc.CallOption) (*ListFileRes, error)
	// 修改专栏的额外space属性
	CreateSpaceInfo(ctx context.Context, in *CreateSpaceInfoReq, opts ...grpc.CallOption) (*CreateSpaceInfoRes, error)
	// 修改专栏的额外space属性
	UpdateSpaceInfo(ctx context.Context, in *UpdateSpaceInfoReq, opts ...grpc.CallOption) (*UpdateSpaceInfoRes, error)
	// 修改专栏的额外space属性
	GetSpaceInfo(ctx context.Context, in *GetSpaceInfoReq, opts ...grpc.CallOption) (*GetSpaceInfoRes, error)
}

type columnClient struct {
	cc grpc.ClientConnInterface
}

func NewColumnClient(cc grpc.ClientConnInterface) ColumnClient {
	return &columnClient{cc}
}

func (c *columnClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error) {
	out := new(UpdateRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error) {
	out := new(DeleteRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) ChangeSort(ctx context.Context, in *ChangeSortReq, opts ...grpc.CallOption) (*ChangeSortRes, error) {
	out := new(ChangeSortRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/ChangeSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) ListPermission(ctx context.Context, in *ListPermissionReq, opts ...grpc.CallOption) (*ListPermissionRes, error) {
	out := new(ListPermissionRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/ListPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) ListFile(ctx context.Context, in *ListFileReq, opts ...grpc.CallOption) (*ListFileRes, error) {
	out := new(ListFileRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/ListFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) CreateSpaceInfo(ctx context.Context, in *CreateSpaceInfoReq, opts ...grpc.CallOption) (*CreateSpaceInfoRes, error) {
	out := new(CreateSpaceInfoRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/CreateSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) UpdateSpaceInfo(ctx context.Context, in *UpdateSpaceInfoReq, opts ...grpc.CallOption) (*UpdateSpaceInfoRes, error) {
	out := new(UpdateSpaceInfoRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/UpdateSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *columnClient) GetSpaceInfo(ctx context.Context, in *GetSpaceInfoReq, opts ...grpc.CallOption) (*GetSpaceInfoRes, error) {
	out := new(GetSpaceInfoRes)
	err := c.cc.Invoke(ctx, "/column.v1.Column/GetSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColumnServer is the server API for Column service.
// All implementations should embed UnimplementedColumnServer
// for forward compatibility
type ColumnServer interface {
	// 创建文档
	Create(context.Context, *CreateReq) (*CreateRes, error)
	// 修改文档
	Update(context.Context, *UpdateReq) (*UpdateRes, error)
	// 删除文章
	Delete(context.Context, *DeleteReq) (*DeleteRes, error)
	// 修改顺序
	ChangeSort(context.Context, *ChangeSortReq) (*ChangeSortRes, error)
	// 列表的permission
	ListPermission(context.Context, *ListPermissionReq) (*ListPermissionRes, error)
	// 获取文章所有Files
	ListFile(context.Context, *ListFileReq) (*ListFileRes, error)
	// 修改专栏的额外space属性
	CreateSpaceInfo(context.Context, *CreateSpaceInfoReq) (*CreateSpaceInfoRes, error)
	// 修改专栏的额外space属性
	UpdateSpaceInfo(context.Context, *UpdateSpaceInfoReq) (*UpdateSpaceInfoRes, error)
	// 修改专栏的额外space属性
	GetSpaceInfo(context.Context, *GetSpaceInfoReq) (*GetSpaceInfoRes, error)
}

// UnimplementedColumnServer should be embedded to have forward compatible implementations.
type UnimplementedColumnServer struct {
}

func (UnimplementedColumnServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedColumnServer) Update(context.Context, *UpdateReq) (*UpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedColumnServer) Delete(context.Context, *DeleteReq) (*DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedColumnServer) ChangeSort(context.Context, *ChangeSortReq) (*ChangeSortRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSort not implemented")
}
func (UnimplementedColumnServer) ListPermission(context.Context, *ListPermissionReq) (*ListPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermission not implemented")
}
func (UnimplementedColumnServer) ListFile(context.Context, *ListFileReq) (*ListFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFile not implemented")
}
func (UnimplementedColumnServer) CreateSpaceInfo(context.Context, *CreateSpaceInfoReq) (*CreateSpaceInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpaceInfo not implemented")
}
func (UnimplementedColumnServer) UpdateSpaceInfo(context.Context, *UpdateSpaceInfoReq) (*UpdateSpaceInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpaceInfo not implemented")
}
func (UnimplementedColumnServer) GetSpaceInfo(context.Context, *GetSpaceInfoReq) (*GetSpaceInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceInfo not implemented")
}

// UnsafeColumnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColumnServer will
// result in compilation errors.
type UnsafeColumnServer interface {
	mustEmbedUnimplementedColumnServer()
}

func RegisterColumnServer(s grpc.ServiceRegistrar, srv ColumnServer) {
	s.RegisterService(&Column_ServiceDesc, srv)
}

func _Column_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_ChangeSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).ChangeSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/ChangeSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).ChangeSort(ctx, req.(*ChangeSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_ListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).ListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/ListPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).ListPermission(ctx, req.(*ListPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).ListFile(ctx, req.(*ListFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_CreateSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).CreateSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/CreateSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).CreateSpaceInfo(ctx, req.(*CreateSpaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_UpdateSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).UpdateSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/UpdateSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).UpdateSpaceInfo(ctx, req.(*UpdateSpaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Column_GetSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColumnServer).GetSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/column.v1.Column/GetSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColumnServer).GetSpaceInfo(ctx, req.(*GetSpaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Column_ServiceDesc is the grpc.ServiceDesc for Column service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Column_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "column.v1.Column",
	HandlerType: (*ColumnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Column_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Column_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Column_Delete_Handler,
		},
		{
			MethodName: "ChangeSort",
			Handler:    _Column_ChangeSort_Handler,
		},
		{
			MethodName: "ListPermission",
			Handler:    _Column_ListPermission_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _Column_ListFile_Handler,
		},
		{
			MethodName: "CreateSpaceInfo",
			Handler:    _Column_CreateSpaceInfo_Handler,
		},
		{
			MethodName: "UpdateSpaceInfo",
			Handler:    _Column_UpdateSpaceInfo_Handler,
		},
		{
			MethodName: "GetSpaceInfo",
			Handler:    _Column_GetSpaceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "column/v1/column.proto",
}
