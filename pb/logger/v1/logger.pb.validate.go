// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logger/v1/logger.proto

package loggerv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.LOG_GROUP(0)
)

// Validate checks the field values on CreateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReqMultiError, or nil
// if none found.
func (m *CreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Group

	// no validation rules for TargetUid

	// no validation rules for OperateUid

	// no validation rules for SpaceGuid

	// no validation rules for SpaceGroupGuid

	// no validation rules for FileGuid

	// no validation rules for RoleId

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateReqMultiError(errors)
	}

	return nil
}

// CreateReqMultiError is an error wrapping multiple validation errors returned
// by CreateReq.ValidateAll() if the designated constraints aren't met.
type CreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReqMultiError) AllErrors() []error { return m }

// CreateReqValidationError is the validation error returned by
// CreateReq.Validate if the designated constraints aren't met.
type CreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReqValidationError) ErrorName() string { return "CreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReqValidationError{}

// Validate checks the field values on CreateRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResMultiError, or nil
// if none found.
func (m *CreateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateResMultiError(errors)
	}

	return nil
}

// CreateResMultiError is an error wrapping multiple validation errors returned
// by CreateRes.ValidateAll() if the designated constraints aren't met.
type CreateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResMultiError) AllErrors() []error { return m }

// CreateResValidationError is the validation error returned by
// CreateRes.Validate if the designated constraints aren't met.
type CreateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResValidationError) ErrorName() string { return "CreateResValidationError" }

// Error satisfies the builtin error interface
func (e CreateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResValidationError{}

// Validate checks the field values on BatchCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BatchCreateReqMultiError,
// or nil if none found.
func (m *BatchCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateReqValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateReqMultiError(errors)
	}

	return nil
}

// BatchCreateReqMultiError is an error wrapping multiple validation errors
// returned by BatchCreateReq.ValidateAll() if the designated constraints
// aren't met.
type BatchCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateReqMultiError) AllErrors() []error { return m }

// BatchCreateReqValidationError is the validation error returned by
// BatchCreateReq.Validate if the designated constraints aren't met.
type BatchCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateReqValidationError) ErrorName() string { return "BatchCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e BatchCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateReqValidationError{}

// Validate checks the field values on BatchCreateRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchCreateRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BatchCreateResMultiError,
// or nil if none found.
func (m *BatchCreateRes) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchCreateResMultiError(errors)
	}

	return nil
}

// BatchCreateResMultiError is an error wrapping multiple validation errors
// returned by BatchCreateRes.ValidateAll() if the designated constraints
// aren't met.
type BatchCreateResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateResMultiError) AllErrors() []error { return m }

// BatchCreateResValidationError is the validation error returned by
// BatchCreateRes.Validate if the designated constraints aren't met.
type BatchCreateResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateResValidationError) ErrorName() string { return "BatchCreateResValidationError" }

// Error satisfies the builtin error interface
func (e BatchCreateResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateResValidationError{}

// Validate checks the field values on BatchCreateByTargetUidsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateByTargetUidsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateByTargetUidsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateByTargetUidsReqMultiError, or nil if none found.
func (m *BatchCreateByTargetUidsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateByTargetUidsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Group

	// no validation rules for OperateUid

	// no validation rules for SpaceGuid

	// no validation rules for SpaceGroupGuid

	// no validation rules for FileGuid

	// no validation rules for RoleId

	// no validation rules for Metadata

	if len(errors) > 0 {
		return BatchCreateByTargetUidsReqMultiError(errors)
	}

	return nil
}

// BatchCreateByTargetUidsReqMultiError is an error wrapping multiple
// validation errors returned by BatchCreateByTargetUidsReq.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateByTargetUidsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateByTargetUidsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateByTargetUidsReqMultiError) AllErrors() []error { return m }

// BatchCreateByTargetUidsReqValidationError is the validation error returned
// by BatchCreateByTargetUidsReq.Validate if the designated constraints aren't met.
type BatchCreateByTargetUidsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateByTargetUidsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateByTargetUidsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateByTargetUidsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateByTargetUidsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateByTargetUidsReqValidationError) ErrorName() string {
	return "BatchCreateByTargetUidsReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateByTargetUidsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateByTargetUidsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateByTargetUidsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateByTargetUidsReqValidationError{}

// Validate checks the field values on BatchCreateByTargetUidsRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateByTargetUidsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateByTargetUidsRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateByTargetUidsResMultiError, or nil if none found.
func (m *BatchCreateByTargetUidsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateByTargetUidsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchCreateByTargetUidsResMultiError(errors)
	}

	return nil
}

// BatchCreateByTargetUidsResMultiError is an error wrapping multiple
// validation errors returned by BatchCreateByTargetUidsRes.ValidateAll() if
// the designated constraints aren't met.
type BatchCreateByTargetUidsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateByTargetUidsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateByTargetUidsResMultiError) AllErrors() []error { return m }

// BatchCreateByTargetUidsResValidationError is the validation error returned
// by BatchCreateByTargetUidsRes.Validate if the designated constraints aren't met.
type BatchCreateByTargetUidsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateByTargetUidsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateByTargetUidsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateByTargetUidsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateByTargetUidsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateByTargetUidsResValidationError) ErrorName() string {
	return "BatchCreateByTargetUidsResValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateByTargetUidsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateByTargetUidsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateByTargetUidsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateByTargetUidsResValidationError{}

// Validate checks the field values on ListPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPageReqMultiError, or
// nil if none found.
func (m *ListPageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	// no validation rules for I18N

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPageReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPageReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPageReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SearchEvent

	// no validation rules for SearchGroup

	// no validation rules for SearchOperateUid

	// no validation rules for SearchTargetUid

	if len(errors) > 0 {
		return ListPageReqMultiError(errors)
	}

	return nil
}

// ListPageReqMultiError is an error wrapping multiple validation errors
// returned by ListPageReq.ValidateAll() if the designated constraints aren't met.
type ListPageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPageReqMultiError) AllErrors() []error { return m }

// ListPageReqValidationError is the validation error returned by
// ListPageReq.Validate if the designated constraints aren't met.
type ListPageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPageReqValidationError) ErrorName() string { return "ListPageReqValidationError" }

// Error satisfies the builtin error interface
func (e ListPageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPageReqValidationError{}

// Validate checks the field values on LogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogInfoMultiError, or nil if none found.
func (m *LogInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *LogInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EventName

	// no validation rules for GroupName

	// no validation rules for Message

	// no validation rules for OperateUid

	// no validation rules for OperateName

	// no validation rules for OperateAvatar

	// no validation rules for TargetUid

	// no validation rules for TargetName

	// no validation rules for TargetAvatar

	// no validation rules for Ctime

	if len(errors) > 0 {
		return LogInfoMultiError(errors)
	}

	return nil
}

// LogInfoMultiError is an error wrapping multiple validation errors returned
// by LogInfo.ValidateAll() if the designated constraints aren't met.
type LogInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogInfoMultiError) AllErrors() []error { return m }

// LogInfoValidationError is the validation error returned by LogInfo.Validate
// if the designated constraints aren't met.
type LogInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogInfoValidationError) ErrorName() string { return "LogInfoValidationError" }

// Error satisfies the builtin error interface
func (e LogInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogInfoValidationError{}

// Validate checks the field values on ListPageRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPageRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPageResMultiError, or
// nil if none found.
func (m *ListPageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPageResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPageResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPageResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPageResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPageResMultiError(errors)
	}

	return nil
}

// ListPageResMultiError is an error wrapping multiple validation errors
// returned by ListPageRes.ValidateAll() if the designated constraints aren't met.
type ListPageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPageResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPageResMultiError) AllErrors() []error { return m }

// ListPageResValidationError is the validation error returned by
// ListPageRes.Validate if the designated constraints aren't met.
type ListPageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPageResValidationError) ErrorName() string { return "ListPageResValidationError" }

// Error satisfies the builtin error interface
func (e ListPageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPageResValidationError{}

// Validate checks the field values on ListEventAndGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventAndGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventAndGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventAndGroupReqMultiError, or nil if none found.
func (m *ListEventAndGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventAndGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	// no validation rules for I18N

	if len(errors) > 0 {
		return ListEventAndGroupReqMultiError(errors)
	}

	return nil
}

// ListEventAndGroupReqMultiError is an error wrapping multiple validation
// errors returned by ListEventAndGroupReq.ValidateAll() if the designated
// constraints aren't met.
type ListEventAndGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventAndGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventAndGroupReqMultiError) AllErrors() []error { return m }

// ListEventAndGroupReqValidationError is the validation error returned by
// ListEventAndGroupReq.Validate if the designated constraints aren't met.
type ListEventAndGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventAndGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventAndGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventAndGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventAndGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventAndGroupReqValidationError) ErrorName() string {
	return "ListEventAndGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventAndGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventAndGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventAndGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventAndGroupReqValidationError{}

// Validate checks the field values on EventInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventInfoMultiError, or nil
// if none found.
func (m *EventInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EventInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Event

	// no validation rules for Name

	if len(errors) > 0 {
		return EventInfoMultiError(errors)
	}

	return nil
}

// EventInfoMultiError is an error wrapping multiple validation errors returned
// by EventInfo.ValidateAll() if the designated constraints aren't met.
type EventInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventInfoMultiError) AllErrors() []error { return m }

// EventInfoValidationError is the validation error returned by
// EventInfo.Validate if the designated constraints aren't met.
type EventInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventInfoValidationError) ErrorName() string { return "EventInfoValidationError" }

// Error satisfies the builtin error interface
func (e EventInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventInfoValidationError{}

// Validate checks the field values on GroupInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupInfoMultiError, or nil
// if none found.
func (m *GroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Group

	// no validation rules for Name

	if len(errors) > 0 {
		return GroupInfoMultiError(errors)
	}

	return nil
}

// GroupInfoMultiError is an error wrapping multiple validation errors returned
// by GroupInfo.ValidateAll() if the designated constraints aren't met.
type GroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupInfoMultiError) AllErrors() []error { return m }

// GroupInfoValidationError is the validation error returned by
// GroupInfo.Validate if the designated constraints aren't met.
type GroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupInfoValidationError) ErrorName() string { return "GroupInfoValidationError" }

// Error satisfies the builtin error interface
func (e GroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupInfoValidationError{}

// Validate checks the field values on ListEventAndGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventAndGroupRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventAndGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventAndGroupResMultiError, or nil if none found.
func (m *ListEventAndGroupRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventAndGroupRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventAndGroupResValidationError{
						field:  fmt.Sprintf("EventList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventAndGroupResValidationError{
						field:  fmt.Sprintf("EventList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventAndGroupResValidationError{
					field:  fmt.Sprintf("EventList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGroupList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventAndGroupResValidationError{
						field:  fmt.Sprintf("GroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventAndGroupResValidationError{
						field:  fmt.Sprintf("GroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventAndGroupResValidationError{
					field:  fmt.Sprintf("GroupList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEventAndGroupResMultiError(errors)
	}

	return nil
}

// ListEventAndGroupResMultiError is an error wrapping multiple validation
// errors returned by ListEventAndGroupRes.ValidateAll() if the designated
// constraints aren't met.
type ListEventAndGroupResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventAndGroupResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventAndGroupResMultiError) AllErrors() []error { return m }

// ListEventAndGroupResValidationError is the validation error returned by
// ListEventAndGroupRes.Validate if the designated constraints aren't met.
type ListEventAndGroupResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventAndGroupResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventAndGroupResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventAndGroupResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventAndGroupResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventAndGroupResValidationError) ErrorName() string {
	return "ListEventAndGroupResValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventAndGroupResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventAndGroupRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventAndGroupResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventAndGroupResValidationError{}
