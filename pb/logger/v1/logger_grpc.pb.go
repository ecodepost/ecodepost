// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package loggerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerClient interface {
	// 增加日志事件
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	// 批量增加日志事件
	BatchCreate(ctx context.Context, in *BatchCreateReq, opts ...grpc.CallOption) (*BatchCreateRes, error)
	// 批量增加日志ByTargetUids
	BatchCreateByTargetUids(ctx context.Context, in *BatchCreateByTargetUidsReq, opts ...grpc.CallOption) (*BatchCreateByTargetUidsRes, error)
	// 显示日志列表
	ListPage(ctx context.Context, in *ListPageReq, opts ...grpc.CallOption) (*ListPageRes, error)
	// 显示日志列表
	ListEventAndGroup(ctx context.Context, in *ListEventAndGroupReq, opts ...grpc.CallOption) (*ListEventAndGroupRes, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/logger.v1.Logger/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) BatchCreate(ctx context.Context, in *BatchCreateReq, opts ...grpc.CallOption) (*BatchCreateRes, error) {
	out := new(BatchCreateRes)
	err := c.cc.Invoke(ctx, "/logger.v1.Logger/BatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) BatchCreateByTargetUids(ctx context.Context, in *BatchCreateByTargetUidsReq, opts ...grpc.CallOption) (*BatchCreateByTargetUidsRes, error) {
	out := new(BatchCreateByTargetUidsRes)
	err := c.cc.Invoke(ctx, "/logger.v1.Logger/BatchCreateByTargetUids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) ListPage(ctx context.Context, in *ListPageReq, opts ...grpc.CallOption) (*ListPageRes, error) {
	out := new(ListPageRes)
	err := c.cc.Invoke(ctx, "/logger.v1.Logger/ListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) ListEventAndGroup(ctx context.Context, in *ListEventAndGroupReq, opts ...grpc.CallOption) (*ListEventAndGroupRes, error) {
	out := new(ListEventAndGroupRes)
	err := c.cc.Invoke(ctx, "/logger.v1.Logger/ListEventAndGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
// All implementations should embed UnimplementedLoggerServer
// for forward compatibility
type LoggerServer interface {
	// 增加日志事件
	Create(context.Context, *CreateReq) (*CreateRes, error)
	// 批量增加日志事件
	BatchCreate(context.Context, *BatchCreateReq) (*BatchCreateRes, error)
	// 批量增加日志ByTargetUids
	BatchCreateByTargetUids(context.Context, *BatchCreateByTargetUidsReq) (*BatchCreateByTargetUidsRes, error)
	// 显示日志列表
	ListPage(context.Context, *ListPageReq) (*ListPageRes, error)
	// 显示日志列表
	ListEventAndGroup(context.Context, *ListEventAndGroupReq) (*ListEventAndGroupRes, error)
}

// UnimplementedLoggerServer should be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (UnimplementedLoggerServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLoggerServer) BatchCreate(context.Context, *BatchCreateReq) (*BatchCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedLoggerServer) BatchCreateByTargetUids(context.Context, *BatchCreateByTargetUidsReq) (*BatchCreateByTargetUidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateByTargetUids not implemented")
}
func (UnimplementedLoggerServer) ListPage(context.Context, *ListPageReq) (*ListPageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPage not implemented")
}
func (UnimplementedLoggerServer) ListEventAndGroup(context.Context, *ListEventAndGroupReq) (*ListEventAndGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventAndGroup not implemented")
}

// UnsafeLoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerServer will
// result in compilation errors.
type UnsafeLoggerServer interface {
	mustEmbedUnimplementedLoggerServer()
}

func RegisterLoggerServer(s grpc.ServiceRegistrar, srv LoggerServer) {
	s.RegisterService(&Logger_ServiceDesc, srv)
}

func _Logger_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.Logger/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.Logger/BatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).BatchCreate(ctx, req.(*BatchCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_BatchCreateByTargetUids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateByTargetUidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).BatchCreateByTargetUids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.Logger/BatchCreateByTargetUids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).BatchCreateByTargetUids(ctx, req.(*BatchCreateByTargetUidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_ListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).ListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.Logger/ListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).ListPage(ctx, req.(*ListPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_ListEventAndGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventAndGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).ListEventAndGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.Logger/ListEventAndGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).ListEventAndGroup(ctx, req.(*ListEventAndGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Logger_ServiceDesc is the grpc.ServiceDesc for Logger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Logger_Create_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _Logger_BatchCreate_Handler,
		},
		{
			MethodName: "BatchCreateByTargetUids",
			Handler:    _Logger_BatchCreateByTargetUids_Handler,
		},
		{
			MethodName: "ListPage",
			Handler:    _Logger_ListPage_Handler,
		},
		{
			MethodName: "ListEventAndGroup",
			Handler:    _Logger_ListEventAndGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger/v1/logger.proto",
}
