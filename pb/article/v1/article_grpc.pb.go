// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package articlev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	// 创建文档
	CreateDocument(ctx context.Context, in *CreateDocumentReq, opts ...grpc.CallOption) (*CreateDocumentRes, error)
	// 修改文档
	UpdateDocument(ctx context.Context, in *UpdateDocumentReq, opts ...grpc.CallOption) (*UpdateDocumentRes, error)
	// 将文章置顶
	SetDocumentSpaceTop(ctx context.Context, in *SetDocumentSpaceTopReq, opts ...grpc.CallOption) (*SetDocumentSpaceTopRes, error)
	// 取消文章置顶
	CancelDocumentSpaceTop(ctx context.Context, in *CancelDocumentSpaceTopReq, opts ...grpc.CallOption) (*CancelDocumentSpaceTopRes, error)
	// 文章置顶列表
	DocumentSpaceTopList(ctx context.Context, in *DocumentSpaceTopListReq, opts ...grpc.CallOption) (*DocumentSpaceTopListRes, error)
	// 将文章推荐
	SetDocumentRecommend(ctx context.Context, in *SetDocumentRecommendReq, opts ...grpc.CallOption) (*SetDocumentRecommendRes, error)
	// 取消文章推荐
	CancelDocumentRecommend(ctx context.Context, in *CancelDocumentRecommendReq, opts ...grpc.CallOption) (*CancelDocumentRecommendRes, error)
	// 文章推荐列表
	DocumentRecommendList(ctx context.Context, in *DocumentRecommendListReq, opts ...grpc.CallOption) (*DocumentRecommendListRes, error)
	// 关闭评论
	CloseDocumentComment(ctx context.Context, in *CloseDocumentCommentReq, opts ...grpc.CallOption) (*CloseDocumentCommentRes, error)
	// 打开评论
	OpenDocumentComment(ctx context.Context, in *OpenDocumentCommentReq, opts ...grpc.CallOption) (*OpenDocumentCommentRes, error)
	// 删除文章
	DeleteDocument(ctx context.Context, in *DeleteDocumentReq, opts ...grpc.CallOption) (*DeleteDocumentRes, error)
	// List 根据guids等参数查询文章列表
	ListDocumentByGuids(ctx context.Context, in *ListDocumentByGuidsReq, opts ...grpc.CallOption) (*ListDocumentByGuidsRes, error)
	// 首页的文章列表根据不同方式展示
	HomeArticlePageList(ctx context.Context, in *HomeArticlePageListReq, opts ...grpc.CallOption) (*HomeArticlePageListRes, error)
	// 首页的热门文章列表
	HomeArticleHotList(ctx context.Context, in *HomeArticleHotListReq, opts ...grpc.CallOption) (*HomeArticleHotListRes, error)
	// 用户在社区中公开创建的文章列表
	PublicListByUserCreated(ctx context.Context, in *PublicListByUserCreatedReq, opts ...grpc.CallOption) (*PublicListByUserCreatedRes, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) CreateDocument(ctx context.Context, in *CreateDocumentReq, opts ...grpc.CallOption) (*CreateDocumentRes, error) {
	out := new(CreateDocumentRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateDocument(ctx context.Context, in *UpdateDocumentReq, opts ...grpc.CallOption) (*UpdateDocumentRes, error) {
	out := new(UpdateDocumentRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SetDocumentSpaceTop(ctx context.Context, in *SetDocumentSpaceTopReq, opts ...grpc.CallOption) (*SetDocumentSpaceTopRes, error) {
	out := new(SetDocumentSpaceTopRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/SetDocumentSpaceTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CancelDocumentSpaceTop(ctx context.Context, in *CancelDocumentSpaceTopReq, opts ...grpc.CallOption) (*CancelDocumentSpaceTopRes, error) {
	out := new(CancelDocumentSpaceTopRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/CancelDocumentSpaceTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DocumentSpaceTopList(ctx context.Context, in *DocumentSpaceTopListReq, opts ...grpc.CallOption) (*DocumentSpaceTopListRes, error) {
	out := new(DocumentSpaceTopListRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/DocumentSpaceTopList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SetDocumentRecommend(ctx context.Context, in *SetDocumentRecommendReq, opts ...grpc.CallOption) (*SetDocumentRecommendRes, error) {
	out := new(SetDocumentRecommendRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/SetDocumentRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CancelDocumentRecommend(ctx context.Context, in *CancelDocumentRecommendReq, opts ...grpc.CallOption) (*CancelDocumentRecommendRes, error) {
	out := new(CancelDocumentRecommendRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/CancelDocumentRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DocumentRecommendList(ctx context.Context, in *DocumentRecommendListReq, opts ...grpc.CallOption) (*DocumentRecommendListRes, error) {
	out := new(DocumentRecommendListRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/DocumentRecommendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) CloseDocumentComment(ctx context.Context, in *CloseDocumentCommentReq, opts ...grpc.CallOption) (*CloseDocumentCommentRes, error) {
	out := new(CloseDocumentCommentRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/CloseDocumentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) OpenDocumentComment(ctx context.Context, in *OpenDocumentCommentReq, opts ...grpc.CallOption) (*OpenDocumentCommentRes, error) {
	out := new(OpenDocumentCommentRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/OpenDocumentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DeleteDocument(ctx context.Context, in *DeleteDocumentReq, opts ...grpc.CallOption) (*DeleteDocumentRes, error) {
	out := new(DeleteDocumentRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/DeleteDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) ListDocumentByGuids(ctx context.Context, in *ListDocumentByGuidsReq, opts ...grpc.CallOption) (*ListDocumentByGuidsRes, error) {
	out := new(ListDocumentByGuidsRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/ListDocumentByGuids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) HomeArticlePageList(ctx context.Context, in *HomeArticlePageListReq, opts ...grpc.CallOption) (*HomeArticlePageListRes, error) {
	out := new(HomeArticlePageListRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/HomeArticlePageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) HomeArticleHotList(ctx context.Context, in *HomeArticleHotListReq, opts ...grpc.CallOption) (*HomeArticleHotListRes, error) {
	out := new(HomeArticleHotListRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/HomeArticleHotList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) PublicListByUserCreated(ctx context.Context, in *PublicListByUserCreatedReq, opts ...grpc.CallOption) (*PublicListByUserCreatedRes, error) {
	out := new(PublicListByUserCreatedRes)
	err := c.cc.Invoke(ctx, "/article.v1.Article/PublicListByUserCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations should embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	// 创建文档
	CreateDocument(context.Context, *CreateDocumentReq) (*CreateDocumentRes, error)
	// 修改文档
	UpdateDocument(context.Context, *UpdateDocumentReq) (*UpdateDocumentRes, error)
	// 将文章置顶
	SetDocumentSpaceTop(context.Context, *SetDocumentSpaceTopReq) (*SetDocumentSpaceTopRes, error)
	// 取消文章置顶
	CancelDocumentSpaceTop(context.Context, *CancelDocumentSpaceTopReq) (*CancelDocumentSpaceTopRes, error)
	// 文章置顶列表
	DocumentSpaceTopList(context.Context, *DocumentSpaceTopListReq) (*DocumentSpaceTopListRes, error)
	// 将文章推荐
	SetDocumentRecommend(context.Context, *SetDocumentRecommendReq) (*SetDocumentRecommendRes, error)
	// 取消文章推荐
	CancelDocumentRecommend(context.Context, *CancelDocumentRecommendReq) (*CancelDocumentRecommendRes, error)
	// 文章推荐列表
	DocumentRecommendList(context.Context, *DocumentRecommendListReq) (*DocumentRecommendListRes, error)
	// 关闭评论
	CloseDocumentComment(context.Context, *CloseDocumentCommentReq) (*CloseDocumentCommentRes, error)
	// 打开评论
	OpenDocumentComment(context.Context, *OpenDocumentCommentReq) (*OpenDocumentCommentRes, error)
	// 删除文章
	DeleteDocument(context.Context, *DeleteDocumentReq) (*DeleteDocumentRes, error)
	// List 根据guids等参数查询文章列表
	ListDocumentByGuids(context.Context, *ListDocumentByGuidsReq) (*ListDocumentByGuidsRes, error)
	// 首页的文章列表根据不同方式展示
	HomeArticlePageList(context.Context, *HomeArticlePageListReq) (*HomeArticlePageListRes, error)
	// 首页的热门文章列表
	HomeArticleHotList(context.Context, *HomeArticleHotListReq) (*HomeArticleHotListRes, error)
	// 用户在社区中公开创建的文章列表
	PublicListByUserCreated(context.Context, *PublicListByUserCreatedReq) (*PublicListByUserCreatedRes, error)
}

// UnimplementedArticleServer should be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) CreateDocument(context.Context, *CreateDocumentReq) (*CreateDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedArticleServer) UpdateDocument(context.Context, *UpdateDocumentReq) (*UpdateDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedArticleServer) SetDocumentSpaceTop(context.Context, *SetDocumentSpaceTopReq) (*SetDocumentSpaceTopRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDocumentSpaceTop not implemented")
}
func (UnimplementedArticleServer) CancelDocumentSpaceTop(context.Context, *CancelDocumentSpaceTopReq) (*CancelDocumentSpaceTopRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDocumentSpaceTop not implemented")
}
func (UnimplementedArticleServer) DocumentSpaceTopList(context.Context, *DocumentSpaceTopListReq) (*DocumentSpaceTopListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentSpaceTopList not implemented")
}
func (UnimplementedArticleServer) SetDocumentRecommend(context.Context, *SetDocumentRecommendReq) (*SetDocumentRecommendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDocumentRecommend not implemented")
}
func (UnimplementedArticleServer) CancelDocumentRecommend(context.Context, *CancelDocumentRecommendReq) (*CancelDocumentRecommendRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDocumentRecommend not implemented")
}
func (UnimplementedArticleServer) DocumentRecommendList(context.Context, *DocumentRecommendListReq) (*DocumentRecommendListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentRecommendList not implemented")
}
func (UnimplementedArticleServer) CloseDocumentComment(context.Context, *CloseDocumentCommentReq) (*CloseDocumentCommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseDocumentComment not implemented")
}
func (UnimplementedArticleServer) OpenDocumentComment(context.Context, *OpenDocumentCommentReq) (*OpenDocumentCommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDocumentComment not implemented")
}
func (UnimplementedArticleServer) DeleteDocument(context.Context, *DeleteDocumentReq) (*DeleteDocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedArticleServer) ListDocumentByGuids(context.Context, *ListDocumentByGuidsReq) (*ListDocumentByGuidsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentByGuids not implemented")
}
func (UnimplementedArticleServer) HomeArticlePageList(context.Context, *HomeArticlePageListReq) (*HomeArticlePageListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeArticlePageList not implemented")
}
func (UnimplementedArticleServer) HomeArticleHotList(context.Context, *HomeArticleHotListReq) (*HomeArticleHotListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeArticleHotList not implemented")
}
func (UnimplementedArticleServer) PublicListByUserCreated(context.Context, *PublicListByUserCreatedReq) (*PublicListByUserCreatedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListByUserCreated not implemented")
}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CreateDocument(ctx, req.(*CreateDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateDocument(ctx, req.(*UpdateDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SetDocumentSpaceTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDocumentSpaceTopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SetDocumentSpaceTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/SetDocumentSpaceTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SetDocumentSpaceTop(ctx, req.(*SetDocumentSpaceTopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CancelDocumentSpaceTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDocumentSpaceTopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CancelDocumentSpaceTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/CancelDocumentSpaceTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CancelDocumentSpaceTop(ctx, req.(*CancelDocumentSpaceTopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DocumentSpaceTopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentSpaceTopListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DocumentSpaceTopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/DocumentSpaceTopList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DocumentSpaceTopList(ctx, req.(*DocumentSpaceTopListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SetDocumentRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDocumentRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).SetDocumentRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/SetDocumentRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).SetDocumentRecommend(ctx, req.(*SetDocumentRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CancelDocumentRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDocumentRecommendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CancelDocumentRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/CancelDocumentRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CancelDocumentRecommend(ctx, req.(*CancelDocumentRecommendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DocumentRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRecommendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DocumentRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/DocumentRecommendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DocumentRecommendList(ctx, req.(*DocumentRecommendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_CloseDocumentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseDocumentCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).CloseDocumentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/CloseDocumentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).CloseDocumentComment(ctx, req.(*CloseDocumentCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_OpenDocumentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDocumentCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).OpenDocumentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/OpenDocumentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).OpenDocumentComment(ctx, req.(*OpenDocumentCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/DeleteDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DeleteDocument(ctx, req.(*DeleteDocumentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_ListDocumentByGuids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentByGuidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).ListDocumentByGuids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/ListDocumentByGuids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).ListDocumentByGuids(ctx, req.(*ListDocumentByGuidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_HomeArticlePageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeArticlePageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).HomeArticlePageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/HomeArticlePageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).HomeArticlePageList(ctx, req.(*HomeArticlePageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_HomeArticleHotList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeArticleHotListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).HomeArticleHotList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/HomeArticleHotList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).HomeArticleHotList(ctx, req.(*HomeArticleHotListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_PublicListByUserCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListByUserCreatedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).PublicListByUserCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.v1.Article/PublicListByUserCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).PublicListByUserCreated(ctx, req.(*PublicListByUserCreatedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.v1.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _Article_CreateDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _Article_UpdateDocument_Handler,
		},
		{
			MethodName: "SetDocumentSpaceTop",
			Handler:    _Article_SetDocumentSpaceTop_Handler,
		},
		{
			MethodName: "CancelDocumentSpaceTop",
			Handler:    _Article_CancelDocumentSpaceTop_Handler,
		},
		{
			MethodName: "DocumentSpaceTopList",
			Handler:    _Article_DocumentSpaceTopList_Handler,
		},
		{
			MethodName: "SetDocumentRecommend",
			Handler:    _Article_SetDocumentRecommend_Handler,
		},
		{
			MethodName: "CancelDocumentRecommend",
			Handler:    _Article_CancelDocumentRecommend_Handler,
		},
		{
			MethodName: "DocumentRecommendList",
			Handler:    _Article_DocumentRecommendList_Handler,
		},
		{
			MethodName: "CloseDocumentComment",
			Handler:    _Article_CloseDocumentComment_Handler,
		},
		{
			MethodName: "OpenDocumentComment",
			Handler:    _Article_OpenDocumentComment_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _Article_DeleteDocument_Handler,
		},
		{
			MethodName: "ListDocumentByGuids",
			Handler:    _Article_ListDocumentByGuids_Handler,
		},
		{
			MethodName: "HomeArticlePageList",
			Handler:    _Article_HomeArticlePageList_Handler,
		},
		{
			MethodName: "HomeArticleHotList",
			Handler:    _Article_HomeArticleHotList_Handler,
		},
		{
			MethodName: "PublicListByUserCreated",
			Handler:    _Article_PublicListByUserCreated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article/v1/article.proto",
}
