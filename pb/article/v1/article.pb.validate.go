// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: article/v1/article.proto

package articlev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.CMN_FILE_SORT(0)
)

// Validate checks the field values on CreateDocumentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentReqMultiError, or nil if none found.
func (m *CreateDocumentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CreateDocumentReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 1000 {
		err := CreateDocumentReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := CreateDocumentReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentGuid

	// no validation rules for Format

	// no validation rules for Content

	// no validation rules for HeadImage

	// no validation rules for Ctime

	// no validation rules for Utime

	// no validation rules for CntView

	// no validation rules for Ip

	if len(errors) > 0 {
		return CreateDocumentReqMultiError(errors)
	}

	return nil
}

// CreateDocumentReqMultiError is an error wrapping multiple validation errors
// returned by CreateDocumentReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDocumentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentReqMultiError) AllErrors() []error { return m }

// CreateDocumentReqValidationError is the validation error returned by
// CreateDocumentReq.Validate if the designated constraints aren't met.
type CreateDocumentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentReqValidationError) ErrorName() string {
	return "CreateDocumentReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentReqValidationError{}

// Validate checks the field values on CreateDocumentRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentResMultiError, or nil if none found.
func (m *CreateDocumentRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentResValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentResValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentResValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentResMultiError(errors)
	}

	return nil
}

// CreateDocumentResMultiError is an error wrapping multiple validation errors
// returned by CreateDocumentRes.ValidateAll() if the designated constraints
// aren't met.
type CreateDocumentResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentResMultiError) AllErrors() []error { return m }

// CreateDocumentResValidationError is the validation error returned by
// CreateDocumentRes.Validate if the designated constraints aren't met.
type CreateDocumentResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentResValidationError) ErrorName() string {
	return "CreateDocumentResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentResValidationError{}

// Validate checks the field values on UpdateDocumentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentReqMultiError, or nil if none found.
func (m *UpdateDocumentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := UpdateDocumentReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := UpdateDocumentReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := UpdateDocumentReqValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FileFormat

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.HeadImage != nil {
		// no validation rules for HeadImage
	}

	if len(errors) > 0 {
		return UpdateDocumentReqMultiError(errors)
	}

	return nil
}

// UpdateDocumentReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDocumentReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDocumentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentReqMultiError) AllErrors() []error { return m }

// UpdateDocumentReqValidationError is the validation error returned by
// UpdateDocumentReq.Validate if the designated constraints aren't met.
type UpdateDocumentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentReqValidationError) ErrorName() string {
	return "UpdateDocumentReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentReqValidationError{}

// Validate checks the field values on UpdateDocumentRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentResMultiError, or nil if none found.
func (m *UpdateDocumentRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDocumentResMultiError(errors)
	}

	return nil
}

// UpdateDocumentResMultiError is an error wrapping multiple validation errors
// returned by UpdateDocumentRes.ValidateAll() if the designated constraints
// aren't met.
type UpdateDocumentResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentResMultiError) AllErrors() []error { return m }

// UpdateDocumentResValidationError is the validation error returned by
// UpdateDocumentRes.Validate if the designated constraints aren't met.
type UpdateDocumentResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentResValidationError) ErrorName() string {
	return "UpdateDocumentResValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentResValidationError{}

// Validate checks the field values on SetDocumentSpaceTopReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentSpaceTopReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentSpaceTopReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentSpaceTopReqMultiError, or nil if none found.
func (m *SetDocumentSpaceTopReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentSpaceTopReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := SetDocumentSpaceTopReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := SetDocumentSpaceTopReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetDocumentSpaceTopReqMultiError(errors)
	}

	return nil
}

// SetDocumentSpaceTopReqMultiError is an error wrapping multiple validation
// errors returned by SetDocumentSpaceTopReq.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentSpaceTopReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentSpaceTopReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentSpaceTopReqMultiError) AllErrors() []error { return m }

// SetDocumentSpaceTopReqValidationError is the validation error returned by
// SetDocumentSpaceTopReq.Validate if the designated constraints aren't met.
type SetDocumentSpaceTopReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentSpaceTopReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentSpaceTopReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentSpaceTopReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentSpaceTopReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentSpaceTopReqValidationError) ErrorName() string {
	return "SetDocumentSpaceTopReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentSpaceTopReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentSpaceTopReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentSpaceTopReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentSpaceTopReqValidationError{}

// Validate checks the field values on SetDocumentSpaceTopRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentSpaceTopRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentSpaceTopRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentSpaceTopResMultiError, or nil if none found.
func (m *SetDocumentSpaceTopRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentSpaceTopRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDocumentSpaceTopResMultiError(errors)
	}

	return nil
}

// SetDocumentSpaceTopResMultiError is an error wrapping multiple validation
// errors returned by SetDocumentSpaceTopRes.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentSpaceTopResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentSpaceTopResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentSpaceTopResMultiError) AllErrors() []error { return m }

// SetDocumentSpaceTopResValidationError is the validation error returned by
// SetDocumentSpaceTopRes.Validate if the designated constraints aren't met.
type SetDocumentSpaceTopResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentSpaceTopResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentSpaceTopResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentSpaceTopResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentSpaceTopResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentSpaceTopResValidationError) ErrorName() string {
	return "SetDocumentSpaceTopResValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentSpaceTopResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentSpaceTopRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentSpaceTopResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentSpaceTopResValidationError{}

// Validate checks the field values on CancelDocumentSpaceTopReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDocumentSpaceTopReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDocumentSpaceTopReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDocumentSpaceTopReqMultiError, or nil if none found.
func (m *CancelDocumentSpaceTopReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDocumentSpaceTopReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CancelDocumentSpaceTopReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := CancelDocumentSpaceTopReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelDocumentSpaceTopReqMultiError(errors)
	}

	return nil
}

// CancelDocumentSpaceTopReqMultiError is an error wrapping multiple validation
// errors returned by CancelDocumentSpaceTopReq.ValidateAll() if the
// designated constraints aren't met.
type CancelDocumentSpaceTopReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDocumentSpaceTopReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDocumentSpaceTopReqMultiError) AllErrors() []error { return m }

// CancelDocumentSpaceTopReqValidationError is the validation error returned by
// CancelDocumentSpaceTopReq.Validate if the designated constraints aren't met.
type CancelDocumentSpaceTopReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDocumentSpaceTopReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDocumentSpaceTopReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDocumentSpaceTopReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDocumentSpaceTopReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDocumentSpaceTopReqValidationError) ErrorName() string {
	return "CancelDocumentSpaceTopReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDocumentSpaceTopReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDocumentSpaceTopReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDocumentSpaceTopReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDocumentSpaceTopReqValidationError{}

// Validate checks the field values on CancelDocumentSpaceTopRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDocumentSpaceTopRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDocumentSpaceTopRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDocumentSpaceTopResMultiError, or nil if none found.
func (m *CancelDocumentSpaceTopRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDocumentSpaceTopRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelDocumentSpaceTopResMultiError(errors)
	}

	return nil
}

// CancelDocumentSpaceTopResMultiError is an error wrapping multiple validation
// errors returned by CancelDocumentSpaceTopRes.ValidateAll() if the
// designated constraints aren't met.
type CancelDocumentSpaceTopResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDocumentSpaceTopResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDocumentSpaceTopResMultiError) AllErrors() []error { return m }

// CancelDocumentSpaceTopResValidationError is the validation error returned by
// CancelDocumentSpaceTopRes.Validate if the designated constraints aren't met.
type CancelDocumentSpaceTopResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDocumentSpaceTopResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDocumentSpaceTopResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDocumentSpaceTopResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDocumentSpaceTopResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDocumentSpaceTopResValidationError) ErrorName() string {
	return "CancelDocumentSpaceTopResValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDocumentSpaceTopResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDocumentSpaceTopRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDocumentSpaceTopResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDocumentSpaceTopResValidationError{}

// Validate checks the field values on DocumentSpaceTopListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentSpaceTopListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentSpaceTopListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentSpaceTopListReqMultiError, or nil if none found.
func (m *DocumentSpaceTopListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentSpaceTopListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for SpaceGuid

	if len(errors) > 0 {
		return DocumentSpaceTopListReqMultiError(errors)
	}

	return nil
}

// DocumentSpaceTopListReqMultiError is an error wrapping multiple validation
// errors returned by DocumentSpaceTopListReq.ValidateAll() if the designated
// constraints aren't met.
type DocumentSpaceTopListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentSpaceTopListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentSpaceTopListReqMultiError) AllErrors() []error { return m }

// DocumentSpaceTopListReqValidationError is the validation error returned by
// DocumentSpaceTopListReq.Validate if the designated constraints aren't met.
type DocumentSpaceTopListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentSpaceTopListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentSpaceTopListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentSpaceTopListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentSpaceTopListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentSpaceTopListReqValidationError) ErrorName() string {
	return "DocumentSpaceTopListReqValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentSpaceTopListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentSpaceTopListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentSpaceTopListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentSpaceTopListReqValidationError{}

// Validate checks the field values on DocumentSpaceTopListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentSpaceTopListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentSpaceTopListRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentSpaceTopListResMultiError, or nil if none found.
func (m *DocumentSpaceTopListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentSpaceTopListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentSpaceTopListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentSpaceTopListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentSpaceTopListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentSpaceTopListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentSpaceTopListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentSpaceTopListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DocumentSpaceTopListResMultiError(errors)
	}

	return nil
}

// DocumentSpaceTopListResMultiError is an error wrapping multiple validation
// errors returned by DocumentSpaceTopListRes.ValidateAll() if the designated
// constraints aren't met.
type DocumentSpaceTopListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentSpaceTopListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentSpaceTopListResMultiError) AllErrors() []error { return m }

// DocumentSpaceTopListResValidationError is the validation error returned by
// DocumentSpaceTopListRes.Validate if the designated constraints aren't met.
type DocumentSpaceTopListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentSpaceTopListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentSpaceTopListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentSpaceTopListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentSpaceTopListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentSpaceTopListResValidationError) ErrorName() string {
	return "DocumentSpaceTopListResValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentSpaceTopListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentSpaceTopListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentSpaceTopListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentSpaceTopListResValidationError{}

// Validate checks the field values on SetDocumentRecommendReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentRecommendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentRecommendReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentRecommendReqMultiError, or nil if none found.
func (m *SetDocumentRecommendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentRecommendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := SetDocumentRecommendReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := SetDocumentRecommendReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetDocumentRecommendReqMultiError(errors)
	}

	return nil
}

// SetDocumentRecommendReqMultiError is an error wrapping multiple validation
// errors returned by SetDocumentRecommendReq.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentRecommendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentRecommendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentRecommendReqMultiError) AllErrors() []error { return m }

// SetDocumentRecommendReqValidationError is the validation error returned by
// SetDocumentRecommendReq.Validate if the designated constraints aren't met.
type SetDocumentRecommendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentRecommendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentRecommendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentRecommendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentRecommendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentRecommendReqValidationError) ErrorName() string {
	return "SetDocumentRecommendReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentRecommendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentRecommendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentRecommendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentRecommendReqValidationError{}

// Validate checks the field values on SetDocumentRecommendRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentRecommendRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentRecommendRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentRecommendResMultiError, or nil if none found.
func (m *SetDocumentRecommendRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentRecommendRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDocumentRecommendResMultiError(errors)
	}

	return nil
}

// SetDocumentRecommendResMultiError is an error wrapping multiple validation
// errors returned by SetDocumentRecommendRes.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentRecommendResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentRecommendResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentRecommendResMultiError) AllErrors() []error { return m }

// SetDocumentRecommendResValidationError is the validation error returned by
// SetDocumentRecommendRes.Validate if the designated constraints aren't met.
type SetDocumentRecommendResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentRecommendResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentRecommendResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentRecommendResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentRecommendResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentRecommendResValidationError) ErrorName() string {
	return "SetDocumentRecommendResValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentRecommendResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentRecommendRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentRecommendResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentRecommendResValidationError{}

// Validate checks the field values on CancelDocumentRecommendReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDocumentRecommendReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDocumentRecommendReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDocumentRecommendReqMultiError, or nil if none found.
func (m *CancelDocumentRecommendReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDocumentRecommendReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CancelDocumentRecommendReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := CancelDocumentRecommendReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelDocumentRecommendReqMultiError(errors)
	}

	return nil
}

// CancelDocumentRecommendReqMultiError is an error wrapping multiple
// validation errors returned by CancelDocumentRecommendReq.ValidateAll() if
// the designated constraints aren't met.
type CancelDocumentRecommendReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDocumentRecommendReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDocumentRecommendReqMultiError) AllErrors() []error { return m }

// CancelDocumentRecommendReqValidationError is the validation error returned
// by CancelDocumentRecommendReq.Validate if the designated constraints aren't met.
type CancelDocumentRecommendReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDocumentRecommendReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDocumentRecommendReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDocumentRecommendReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDocumentRecommendReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDocumentRecommendReqValidationError) ErrorName() string {
	return "CancelDocumentRecommendReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDocumentRecommendReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDocumentRecommendReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDocumentRecommendReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDocumentRecommendReqValidationError{}

// Validate checks the field values on CancelDocumentRecommendRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDocumentRecommendRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDocumentRecommendRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDocumentRecommendResMultiError, or nil if none found.
func (m *CancelDocumentRecommendRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDocumentRecommendRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelDocumentRecommendResMultiError(errors)
	}

	return nil
}

// CancelDocumentRecommendResMultiError is an error wrapping multiple
// validation errors returned by CancelDocumentRecommendRes.ValidateAll() if
// the designated constraints aren't met.
type CancelDocumentRecommendResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDocumentRecommendResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDocumentRecommendResMultiError) AllErrors() []error { return m }

// CancelDocumentRecommendResValidationError is the validation error returned
// by CancelDocumentRecommendRes.Validate if the designated constraints aren't met.
type CancelDocumentRecommendResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDocumentRecommendResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDocumentRecommendResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDocumentRecommendResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDocumentRecommendResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDocumentRecommendResValidationError) ErrorName() string {
	return "CancelDocumentRecommendResValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDocumentRecommendResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDocumentRecommendRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDocumentRecommendResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDocumentRecommendResValidationError{}

// Validate checks the field values on CloseDocumentCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseDocumentCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseDocumentCommentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseDocumentCommentReqMultiError, or nil if none found.
func (m *CloseDocumentCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseDocumentCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CloseDocumentCommentReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := CloseDocumentCommentReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloseDocumentCommentReqMultiError(errors)
	}

	return nil
}

// CloseDocumentCommentReqMultiError is an error wrapping multiple validation
// errors returned by CloseDocumentCommentReq.ValidateAll() if the designated
// constraints aren't met.
type CloseDocumentCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseDocumentCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseDocumentCommentReqMultiError) AllErrors() []error { return m }

// CloseDocumentCommentReqValidationError is the validation error returned by
// CloseDocumentCommentReq.Validate if the designated constraints aren't met.
type CloseDocumentCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseDocumentCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseDocumentCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseDocumentCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseDocumentCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseDocumentCommentReqValidationError) ErrorName() string {
	return "CloseDocumentCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e CloseDocumentCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseDocumentCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseDocumentCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseDocumentCommentReqValidationError{}

// Validate checks the field values on CloseDocumentCommentRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseDocumentCommentRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseDocumentCommentRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseDocumentCommentResMultiError, or nil if none found.
func (m *CloseDocumentCommentRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseDocumentCommentRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloseDocumentCommentResMultiError(errors)
	}

	return nil
}

// CloseDocumentCommentResMultiError is an error wrapping multiple validation
// errors returned by CloseDocumentCommentRes.ValidateAll() if the designated
// constraints aren't met.
type CloseDocumentCommentResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseDocumentCommentResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseDocumentCommentResMultiError) AllErrors() []error { return m }

// CloseDocumentCommentResValidationError is the validation error returned by
// CloseDocumentCommentRes.Validate if the designated constraints aren't met.
type CloseDocumentCommentResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseDocumentCommentResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseDocumentCommentResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseDocumentCommentResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseDocumentCommentResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseDocumentCommentResValidationError) ErrorName() string {
	return "CloseDocumentCommentResValidationError"
}

// Error satisfies the builtin error interface
func (e CloseDocumentCommentResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseDocumentCommentRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseDocumentCommentResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseDocumentCommentResValidationError{}

// Validate checks the field values on OpenDocumentCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenDocumentCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenDocumentCommentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenDocumentCommentReqMultiError, or nil if none found.
func (m *OpenDocumentCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenDocumentCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := OpenDocumentCommentReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := OpenDocumentCommentReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OpenDocumentCommentReqMultiError(errors)
	}

	return nil
}

// OpenDocumentCommentReqMultiError is an error wrapping multiple validation
// errors returned by OpenDocumentCommentReq.ValidateAll() if the designated
// constraints aren't met.
type OpenDocumentCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenDocumentCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenDocumentCommentReqMultiError) AllErrors() []error { return m }

// OpenDocumentCommentReqValidationError is the validation error returned by
// OpenDocumentCommentReq.Validate if the designated constraints aren't met.
type OpenDocumentCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenDocumentCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenDocumentCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenDocumentCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenDocumentCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenDocumentCommentReqValidationError) ErrorName() string {
	return "OpenDocumentCommentReqValidationError"
}

// Error satisfies the builtin error interface
func (e OpenDocumentCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenDocumentCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenDocumentCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenDocumentCommentReqValidationError{}

// Validate checks the field values on OpenDocumentCommentRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenDocumentCommentRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenDocumentCommentRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenDocumentCommentResMultiError, or nil if none found.
func (m *OpenDocumentCommentRes) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenDocumentCommentRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OpenDocumentCommentResMultiError(errors)
	}

	return nil
}

// OpenDocumentCommentResMultiError is an error wrapping multiple validation
// errors returned by OpenDocumentCommentRes.ValidateAll() if the designated
// constraints aren't met.
type OpenDocumentCommentResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenDocumentCommentResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenDocumentCommentResMultiError) AllErrors() []error { return m }

// OpenDocumentCommentResValidationError is the validation error returned by
// OpenDocumentCommentRes.Validate if the designated constraints aren't met.
type OpenDocumentCommentResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenDocumentCommentResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenDocumentCommentResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenDocumentCommentResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenDocumentCommentResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenDocumentCommentResValidationError) ErrorName() string {
	return "OpenDocumentCommentResValidationError"
}

// Error satisfies the builtin error interface
func (e OpenDocumentCommentResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenDocumentCommentRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenDocumentCommentResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenDocumentCommentResValidationError{}

// Validate checks the field values on DeleteDocumentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentReqMultiError, or nil if none found.
func (m *DeleteDocumentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := DeleteDocumentReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := DeleteDocumentReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDocumentReqMultiError(errors)
	}

	return nil
}

// DeleteDocumentReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDocumentReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDocumentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentReqMultiError) AllErrors() []error { return m }

// DeleteDocumentReqValidationError is the validation error returned by
// DeleteDocumentReq.Validate if the designated constraints aren't met.
type DeleteDocumentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentReqValidationError) ErrorName() string {
	return "DeleteDocumentReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentReqValidationError{}

// Validate checks the field values on DeleteDocumentRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentResMultiError, or nil if none found.
func (m *DeleteDocumentRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentResMultiError(errors)
	}

	return nil
}

// DeleteDocumentResMultiError is an error wrapping multiple validation errors
// returned by DeleteDocumentRes.ValidateAll() if the designated constraints
// aren't met.
type DeleteDocumentResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentResMultiError) AllErrors() []error { return m }

// DeleteDocumentResValidationError is the validation error returned by
// DeleteDocumentRes.Validate if the designated constraints aren't met.
type DeleteDocumentResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentResValidationError) ErrorName() string {
	return "DeleteDocumentResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentResValidationError{}

// Validate checks the field values on DocumentRecommendListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentRecommendListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentRecommendListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentRecommendListReqMultiError, or nil if none found.
func (m *DocumentRecommendListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentRecommendListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := DocumentRecommendListReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DocumentRecommendListReqMultiError(errors)
	}

	return nil
}

// DocumentRecommendListReqMultiError is an error wrapping multiple validation
// errors returned by DocumentRecommendListReq.ValidateAll() if the designated
// constraints aren't met.
type DocumentRecommendListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentRecommendListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentRecommendListReqMultiError) AllErrors() []error { return m }

// DocumentRecommendListReqValidationError is the validation error returned by
// DocumentRecommendListReq.Validate if the designated constraints aren't met.
type DocumentRecommendListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentRecommendListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentRecommendListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentRecommendListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentRecommendListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentRecommendListReqValidationError) ErrorName() string {
	return "DocumentRecommendListReqValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentRecommendListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentRecommendListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentRecommendListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentRecommendListReqValidationError{}

// Validate checks the field values on DocumentRecommendListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DocumentRecommendListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentRecommendListRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DocumentRecommendListResMultiError, or nil if none found.
func (m *DocumentRecommendListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentRecommendListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentRecommendListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentRecommendListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentRecommendListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DocumentRecommendListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DocumentRecommendListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DocumentRecommendListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DocumentRecommendListResMultiError(errors)
	}

	return nil
}

// DocumentRecommendListResMultiError is an error wrapping multiple validation
// errors returned by DocumentRecommendListRes.ValidateAll() if the designated
// constraints aren't met.
type DocumentRecommendListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentRecommendListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentRecommendListResMultiError) AllErrors() []error { return m }

// DocumentRecommendListResValidationError is the validation error returned by
// DocumentRecommendListRes.Validate if the designated constraints aren't met.
type DocumentRecommendListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentRecommendListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentRecommendListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentRecommendListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentRecommendListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentRecommendListResValidationError) ErrorName() string {
	return "DocumentRecommendListResValidationError"
}

// Error satisfies the builtin error interface
func (e DocumentRecommendListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentRecommendListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentRecommendListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentRecommendListResValidationError{}

// Validate checks the field values on ListDocumentByGuidsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentByGuidsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentByGuidsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentByGuidsReqMultiError, or nil if none found.
func (m *ListDocumentByGuidsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentByGuidsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentByGuidsReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentByGuidsReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentByGuidsReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDocumentByGuidsReqMultiError(errors)
	}

	return nil
}

// ListDocumentByGuidsReqMultiError is an error wrapping multiple validation
// errors returned by ListDocumentByGuidsReq.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentByGuidsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentByGuidsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentByGuidsReqMultiError) AllErrors() []error { return m }

// ListDocumentByGuidsReqValidationError is the validation error returned by
// ListDocumentByGuidsReq.Validate if the designated constraints aren't met.
type ListDocumentByGuidsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentByGuidsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentByGuidsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentByGuidsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentByGuidsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentByGuidsReqValidationError) ErrorName() string {
	return "ListDocumentByGuidsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentByGuidsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentByGuidsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentByGuidsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentByGuidsReqValidationError{}

// Validate checks the field values on ListDocumentByGuidsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentByGuidsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentByGuidsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentByGuidsResMultiError, or nil if none found.
func (m *ListDocumentByGuidsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentByGuidsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentByGuidsResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentByGuidsResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentByGuidsResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentByGuidsResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentByGuidsResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentByGuidsResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDocumentByGuidsResMultiError(errors)
	}

	return nil
}

// ListDocumentByGuidsResMultiError is an error wrapping multiple validation
// errors returned by ListDocumentByGuidsRes.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentByGuidsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentByGuidsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentByGuidsResMultiError) AllErrors() []error { return m }

// ListDocumentByGuidsResValidationError is the validation error returned by
// ListDocumentByGuidsRes.Validate if the designated constraints aren't met.
type ListDocumentByGuidsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentByGuidsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentByGuidsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentByGuidsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentByGuidsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentByGuidsResValidationError) ErrorName() string {
	return "ListDocumentByGuidsResValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentByGuidsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentByGuidsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentByGuidsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentByGuidsResValidationError{}

// Validate checks the field values on DocumentTree with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DocumentTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DocumentTree with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DocumentTreeMultiError, or
// nil if none found.
func (m *DocumentTree) ValidateAll() error {
	return m.validate(true)
}

func (m *DocumentTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for FileGuid

	// no validation rules for FileType

	// no validation rules for ParentGuid

	// no validation rules for ParentType

	// no validation rules for Sort

	// no validation rules for Disabled

	// no validation rules for IsLeaf

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DocumentTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DocumentTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DocumentTreeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for FileNode

	// no validation rules for ParentNode

	if len(errors) > 0 {
		return DocumentTreeMultiError(errors)
	}

	return nil
}

// DocumentTreeMultiError is an error wrapping multiple validation errors
// returned by DocumentTree.ValidateAll() if the designated constraints aren't met.
type DocumentTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DocumentTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DocumentTreeMultiError) AllErrors() []error { return m }

// DocumentTreeValidationError is the validation error returned by
// DocumentTree.Validate if the designated constraints aren't met.
type DocumentTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DocumentTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DocumentTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DocumentTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DocumentTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DocumentTreeValidationError) ErrorName() string { return "DocumentTreeValidationError" }

// Error satisfies the builtin error interface
func (e DocumentTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDocumentTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DocumentTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DocumentTreeValidationError{}

// Validate checks the field values on ArticleShow with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArticleShow) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArticleShow with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArticleShowMultiError, or
// nil if none found.
func (m *ArticleShow) ValidateAll() error {
	return m.validate(true)
}

func (m *ArticleShow) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Summary

	// no validation rules for Ctime

	// no validation rules for CntComment

	// no validation rules for CntView

	// no validation rules for CntCollect

	// no validation rules for HeadImage

	// no validation rules for SpaceGuid

	// no validation rules for IsReadMore

	// no validation rules for IsAllowCreateComment

	// no validation rules for IsSiteTop

	// no validation rules for IsRecommend

	// no validation rules for Format

	for idx, item := range m.GetEmojiList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArticleShowValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArticleShowValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArticleShowValidationError{
					field:  fmt.Sprintf("EmojiList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IpLocation

	if len(errors) > 0 {
		return ArticleShowMultiError(errors)
	}

	return nil
}

// ArticleShowMultiError is an error wrapping multiple validation errors
// returned by ArticleShow.ValidateAll() if the designated constraints aren't met.
type ArticleShowMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArticleShowMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArticleShowMultiError) AllErrors() []error { return m }

// ArticleShowValidationError is the validation error returned by
// ArticleShow.Validate if the designated constraints aren't met.
type ArticleShowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArticleShowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArticleShowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArticleShowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArticleShowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArticleShowValidationError) ErrorName() string { return "ArticleShowValidationError" }

// Error satisfies the builtin error interface
func (e ArticleShowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArticleShow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArticleShowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArticleShowValidationError{}

// Validate checks the field values on PublicListByUserCreatedReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListByUserCreatedReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicListByUserCreatedReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListByUserCreatedReqMultiError, or nil if none found.
func (m *PublicListByUserCreatedReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListByUserCreatedReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if m.GetCreatedUid() <= 0 {
		err := PublicListByUserCreatedReqValidationError{
			field:  "CreatedUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicListByUserCreatedReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicListByUserCreatedReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicListByUserCreatedReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublicListByUserCreatedReqMultiError(errors)
	}

	return nil
}

// PublicListByUserCreatedReqMultiError is an error wrapping multiple
// validation errors returned by PublicListByUserCreatedReq.ValidateAll() if
// the designated constraints aren't met.
type PublicListByUserCreatedReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListByUserCreatedReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListByUserCreatedReqMultiError) AllErrors() []error { return m }

// PublicListByUserCreatedReqValidationError is the validation error returned
// by PublicListByUserCreatedReq.Validate if the designated constraints aren't met.
type PublicListByUserCreatedReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListByUserCreatedReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListByUserCreatedReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListByUserCreatedReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListByUserCreatedReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListByUserCreatedReqValidationError) ErrorName() string {
	return "PublicListByUserCreatedReqValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListByUserCreatedReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListByUserCreatedReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListByUserCreatedReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListByUserCreatedReqValidationError{}

// Validate checks the field values on PublicListByUserCreatedRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListByUserCreatedRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicListByUserCreatedRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListByUserCreatedResMultiError, or nil if none found.
func (m *PublicListByUserCreatedRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListByUserCreatedRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicListByUserCreatedResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicListByUserCreatedResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicListByUserCreatedResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicListByUserCreatedResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicListByUserCreatedResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicListByUserCreatedResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublicListByUserCreatedResMultiError(errors)
	}

	return nil
}

// PublicListByUserCreatedResMultiError is an error wrapping multiple
// validation errors returned by PublicListByUserCreatedRes.ValidateAll() if
// the designated constraints aren't met.
type PublicListByUserCreatedResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListByUserCreatedResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListByUserCreatedResMultiError) AllErrors() []error { return m }

// PublicListByUserCreatedResValidationError is the validation error returned
// by PublicListByUserCreatedRes.Validate if the designated constraints aren't met.
type PublicListByUserCreatedResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListByUserCreatedResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListByUserCreatedResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListByUserCreatedResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListByUserCreatedResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListByUserCreatedResValidationError) ErrorName() string {
	return "PublicListByUserCreatedResValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListByUserCreatedResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListByUserCreatedRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListByUserCreatedResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListByUserCreatedResValidationError{}

// Validate checks the field values on HomeArticlePageListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HomeArticlePageListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeArticlePageListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeArticlePageListReqMultiError, or nil if none found.
func (m *HomeArticlePageListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeArticlePageListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HomeArticlePageListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HomeArticlePageListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HomeArticlePageListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sort

	if m.Uid != nil {
		// no validation rules for Uid
	}

	if len(errors) > 0 {
		return HomeArticlePageListReqMultiError(errors)
	}

	return nil
}

// HomeArticlePageListReqMultiError is an error wrapping multiple validation
// errors returned by HomeArticlePageListReq.ValidateAll() if the designated
// constraints aren't met.
type HomeArticlePageListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeArticlePageListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeArticlePageListReqMultiError) AllErrors() []error { return m }

// HomeArticlePageListReqValidationError is the validation error returned by
// HomeArticlePageListReq.Validate if the designated constraints aren't met.
type HomeArticlePageListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeArticlePageListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeArticlePageListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeArticlePageListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeArticlePageListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeArticlePageListReqValidationError) ErrorName() string {
	return "HomeArticlePageListReqValidationError"
}

// Error satisfies the builtin error interface
func (e HomeArticlePageListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeArticlePageListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeArticlePageListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeArticlePageListReqValidationError{}

// Validate checks the field values on HomeArticlePageListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HomeArticlePageListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeArticlePageListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeArticlePageListResMultiError, or nil if none found.
func (m *HomeArticlePageListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeArticlePageListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HomeArticlePageListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HomeArticlePageListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeArticlePageListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HomeArticlePageListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HomeArticlePageListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HomeArticlePageListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HomeArticlePageListResMultiError(errors)
	}

	return nil
}

// HomeArticlePageListResMultiError is an error wrapping multiple validation
// errors returned by HomeArticlePageListRes.ValidateAll() if the designated
// constraints aren't met.
type HomeArticlePageListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeArticlePageListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeArticlePageListResMultiError) AllErrors() []error { return m }

// HomeArticlePageListResValidationError is the validation error returned by
// HomeArticlePageListRes.Validate if the designated constraints aren't met.
type HomeArticlePageListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeArticlePageListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeArticlePageListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeArticlePageListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeArticlePageListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeArticlePageListResValidationError) ErrorName() string {
	return "HomeArticlePageListResValidationError"
}

// Error satisfies the builtin error interface
func (e HomeArticlePageListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeArticlePageListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeArticlePageListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeArticlePageListResValidationError{}

// Validate checks the field values on HomeArticleHotListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HomeArticleHotListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeArticleHotListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeArticleHotListReqMultiError, or nil if none found.
func (m *HomeArticleHotListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeArticleHotListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for LatestTime

	if m.Uid != nil {
		// no validation rules for Uid
	}

	if len(errors) > 0 {
		return HomeArticleHotListReqMultiError(errors)
	}

	return nil
}

// HomeArticleHotListReqMultiError is an error wrapping multiple validation
// errors returned by HomeArticleHotListReq.ValidateAll() if the designated
// constraints aren't met.
type HomeArticleHotListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeArticleHotListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeArticleHotListReqMultiError) AllErrors() []error { return m }

// HomeArticleHotListReqValidationError is the validation error returned by
// HomeArticleHotListReq.Validate if the designated constraints aren't met.
type HomeArticleHotListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeArticleHotListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeArticleHotListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeArticleHotListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeArticleHotListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeArticleHotListReqValidationError) ErrorName() string {
	return "HomeArticleHotListReqValidationError"
}

// Error satisfies the builtin error interface
func (e HomeArticleHotListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeArticleHotListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeArticleHotListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeArticleHotListReqValidationError{}

// Validate checks the field values on HomeArticleHotListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HomeArticleHotListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeArticleHotListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeArticleHotListResMultiError, or nil if none found.
func (m *HomeArticleHotListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeArticleHotListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HomeArticleHotListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HomeArticleHotListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeArticleHotListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HomeArticleHotListResMultiError(errors)
	}

	return nil
}

// HomeArticleHotListResMultiError is an error wrapping multiple validation
// errors returned by HomeArticleHotListRes.ValidateAll() if the designated
// constraints aren't met.
type HomeArticleHotListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeArticleHotListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeArticleHotListResMultiError) AllErrors() []error { return m }

// HomeArticleHotListResValidationError is the validation error returned by
// HomeArticleHotListRes.Validate if the designated constraints aren't met.
type HomeArticleHotListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeArticleHotListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeArticleHotListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeArticleHotListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeArticleHotListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeArticleHotListResValidationError) ErrorName() string {
	return "HomeArticleHotListResValidationError"
}

// Error satisfies the builtin error interface
func (e HomeArticleHotListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeArticleHotListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeArticleHotListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeArticleHotListResValidationError{}
