// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notifyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifyClient is the client API for Notify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyClient interface {
	// 发送消息
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgRes, error)
	// 更改用户通知消息状态
	UpdateReadStatus(ctx context.Context, in *UpdateReadStatusReq, opts ...grpc.CallOption) (*UpdateReadStatusRes, error)
	// 更改用户全部通知消息状态
	ChangeUserAllNotificationStatus(ctx context.Context, in *ChangeUserAllNotificationStatusReq, opts ...grpc.CallOption) (*ChangeUserAllNotificationStatusRes, error)
	// 查询用户未查看的通知数量
	GetUnViewCount(ctx context.Context, in *GetUnViewCountReq, opts ...grpc.CallOption) (*GetUnViewCountRes, error)
	// 查询用户下的通知列表
	ListUserNotification(ctx context.Context, in *ListUserNotificationReq, opts ...grpc.CallOption) (*ListUserNotificationRes, error)
}

type notifyClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyClient(cc grpc.ClientConnInterface) NotifyClient {
	return &notifyClient{cc}
}

func (c *notifyClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgRes, error) {
	out := new(SendMsgRes)
	err := c.cc.Invoke(ctx, "/notify.v1.Notify/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) UpdateReadStatus(ctx context.Context, in *UpdateReadStatusReq, opts ...grpc.CallOption) (*UpdateReadStatusRes, error) {
	out := new(UpdateReadStatusRes)
	err := c.cc.Invoke(ctx, "/notify.v1.Notify/UpdateReadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) ChangeUserAllNotificationStatus(ctx context.Context, in *ChangeUserAllNotificationStatusReq, opts ...grpc.CallOption) (*ChangeUserAllNotificationStatusRes, error) {
	out := new(ChangeUserAllNotificationStatusRes)
	err := c.cc.Invoke(ctx, "/notify.v1.Notify/ChangeUserAllNotificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) GetUnViewCount(ctx context.Context, in *GetUnViewCountReq, opts ...grpc.CallOption) (*GetUnViewCountRes, error) {
	out := new(GetUnViewCountRes)
	err := c.cc.Invoke(ctx, "/notify.v1.Notify/GetUnViewCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) ListUserNotification(ctx context.Context, in *ListUserNotificationReq, opts ...grpc.CallOption) (*ListUserNotificationRes, error) {
	out := new(ListUserNotificationRes)
	err := c.cc.Invoke(ctx, "/notify.v1.Notify/ListUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServer is the server API for Notify service.
// All implementations should embed UnimplementedNotifyServer
// for forward compatibility
type NotifyServer interface {
	// 发送消息
	SendMsg(context.Context, *SendMsgReq) (*SendMsgRes, error)
	// 更改用户通知消息状态
	UpdateReadStatus(context.Context, *UpdateReadStatusReq) (*UpdateReadStatusRes, error)
	// 更改用户全部通知消息状态
	ChangeUserAllNotificationStatus(context.Context, *ChangeUserAllNotificationStatusReq) (*ChangeUserAllNotificationStatusRes, error)
	// 查询用户未查看的通知数量
	GetUnViewCount(context.Context, *GetUnViewCountReq) (*GetUnViewCountRes, error)
	// 查询用户下的通知列表
	ListUserNotification(context.Context, *ListUserNotificationReq) (*ListUserNotificationRes, error)
}

// UnimplementedNotifyServer should be embedded to have forward compatible implementations.
type UnimplementedNotifyServer struct {
}

func (UnimplementedNotifyServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedNotifyServer) UpdateReadStatus(context.Context, *UpdateReadStatusReq) (*UpdateReadStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadStatus not implemented")
}
func (UnimplementedNotifyServer) ChangeUserAllNotificationStatus(context.Context, *ChangeUserAllNotificationStatusReq) (*ChangeUserAllNotificationStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserAllNotificationStatus not implemented")
}
func (UnimplementedNotifyServer) GetUnViewCount(context.Context, *GetUnViewCountReq) (*GetUnViewCountRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnViewCount not implemented")
}
func (UnimplementedNotifyServer) ListUserNotification(context.Context, *ListUserNotificationReq) (*ListUserNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserNotification not implemented")
}

// UnsafeNotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServer will
// result in compilation errors.
type UnsafeNotifyServer interface {
	mustEmbedUnimplementedNotifyServer()
}

func RegisterNotifyServer(s grpc.ServiceRegistrar, srv NotifyServer) {
	s.RegisterService(&Notify_ServiceDesc, srv)
}

func _Notify_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.v1.Notify/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_UpdateReadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).UpdateReadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.v1.Notify/UpdateReadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).UpdateReadStatus(ctx, req.(*UpdateReadStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_ChangeUserAllNotificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserAllNotificationStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).ChangeUserAllNotificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.v1.Notify/ChangeUserAllNotificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).ChangeUserAllNotificationStatus(ctx, req.(*ChangeUserAllNotificationStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_GetUnViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnViewCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).GetUnViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.v1.Notify/GetUnViewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).GetUnViewCount(ctx, req.(*GetUnViewCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_ListUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).ListUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.v1.Notify/ListUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).ListUserNotification(ctx, req.(*ListUserNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Notify_ServiceDesc is the grpc.ServiceDesc for Notify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notify.v1.Notify",
	HandlerType: (*NotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _Notify_SendMsg_Handler,
		},
		{
			MethodName: "UpdateReadStatus",
			Handler:    _Notify_UpdateReadStatus_Handler,
		},
		{
			MethodName: "ChangeUserAllNotificationStatus",
			Handler:    _Notify_ChangeUserAllNotificationStatus_Handler,
		},
		{
			MethodName: "GetUnViewCount",
			Handler:    _Notify_GetUnViewCount_Handler,
		},
		{
			MethodName: "ListUserNotification",
			Handler:    _Notify_ListUserNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify/v1/notify.proto",
}
