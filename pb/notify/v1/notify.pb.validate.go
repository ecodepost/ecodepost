// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notify/v1/notify.proto

package notifyv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.NTF_STATUS(0)
)

// Validate checks the field values on SendMsgReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMsgReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMsgReqMultiError, or
// nil if none found.
func (m *SendMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTplId() <= 0 {
		err := SendMsgReqValidationError{
			field:  "TplId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMsgs()) < 1 {
		err := SendMsgReqValidationError{
			field:  "Msgs",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMsgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMsgReqValidationError{
						field:  fmt.Sprintf("Msgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMsgReqValidationError{
						field:  fmt.Sprintf("Msgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMsgReqValidationError{
					field:  fmt.Sprintf("Msgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVarLetter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgReqValidationError{
					field:  "VarLetter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgReqValidationError{
					field:  "VarLetter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVarLetter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgReqValidationError{
				field:  "VarLetter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVarSms()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgReqValidationError{
					field:  "VarSms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgReqValidationError{
					field:  "VarSms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVarSms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgReqValidationError{
				field:  "VarSms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVarEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgReqValidationError{
					field:  "VarEmail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgReqValidationError{
					field:  "VarEmail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVarEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgReqValidationError{
				field:  "VarEmail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMsgReqMultiError(errors)
	}

	return nil
}

// SendMsgReqMultiError is an error wrapping multiple validation errors
// returned by SendMsgReq.ValidateAll() if the designated constraints aren't met.
type SendMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMsgReqMultiError) AllErrors() []error { return m }

// SendMsgReqValidationError is the validation error returned by
// SendMsgReq.Validate if the designated constraints aren't met.
type SendMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMsgReqValidationError) ErrorName() string { return "SendMsgReqValidationError" }

// Error satisfies the builtin error interface
func (e SendMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMsgReqValidationError{}

// Validate checks the field values on Msg with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Msg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Msg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MsgMultiError, or nil if none found.
func (m *Msg) ValidateAll() error {
	return m.validate(true)
}

func (m *Msg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Receiver

	// no validation rules for ExtraContent

	// no validation rules for ExtraId

	// no validation rules for Vars

	// no validation rules for TplData

	// no validation rules for Sender

	if len(errors) > 0 {
		return MsgMultiError(errors)
	}

	return nil
}

// MsgMultiError is an error wrapping multiple validation errors returned by
// Msg.ValidateAll() if the designated constraints aren't met.
type MsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgMultiError) AllErrors() []error { return m }

// MsgValidationError is the validation error returned by Msg.Validate if the
// designated constraints aren't met.
type MsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgValidationError) ErrorName() string { return "MsgValidationError" }

// Error satisfies the builtin error interface
func (e MsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgValidationError{}

// Validate checks the field values on Letter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Letter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Letter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LetterMultiError, or nil if none found.
func (m *Letter) ValidateAll() error {
	return m.validate(true)
}

func (m *Letter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for TargetId

	// no validation rules for Link

	// no validation rules for Meta

	if len(errors) > 0 {
		return LetterMultiError(errors)
	}

	return nil
}

// LetterMultiError is an error wrapping multiple validation errors returned by
// Letter.ValidateAll() if the designated constraints aren't met.
type LetterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LetterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LetterMultiError) AllErrors() []error { return m }

// LetterValidationError is the validation error returned by Letter.Validate if
// the designated constraints aren't met.
type LetterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LetterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LetterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LetterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LetterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LetterValidationError) ErrorName() string { return "LetterValidationError" }

// Error satisfies the builtin error interface
func (e LetterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLetter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LetterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LetterValidationError{}

// Validate checks the field values on Sms with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sms) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sms with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SmsMultiError, or nil if none found.
func (m *Sms) ValidateAll() error {
	return m.validate(true)
}

func (m *Sms) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SmsMultiError(errors)
	}

	return nil
}

// SmsMultiError is an error wrapping multiple validation errors returned by
// Sms.ValidateAll() if the designated constraints aren't met.
type SmsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsMultiError) AllErrors() []error { return m }

// SmsValidationError is the validation error returned by Sms.Validate if the
// designated constraints aren't met.
type SmsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsValidationError) ErrorName() string { return "SmsValidationError" }

// Error satisfies the builtin error interface
func (e SmsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsValidationError{}

// Validate checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmailMultiError, or nil if none found.
func (m *Email) ValidateAll() error {
	return m.validate(true)
}

func (m *Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ToName

	// no validation rules for Subject

	if len(errors) > 0 {
		return EmailMultiError(errors)
	}

	return nil
}

// EmailMultiError is an error wrapping multiple validation errors returned by
// Email.ValidateAll() if the designated constraints aren't met.
type EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailMultiError) AllErrors() []error { return m }

// EmailValidationError is the validation error returned by Email.Validate if
// the designated constraints aren't met.
type EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidationError) ErrorName() string { return "EmailValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidationError{}

// Validate checks the field values on UserNotification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserNotificationMultiError, or nil if none found.
func (m *UserNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *UserNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for NotificationId

	if len(errors) > 0 {
		return UserNotificationMultiError(errors)
	}

	return nil
}

// UserNotificationMultiError is an error wrapping multiple validation errors
// returned by UserNotification.ValidateAll() if the designated constraints
// aren't met.
type UserNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserNotificationMultiError) AllErrors() []error { return m }

// UserNotificationValidationError is the validation error returned by
// UserNotification.Validate if the designated constraints aren't met.
type UserNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserNotificationValidationError) ErrorName() string { return "UserNotificationValidationError" }

// Error satisfies the builtin error interface
func (e UserNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserNotificationValidationError{}

// Validate checks the field values on UpdateReadStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReadStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReadStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReadStatusReqMultiError, or nil if none found.
func (m *UpdateReadStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReadStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := UpdateReadStatusReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNotificationId() <= 0 {
		err := UpdateReadStatusReqValidationError{
			field:  "NotificationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateReadStatusReqMultiError(errors)
	}

	return nil
}

// UpdateReadStatusReqMultiError is an error wrapping multiple validation
// errors returned by UpdateReadStatusReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateReadStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReadStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReadStatusReqMultiError) AllErrors() []error { return m }

// UpdateReadStatusReqValidationError is the validation error returned by
// UpdateReadStatusReq.Validate if the designated constraints aren't met.
type UpdateReadStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReadStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReadStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReadStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReadStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReadStatusReqValidationError) ErrorName() string {
	return "UpdateReadStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReadStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReadStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReadStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReadStatusReqValidationError{}

// Validate checks the field values on UpdateReadStatusRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReadStatusRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReadStatusRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReadStatusResMultiError, or nil if none found.
func (m *UpdateReadStatusRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReadStatusRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReadStatusResMultiError(errors)
	}

	return nil
}

// UpdateReadStatusResMultiError is an error wrapping multiple validation
// errors returned by UpdateReadStatusRes.ValidateAll() if the designated
// constraints aren't met.
type UpdateReadStatusResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReadStatusResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReadStatusResMultiError) AllErrors() []error { return m }

// UpdateReadStatusResValidationError is the validation error returned by
// UpdateReadStatusRes.Validate if the designated constraints aren't met.
type UpdateReadStatusResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReadStatusResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReadStatusResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReadStatusResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReadStatusResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReadStatusResValidationError) ErrorName() string {
	return "UpdateReadStatusResValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReadStatusResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReadStatusRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReadStatusResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReadStatusResValidationError{}

// Validate checks the field values on GetUnViewCountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUnViewCountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnViewCountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnViewCountReqMultiError, or nil if none found.
func (m *GetUnViewCountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnViewCountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := GetUnViewCountReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUnViewCountReqMultiError(errors)
	}

	return nil
}

// GetUnViewCountReqMultiError is an error wrapping multiple validation errors
// returned by GetUnViewCountReq.ValidateAll() if the designated constraints
// aren't met.
type GetUnViewCountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnViewCountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnViewCountReqMultiError) AllErrors() []error { return m }

// GetUnViewCountReqValidationError is the validation error returned by
// GetUnViewCountReq.Validate if the designated constraints aren't met.
type GetUnViewCountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnViewCountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnViewCountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnViewCountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnViewCountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnViewCountReqValidationError) ErrorName() string {
	return "GetUnViewCountReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnViewCountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnViewCountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnViewCountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnViewCountReqValidationError{}

// Validate checks the field values on GetUnViewCountRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUnViewCountRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnViewCountRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnViewCountResMultiError, or nil if none found.
func (m *GetUnViewCountRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnViewCountRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetUnViewCountResMultiError(errors)
	}

	return nil
}

// GetUnViewCountResMultiError is an error wrapping multiple validation errors
// returned by GetUnViewCountRes.ValidateAll() if the designated constraints
// aren't met.
type GetUnViewCountResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnViewCountResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnViewCountResMultiError) AllErrors() []error { return m }

// GetUnViewCountResValidationError is the validation error returned by
// GetUnViewCountRes.Validate if the designated constraints aren't met.
type GetUnViewCountResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnViewCountResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnViewCountResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnViewCountResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnViewCountResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnViewCountResValidationError) ErrorName() string {
	return "GetUnViewCountResValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnViewCountResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnViewCountRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnViewCountResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnViewCountResValidationError{}

// Validate checks the field values on ListUserNotificationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserNotificationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserNotificationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserNotificationReqMultiError, or nil if none found.
func (m *ListUserNotificationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserNotificationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListUserNotificationReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserNotificationReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserNotificationReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserNotificationReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUserNotificationReqMultiError(errors)
	}

	return nil
}

// ListUserNotificationReqMultiError is an error wrapping multiple validation
// errors returned by ListUserNotificationReq.ValidateAll() if the designated
// constraints aren't met.
type ListUserNotificationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserNotificationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserNotificationReqMultiError) AllErrors() []error { return m }

// ListUserNotificationReqValidationError is the validation error returned by
// ListUserNotificationReq.Validate if the designated constraints aren't met.
type ListUserNotificationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserNotificationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserNotificationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserNotificationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserNotificationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserNotificationReqValidationError) ErrorName() string {
	return "ListUserNotificationReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserNotificationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserNotificationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserNotificationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserNotificationReqValidationError{}

// Validate checks the field values on ListUserNotificationRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserNotificationRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserNotificationRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserNotificationResMultiError, or nil if none found.
func (m *ListUserNotificationRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserNotificationRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserNotificationResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserNotificationResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserNotificationResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserNotificationResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserNotificationResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserNotificationResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUserNotificationResMultiError(errors)
	}

	return nil
}

// ListUserNotificationResMultiError is an error wrapping multiple validation
// errors returned by ListUserNotificationRes.ValidateAll() if the designated
// constraints aren't met.
type ListUserNotificationResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserNotificationResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserNotificationResMultiError) AllErrors() []error { return m }

// ListUserNotificationResValidationError is the validation error returned by
// ListUserNotificationRes.Validate if the designated constraints aren't met.
type ListUserNotificationResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserNotificationResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserNotificationResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserNotificationResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserNotificationResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserNotificationResValidationError) ErrorName() string {
	return "ListUserNotificationResValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserNotificationResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserNotificationRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserNotificationResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserNotificationResValidationError{}

// Validate checks the field values on ListUserNotificationItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserNotificationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserNotificationItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserNotificationItemMultiError, or nil if none found.
func (m *ListUserNotificationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserNotificationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for TargetId

	// no validation rules for Link

	// no validation rules for Meta

	// no validation rules for Status

	// no validation rules for NotificationId

	// no validation rules for NotificationTime

	// no validation rules for SenderId

	// no validation rules for Id

	if len(errors) > 0 {
		return ListUserNotificationItemMultiError(errors)
	}

	return nil
}

// ListUserNotificationItemMultiError is an error wrapping multiple validation
// errors returned by ListUserNotificationItem.ValidateAll() if the designated
// constraints aren't met.
type ListUserNotificationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserNotificationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserNotificationItemMultiError) AllErrors() []error { return m }

// ListUserNotificationItemValidationError is the validation error returned by
// ListUserNotificationItem.Validate if the designated constraints aren't met.
type ListUserNotificationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserNotificationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserNotificationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserNotificationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserNotificationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserNotificationItemValidationError) ErrorName() string {
	return "ListUserNotificationItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserNotificationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserNotificationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserNotificationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserNotificationItemValidationError{}

// Validate checks the field values on ChangeUserAllNotificationStatusReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeUserAllNotificationStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUserAllNotificationStatusReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeUserAllNotificationStatusReqMultiError, or nil if none found.
func (m *ChangeUserAllNotificationStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUserAllNotificationStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ChangeUserAllNotificationStatusReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeUserAllNotificationStatusReqMultiError(errors)
	}

	return nil
}

// ChangeUserAllNotificationStatusReqMultiError is an error wrapping multiple
// validation errors returned by
// ChangeUserAllNotificationStatusReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeUserAllNotificationStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUserAllNotificationStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUserAllNotificationStatusReqMultiError) AllErrors() []error { return m }

// ChangeUserAllNotificationStatusReqValidationError is the validation error
// returned by ChangeUserAllNotificationStatusReq.Validate if the designated
// constraints aren't met.
type ChangeUserAllNotificationStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUserAllNotificationStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUserAllNotificationStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUserAllNotificationStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUserAllNotificationStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUserAllNotificationStatusReqValidationError) ErrorName() string {
	return "ChangeUserAllNotificationStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUserAllNotificationStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUserAllNotificationStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUserAllNotificationStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUserAllNotificationStatusReqValidationError{}

// Validate checks the field values on ChangeUserAllNotificationStatusRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChangeUserAllNotificationStatusRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUserAllNotificationStatusRes
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChangeUserAllNotificationStatusResMultiError, or nil if none found.
func (m *ChangeUserAllNotificationStatusRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUserAllNotificationStatusRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeUserAllNotificationStatusResMultiError(errors)
	}

	return nil
}

// ChangeUserAllNotificationStatusResMultiError is an error wrapping multiple
// validation errors returned by
// ChangeUserAllNotificationStatusRes.ValidateAll() if the designated
// constraints aren't met.
type ChangeUserAllNotificationStatusResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUserAllNotificationStatusResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUserAllNotificationStatusResMultiError) AllErrors() []error { return m }

// ChangeUserAllNotificationStatusResValidationError is the validation error
// returned by ChangeUserAllNotificationStatusRes.Validate if the designated
// constraints aren't met.
type ChangeUserAllNotificationStatusResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUserAllNotificationStatusResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUserAllNotificationStatusResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUserAllNotificationStatusResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUserAllNotificationStatusResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUserAllNotificationStatusResValidationError) ErrorName() string {
	return "ChangeUserAllNotificationStatusResValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUserAllNotificationStatusResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUserAllNotificationStatusRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUserAllNotificationStatusResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUserAllNotificationStatusResValidationError{}

// Validate checks the field values on SendMsgRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMsgRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMsgRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMsgResMultiError, or
// nil if none found.
func (m *SendMsgRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMsgRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMsgResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendMsgResValidationError{
						field:  fmt.Sprintf("MsgResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendMsgResValidationError{
						field:  fmt.Sprintf("MsgResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendMsgResValidationError{
					field:  fmt.Sprintf("MsgResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendMsgResMultiError(errors)
	}

	return nil
}

// SendMsgResMultiError is an error wrapping multiple validation errors
// returned by SendMsgRes.ValidateAll() if the designated constraints aren't met.
type SendMsgResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMsgResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMsgResMultiError) AllErrors() []error { return m }

// SendMsgResValidationError is the validation error returned by
// SendMsgRes.Validate if the designated constraints aren't met.
type SendMsgResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMsgResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMsgResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMsgResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMsgResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMsgResValidationError) ErrorName() string { return "SendMsgResValidationError" }

// Error satisfies the builtin error interface
func (e SendMsgResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMsgRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMsgResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMsgResValidationError{}

// Validate checks the field values on MsgResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgResultMultiError, or nil
// if none found.
func (m *MsgResult) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for ExtraId

	// no validation rules for MsgId

	// no validation rules for Reason

	if len(errors) > 0 {
		return MsgResultMultiError(errors)
	}

	return nil
}

// MsgResultMultiError is an error wrapping multiple validation errors returned
// by MsgResult.ValidateAll() if the designated constraints aren't met.
type MsgResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgResultMultiError) AllErrors() []error { return m }

// MsgResultValidationError is the validation error returned by
// MsgResult.Validate if the designated constraints aren't met.
type MsgResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgResultValidationError) ErrorName() string { return "MsgResultValidationError" }

// Error satisfies the builtin error interface
func (e MsgResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgResultValidationError{}
