// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spacev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpaceClient is the client API for Space service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpaceClient interface {
	// 查询指定社区下所有SpaceGroup和其下Space
	ListSpaceAndGroup(ctx context.Context, in *ListSpaceAndGroupReq, opts ...grpc.CallOption) (*ListSpaceAndGroupRes, error)
	//  // 根据用户uid，获取到用户的所有空间
	//  rpc ListSpaceGuidsByUid(ListSpaceGuidsByUidReq) returns (ListSpaceGuidsByUidRes);
	// 获取社区公开的space，社区跳转默认首页只允许公开的space
	ListPublicSpace(ctx context.Context, in *ListPublicSpaceReq, opts ...grpc.CallOption) (*ListPublicSpaceRes, error)
	// 创建空间分组
	CreateSpaceGroup(ctx context.Context, in *CreateSpaceGroupReq, opts ...grpc.CallOption) (*CreateSpaceGroupRes, error)
	// 分组基本信息
	SpaceGroupInfo(ctx context.Context, in *SpaceGroupInfoReq, opts ...grpc.CallOption) (*SpaceGroupInfoRes, error)
	// 删除空间分组
	DeleteSpaceGroup(ctx context.Context, in *DeleteSpaceGroupReq, opts ...grpc.CallOption) (*DeleteSpaceGroupRes, error)
	// 修改空间分组树形
	UpdateSpaceGroup(ctx context.Context, in *UpdateSpaceGroupReq, opts ...grpc.CallOption) (*UpdateSpaceGroupRes, error)
	// 修改顺序
	ChangeSpaceGroupSort(ctx context.Context, in *ChangeSpaceGroupSortReq, opts ...grpc.CallOption) (*ChangeSpaceGroupSortRes, error)
	// 查看空间分组成员列表
	SpaceGroupMemberList(ctx context.Context, in *SpaceGroupMemberListReq, opts ...grpc.CallOption) (*SpaceGroupMemberListRes, error)
	// 添加空间分组成员
	AddSpaceGroupMember(ctx context.Context, in *AddSpaceGroupMemberReq, opts ...grpc.CallOption) (*AddSpaceGroupMemberRes, error)
	// 删除空间分组成员
	DeleteSpaceGroupMember(ctx context.Context, in *DeleteSpaceGroupMemberReq, opts ...grpc.CallOption) (*DeleteSpaceGroupMemberRes, error)
	// 搜索空间分组成员
	SearchSpaceGroupMember(ctx context.Context, in *SearchSpaceGroupMemberReq, opts ...grpc.CallOption) (*SearchSpaceGroupMemberRes, error)
	// 创建空间
	CreateSpace(ctx context.Context, in *CreateSpaceReq, opts ...grpc.CallOption) (*CreateSpaceRes, error)
	// 空间基本信息
	SpaceInfo(ctx context.Context, in *SpaceInfoReq, opts ...grpc.CallOption) (*SpaceInfoRes, error)
	// 根据guids查询空间列表
	ListSpaceInfo(ctx context.Context, in *ListSpaceInfoReq, opts ...grpc.CallOption) (*ListSpaceInfoRes, error)
	// 删除空间
	DeleteSpace(ctx context.Context, in *DeleteSpaceReq, opts ...grpc.CallOption) (*DeleteSpaceRes, error)
	// 修改空间
	UpdateSpace(ctx context.Context, in *UpdateSpaceReq, opts ...grpc.CallOption) (*UpdateSpaceRes, error)
	// 修改顺序
	ChangeSpaceSort(ctx context.Context, in *ChangeSpaceSortReq, opts ...grpc.CallOption) (*ChangeSpaceSortRes, error)
	// Space Member List
	SpaceMemberList(ctx context.Context, in *SpaceMemberListReq, opts ...grpc.CallOption) (*SpaceMemberListRes, error)
	// AddSpaceMember
	AddSpaceMember(ctx context.Context, in *AddSpaceMemberReq, opts ...grpc.CallOption) (*AddSpaceMemberRes, error)
	// DeleteSpaceMember
	DeleteSpaceMember(ctx context.Context, in *DeleteSpaceMemberReq, opts ...grpc.CallOption) (*DeleteSpaceMemberRes, error)
	// 用户主动退出空间
	QuitSpaceMember(ctx context.Context, in *QuitSpaceMemberReq, opts ...grpc.CallOption) (*QuitSpaceMemberRes, error)
	// SearchSpaceMember
	SearchSpaceMember(ctx context.Context, in *SearchSpaceMemberReq, opts ...grpc.CallOption) (*SearchSpaceMemberRes, error)
	// 申请加入空间，只有是private空间，需要这个操作
	AuditApplySpaceMember(ctx context.Context, in *AuditApplySpaceMemberReq, opts ...grpc.CallOption) (*AuditApplySpaceMemberRes, error)
	// 空间的审核列表，管理者使用
	AuditListSpaceMember(ctx context.Context, in *AuditListSpaceMemberReq, opts ...grpc.CallOption) (*AuditListSpaceMemberRes, error)
	// 通过用户，管理者使用
	AuditPassSpaceMember(ctx context.Context, in *AuditPassSpaceMemberReq, opts ...grpc.CallOption) (*AuditPassSpaceMemberRes, error)
	// 拒绝原因，并且可以，禁止在申请，管理者使用
	AuditRejectSpaceMember(ctx context.Context, in *AuditRejectSpaceMemberReq, opts ...grpc.CallOption) (*AuditRejectSpaceMemberRes, error)
	// 申请加入空间，只有是private空间，需要这个操作
	AuditMapByIds(ctx context.Context, in *AuditMapByIdsReq, opts ...grpc.CallOption) (*AuditMapByIdsRes, error)
	// 获取某个用户的空间/分组权限
	GetSpacePermissionByUid(ctx context.Context, in *GetSpacePermissionByUidReq, opts ...grpc.CallOption) (*GetSpacePermissionByUidRes, error)
	// 统计信息
	TotalInfo(ctx context.Context, in *TotalInfoReq, opts ...grpc.CallOption) (*TotalInfoRes, error)
	// Emoji List
	EmojiList(ctx context.Context, in *EmojiListReq, opts ...grpc.CallOption) (*EmojiListRes, error)
	// 生成空间访问授权订单
	GenSpaceAccessOrder(ctx context.Context, in *GenSpaceAccessOrderReq, opts ...grpc.CallOption) (*GenSpaceAccessOrderRes, error)
	// 查询是否是指定空间成员
	GetMemberStatus(ctx context.Context, in *GetMemberStatusReq, opts ...grpc.CallOption) (*GetMemberStatusRes, error)
}

type spaceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceClient(cc grpc.ClientConnInterface) SpaceClient {
	return &spaceClient{cc}
}

func (c *spaceClient) ListSpaceAndGroup(ctx context.Context, in *ListSpaceAndGroupReq, opts ...grpc.CallOption) (*ListSpaceAndGroupRes, error) {
	out := new(ListSpaceAndGroupRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/ListSpaceAndGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ListPublicSpace(ctx context.Context, in *ListPublicSpaceReq, opts ...grpc.CallOption) (*ListPublicSpaceRes, error) {
	out := new(ListPublicSpaceRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/ListPublicSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CreateSpaceGroup(ctx context.Context, in *CreateSpaceGroupReq, opts ...grpc.CallOption) (*CreateSpaceGroupRes, error) {
	out := new(CreateSpaceGroupRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/CreateSpaceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SpaceGroupInfo(ctx context.Context, in *SpaceGroupInfoReq, opts ...grpc.CallOption) (*SpaceGroupInfoRes, error) {
	out := new(SpaceGroupInfoRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/SpaceGroupInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteSpaceGroup(ctx context.Context, in *DeleteSpaceGroupReq, opts ...grpc.CallOption) (*DeleteSpaceGroupRes, error) {
	out := new(DeleteSpaceGroupRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/DeleteSpaceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) UpdateSpaceGroup(ctx context.Context, in *UpdateSpaceGroupReq, opts ...grpc.CallOption) (*UpdateSpaceGroupRes, error) {
	out := new(UpdateSpaceGroupRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/UpdateSpaceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ChangeSpaceGroupSort(ctx context.Context, in *ChangeSpaceGroupSortReq, opts ...grpc.CallOption) (*ChangeSpaceGroupSortRes, error) {
	out := new(ChangeSpaceGroupSortRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/ChangeSpaceGroupSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SpaceGroupMemberList(ctx context.Context, in *SpaceGroupMemberListReq, opts ...grpc.CallOption) (*SpaceGroupMemberListRes, error) {
	out := new(SpaceGroupMemberListRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/SpaceGroupMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AddSpaceGroupMember(ctx context.Context, in *AddSpaceGroupMemberReq, opts ...grpc.CallOption) (*AddSpaceGroupMemberRes, error) {
	out := new(AddSpaceGroupMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AddSpaceGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteSpaceGroupMember(ctx context.Context, in *DeleteSpaceGroupMemberReq, opts ...grpc.CallOption) (*DeleteSpaceGroupMemberRes, error) {
	out := new(DeleteSpaceGroupMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/DeleteSpaceGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SearchSpaceGroupMember(ctx context.Context, in *SearchSpaceGroupMemberReq, opts ...grpc.CallOption) (*SearchSpaceGroupMemberRes, error) {
	out := new(SearchSpaceGroupMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/SearchSpaceGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) CreateSpace(ctx context.Context, in *CreateSpaceReq, opts ...grpc.CallOption) (*CreateSpaceRes, error) {
	out := new(CreateSpaceRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SpaceInfo(ctx context.Context, in *SpaceInfoReq, opts ...grpc.CallOption) (*SpaceInfoRes, error) {
	out := new(SpaceInfoRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/SpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ListSpaceInfo(ctx context.Context, in *ListSpaceInfoReq, opts ...grpc.CallOption) (*ListSpaceInfoRes, error) {
	out := new(ListSpaceInfoRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/ListSpaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteSpace(ctx context.Context, in *DeleteSpaceReq, opts ...grpc.CallOption) (*DeleteSpaceRes, error) {
	out := new(DeleteSpaceRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) UpdateSpace(ctx context.Context, in *UpdateSpaceReq, opts ...grpc.CallOption) (*UpdateSpaceRes, error) {
	out := new(UpdateSpaceRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/UpdateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) ChangeSpaceSort(ctx context.Context, in *ChangeSpaceSortReq, opts ...grpc.CallOption) (*ChangeSpaceSortRes, error) {
	out := new(ChangeSpaceSortRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/ChangeSpaceSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SpaceMemberList(ctx context.Context, in *SpaceMemberListReq, opts ...grpc.CallOption) (*SpaceMemberListRes, error) {
	out := new(SpaceMemberListRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/SpaceMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AddSpaceMember(ctx context.Context, in *AddSpaceMemberReq, opts ...grpc.CallOption) (*AddSpaceMemberRes, error) {
	out := new(AddSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AddSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) DeleteSpaceMember(ctx context.Context, in *DeleteSpaceMemberReq, opts ...grpc.CallOption) (*DeleteSpaceMemberRes, error) {
	out := new(DeleteSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/DeleteSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) QuitSpaceMember(ctx context.Context, in *QuitSpaceMemberReq, opts ...grpc.CallOption) (*QuitSpaceMemberRes, error) {
	out := new(QuitSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/QuitSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) SearchSpaceMember(ctx context.Context, in *SearchSpaceMemberReq, opts ...grpc.CallOption) (*SearchSpaceMemberRes, error) {
	out := new(SearchSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/SearchSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AuditApplySpaceMember(ctx context.Context, in *AuditApplySpaceMemberReq, opts ...grpc.CallOption) (*AuditApplySpaceMemberRes, error) {
	out := new(AuditApplySpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AuditApplySpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AuditListSpaceMember(ctx context.Context, in *AuditListSpaceMemberReq, opts ...grpc.CallOption) (*AuditListSpaceMemberRes, error) {
	out := new(AuditListSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AuditListSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AuditPassSpaceMember(ctx context.Context, in *AuditPassSpaceMemberReq, opts ...grpc.CallOption) (*AuditPassSpaceMemberRes, error) {
	out := new(AuditPassSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AuditPassSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AuditRejectSpaceMember(ctx context.Context, in *AuditRejectSpaceMemberReq, opts ...grpc.CallOption) (*AuditRejectSpaceMemberRes, error) {
	out := new(AuditRejectSpaceMemberRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AuditRejectSpaceMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) AuditMapByIds(ctx context.Context, in *AuditMapByIdsReq, opts ...grpc.CallOption) (*AuditMapByIdsRes, error) {
	out := new(AuditMapByIdsRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/AuditMapByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetSpacePermissionByUid(ctx context.Context, in *GetSpacePermissionByUidReq, opts ...grpc.CallOption) (*GetSpacePermissionByUidRes, error) {
	out := new(GetSpacePermissionByUidRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/GetSpacePermissionByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) TotalInfo(ctx context.Context, in *TotalInfoReq, opts ...grpc.CallOption) (*TotalInfoRes, error) {
	out := new(TotalInfoRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/TotalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) EmojiList(ctx context.Context, in *EmojiListReq, opts ...grpc.CallOption) (*EmojiListRes, error) {
	out := new(EmojiListRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/EmojiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GenSpaceAccessOrder(ctx context.Context, in *GenSpaceAccessOrderReq, opts ...grpc.CallOption) (*GenSpaceAccessOrderRes, error) {
	out := new(GenSpaceAccessOrderRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/GenSpaceAccessOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceClient) GetMemberStatus(ctx context.Context, in *GetMemberStatusReq, opts ...grpc.CallOption) (*GetMemberStatusRes, error) {
	out := new(GetMemberStatusRes)
	err := c.cc.Invoke(ctx, "/space.v1.Space/GetMemberStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceServer is the server API for Space service.
// All implementations should embed UnimplementedSpaceServer
// for forward compatibility
type SpaceServer interface {
	// 查询指定社区下所有SpaceGroup和其下Space
	ListSpaceAndGroup(context.Context, *ListSpaceAndGroupReq) (*ListSpaceAndGroupRes, error)
	//  // 根据用户uid，获取到用户的所有空间
	//  rpc ListSpaceGuidsByUid(ListSpaceGuidsByUidReq) returns (ListSpaceGuidsByUidRes);
	// 获取社区公开的space，社区跳转默认首页只允许公开的space
	ListPublicSpace(context.Context, *ListPublicSpaceReq) (*ListPublicSpaceRes, error)
	// 创建空间分组
	CreateSpaceGroup(context.Context, *CreateSpaceGroupReq) (*CreateSpaceGroupRes, error)
	// 分组基本信息
	SpaceGroupInfo(context.Context, *SpaceGroupInfoReq) (*SpaceGroupInfoRes, error)
	// 删除空间分组
	DeleteSpaceGroup(context.Context, *DeleteSpaceGroupReq) (*DeleteSpaceGroupRes, error)
	// 修改空间分组树形
	UpdateSpaceGroup(context.Context, *UpdateSpaceGroupReq) (*UpdateSpaceGroupRes, error)
	// 修改顺序
	ChangeSpaceGroupSort(context.Context, *ChangeSpaceGroupSortReq) (*ChangeSpaceGroupSortRes, error)
	// 查看空间分组成员列表
	SpaceGroupMemberList(context.Context, *SpaceGroupMemberListReq) (*SpaceGroupMemberListRes, error)
	// 添加空间分组成员
	AddSpaceGroupMember(context.Context, *AddSpaceGroupMemberReq) (*AddSpaceGroupMemberRes, error)
	// 删除空间分组成员
	DeleteSpaceGroupMember(context.Context, *DeleteSpaceGroupMemberReq) (*DeleteSpaceGroupMemberRes, error)
	// 搜索空间分组成员
	SearchSpaceGroupMember(context.Context, *SearchSpaceGroupMemberReq) (*SearchSpaceGroupMemberRes, error)
	// 创建空间
	CreateSpace(context.Context, *CreateSpaceReq) (*CreateSpaceRes, error)
	// 空间基本信息
	SpaceInfo(context.Context, *SpaceInfoReq) (*SpaceInfoRes, error)
	// 根据guids查询空间列表
	ListSpaceInfo(context.Context, *ListSpaceInfoReq) (*ListSpaceInfoRes, error)
	// 删除空间
	DeleteSpace(context.Context, *DeleteSpaceReq) (*DeleteSpaceRes, error)
	// 修改空间
	UpdateSpace(context.Context, *UpdateSpaceReq) (*UpdateSpaceRes, error)
	// 修改顺序
	ChangeSpaceSort(context.Context, *ChangeSpaceSortReq) (*ChangeSpaceSortRes, error)
	// Space Member List
	SpaceMemberList(context.Context, *SpaceMemberListReq) (*SpaceMemberListRes, error)
	// AddSpaceMember
	AddSpaceMember(context.Context, *AddSpaceMemberReq) (*AddSpaceMemberRes, error)
	// DeleteSpaceMember
	DeleteSpaceMember(context.Context, *DeleteSpaceMemberReq) (*DeleteSpaceMemberRes, error)
	// 用户主动退出空间
	QuitSpaceMember(context.Context, *QuitSpaceMemberReq) (*QuitSpaceMemberRes, error)
	// SearchSpaceMember
	SearchSpaceMember(context.Context, *SearchSpaceMemberReq) (*SearchSpaceMemberRes, error)
	// 申请加入空间，只有是private空间，需要这个操作
	AuditApplySpaceMember(context.Context, *AuditApplySpaceMemberReq) (*AuditApplySpaceMemberRes, error)
	// 空间的审核列表，管理者使用
	AuditListSpaceMember(context.Context, *AuditListSpaceMemberReq) (*AuditListSpaceMemberRes, error)
	// 通过用户，管理者使用
	AuditPassSpaceMember(context.Context, *AuditPassSpaceMemberReq) (*AuditPassSpaceMemberRes, error)
	// 拒绝原因，并且可以，禁止在申请，管理者使用
	AuditRejectSpaceMember(context.Context, *AuditRejectSpaceMemberReq) (*AuditRejectSpaceMemberRes, error)
	// 申请加入空间，只有是private空间，需要这个操作
	AuditMapByIds(context.Context, *AuditMapByIdsReq) (*AuditMapByIdsRes, error)
	// 获取某个用户的空间/分组权限
	GetSpacePermissionByUid(context.Context, *GetSpacePermissionByUidReq) (*GetSpacePermissionByUidRes, error)
	// 统计信息
	TotalInfo(context.Context, *TotalInfoReq) (*TotalInfoRes, error)
	// Emoji List
	EmojiList(context.Context, *EmojiListReq) (*EmojiListRes, error)
	// 生成空间访问授权订单
	GenSpaceAccessOrder(context.Context, *GenSpaceAccessOrderReq) (*GenSpaceAccessOrderRes, error)
	// 查询是否是指定空间成员
	GetMemberStatus(context.Context, *GetMemberStatusReq) (*GetMemberStatusRes, error)
}

// UnimplementedSpaceServer should be embedded to have forward compatible implementations.
type UnimplementedSpaceServer struct {
}

func (UnimplementedSpaceServer) ListSpaceAndGroup(context.Context, *ListSpaceAndGroupReq) (*ListSpaceAndGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaceAndGroup not implemented")
}
func (UnimplementedSpaceServer) ListPublicSpace(context.Context, *ListPublicSpaceReq) (*ListPublicSpaceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicSpace not implemented")
}
func (UnimplementedSpaceServer) CreateSpaceGroup(context.Context, *CreateSpaceGroupReq) (*CreateSpaceGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpaceGroup not implemented")
}
func (UnimplementedSpaceServer) SpaceGroupInfo(context.Context, *SpaceGroupInfoReq) (*SpaceGroupInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceGroupInfo not implemented")
}
func (UnimplementedSpaceServer) DeleteSpaceGroup(context.Context, *DeleteSpaceGroupReq) (*DeleteSpaceGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpaceGroup not implemented")
}
func (UnimplementedSpaceServer) UpdateSpaceGroup(context.Context, *UpdateSpaceGroupReq) (*UpdateSpaceGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpaceGroup not implemented")
}
func (UnimplementedSpaceServer) ChangeSpaceGroupSort(context.Context, *ChangeSpaceGroupSortReq) (*ChangeSpaceGroupSortRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSpaceGroupSort not implemented")
}
func (UnimplementedSpaceServer) SpaceGroupMemberList(context.Context, *SpaceGroupMemberListReq) (*SpaceGroupMemberListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceGroupMemberList not implemented")
}
func (UnimplementedSpaceServer) AddSpaceGroupMember(context.Context, *AddSpaceGroupMemberReq) (*AddSpaceGroupMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpaceGroupMember not implemented")
}
func (UnimplementedSpaceServer) DeleteSpaceGroupMember(context.Context, *DeleteSpaceGroupMemberReq) (*DeleteSpaceGroupMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpaceGroupMember not implemented")
}
func (UnimplementedSpaceServer) SearchSpaceGroupMember(context.Context, *SearchSpaceGroupMemberReq) (*SearchSpaceGroupMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSpaceGroupMember not implemented")
}
func (UnimplementedSpaceServer) CreateSpace(context.Context, *CreateSpaceReq) (*CreateSpaceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedSpaceServer) SpaceInfo(context.Context, *SpaceInfoReq) (*SpaceInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceInfo not implemented")
}
func (UnimplementedSpaceServer) ListSpaceInfo(context.Context, *ListSpaceInfoReq) (*ListSpaceInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaceInfo not implemented")
}
func (UnimplementedSpaceServer) DeleteSpace(context.Context, *DeleteSpaceReq) (*DeleteSpaceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedSpaceServer) UpdateSpace(context.Context, *UpdateSpaceReq) (*UpdateSpaceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedSpaceServer) ChangeSpaceSort(context.Context, *ChangeSpaceSortReq) (*ChangeSpaceSortRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSpaceSort not implemented")
}
func (UnimplementedSpaceServer) SpaceMemberList(context.Context, *SpaceMemberListReq) (*SpaceMemberListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpaceMemberList not implemented")
}
func (UnimplementedSpaceServer) AddSpaceMember(context.Context, *AddSpaceMemberReq) (*AddSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSpaceMember not implemented")
}
func (UnimplementedSpaceServer) DeleteSpaceMember(context.Context, *DeleteSpaceMemberReq) (*DeleteSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpaceMember not implemented")
}
func (UnimplementedSpaceServer) QuitSpaceMember(context.Context, *QuitSpaceMemberReq) (*QuitSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitSpaceMember not implemented")
}
func (UnimplementedSpaceServer) SearchSpaceMember(context.Context, *SearchSpaceMemberReq) (*SearchSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSpaceMember not implemented")
}
func (UnimplementedSpaceServer) AuditApplySpaceMember(context.Context, *AuditApplySpaceMemberReq) (*AuditApplySpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditApplySpaceMember not implemented")
}
func (UnimplementedSpaceServer) AuditListSpaceMember(context.Context, *AuditListSpaceMemberReq) (*AuditListSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditListSpaceMember not implemented")
}
func (UnimplementedSpaceServer) AuditPassSpaceMember(context.Context, *AuditPassSpaceMemberReq) (*AuditPassSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditPassSpaceMember not implemented")
}
func (UnimplementedSpaceServer) AuditRejectSpaceMember(context.Context, *AuditRejectSpaceMemberReq) (*AuditRejectSpaceMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditRejectSpaceMember not implemented")
}
func (UnimplementedSpaceServer) AuditMapByIds(context.Context, *AuditMapByIdsReq) (*AuditMapByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditMapByIds not implemented")
}
func (UnimplementedSpaceServer) GetSpacePermissionByUid(context.Context, *GetSpacePermissionByUidReq) (*GetSpacePermissionByUidRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpacePermissionByUid not implemented")
}
func (UnimplementedSpaceServer) TotalInfo(context.Context, *TotalInfoReq) (*TotalInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalInfo not implemented")
}
func (UnimplementedSpaceServer) EmojiList(context.Context, *EmojiListReq) (*EmojiListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmojiList not implemented")
}
func (UnimplementedSpaceServer) GenSpaceAccessOrder(context.Context, *GenSpaceAccessOrderReq) (*GenSpaceAccessOrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSpaceAccessOrder not implemented")
}
func (UnimplementedSpaceServer) GetMemberStatus(context.Context, *GetMemberStatusReq) (*GetMemberStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberStatus not implemented")
}

// UnsafeSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpaceServer will
// result in compilation errors.
type UnsafeSpaceServer interface {
	mustEmbedUnimplementedSpaceServer()
}

func RegisterSpaceServer(s grpc.ServiceRegistrar, srv SpaceServer) {
	s.RegisterService(&Space_ServiceDesc, srv)
}

func _Space_ListSpaceAndGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpaceAndGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ListSpaceAndGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/ListSpaceAndGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ListSpaceAndGroup(ctx, req.(*ListSpaceAndGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ListPublicSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ListPublicSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/ListPublicSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ListPublicSpace(ctx, req.(*ListPublicSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CreateSpaceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreateSpaceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/CreateSpaceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreateSpaceGroup(ctx, req.(*CreateSpaceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SpaceGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SpaceGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/SpaceGroupInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SpaceGroupInfo(ctx, req.(*SpaceGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteSpaceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteSpaceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/DeleteSpaceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteSpaceGroup(ctx, req.(*DeleteSpaceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_UpdateSpaceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).UpdateSpaceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/UpdateSpaceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).UpdateSpaceGroup(ctx, req.(*UpdateSpaceGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ChangeSpaceGroupSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSpaceGroupSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ChangeSpaceGroupSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/ChangeSpaceGroupSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ChangeSpaceGroupSort(ctx, req.(*ChangeSpaceGroupSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SpaceGroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceGroupMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SpaceGroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/SpaceGroupMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SpaceGroupMemberList(ctx, req.(*SpaceGroupMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AddSpaceGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpaceGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AddSpaceGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AddSpaceGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AddSpaceGroupMember(ctx, req.(*AddSpaceGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteSpaceGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteSpaceGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/DeleteSpaceGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteSpaceGroupMember(ctx, req.(*DeleteSpaceGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SearchSpaceGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSpaceGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SearchSpaceGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/SearchSpaceGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SearchSpaceGroupMember(ctx, req.(*SearchSpaceGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).CreateSpace(ctx, req.(*CreateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/SpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SpaceInfo(ctx, req.(*SpaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ListSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpaceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ListSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/ListSpaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ListSpaceInfo(ctx, req.(*ListSpaceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteSpace(ctx, req.(*DeleteSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/UpdateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).UpdateSpace(ctx, req.(*UpdateSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_ChangeSpaceSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSpaceSortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).ChangeSpaceSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/ChangeSpaceSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).ChangeSpaceSort(ctx, req.(*ChangeSpaceSortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SpaceMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpaceMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SpaceMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/SpaceMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SpaceMemberList(ctx, req.(*SpaceMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AddSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AddSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AddSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AddSpaceMember(ctx, req.(*AddSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_DeleteSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).DeleteSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/DeleteSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).DeleteSpaceMember(ctx, req.(*DeleteSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_QuitSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).QuitSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/QuitSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).QuitSpaceMember(ctx, req.(*QuitSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_SearchSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).SearchSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/SearchSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).SearchSpaceMember(ctx, req.(*SearchSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AuditApplySpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditApplySpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AuditApplySpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AuditApplySpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AuditApplySpaceMember(ctx, req.(*AuditApplySpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AuditListSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditListSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AuditListSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AuditListSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AuditListSpaceMember(ctx, req.(*AuditListSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AuditPassSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditPassSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AuditPassSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AuditPassSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AuditPassSpaceMember(ctx, req.(*AuditPassSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AuditRejectSpaceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRejectSpaceMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AuditRejectSpaceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AuditRejectSpaceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AuditRejectSpaceMember(ctx, req.(*AuditRejectSpaceMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_AuditMapByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditMapByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).AuditMapByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/AuditMapByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).AuditMapByIds(ctx, req.(*AuditMapByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetSpacePermissionByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpacePermissionByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetSpacePermissionByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/GetSpacePermissionByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetSpacePermissionByUid(ctx, req.(*GetSpacePermissionByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_TotalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).TotalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/TotalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).TotalInfo(ctx, req.(*TotalInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_EmojiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmojiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).EmojiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/EmojiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).EmojiList(ctx, req.(*EmojiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GenSpaceAccessOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSpaceAccessOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GenSpaceAccessOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/GenSpaceAccessOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GenSpaceAccessOrder(ctx, req.(*GenSpaceAccessOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Space_GetMemberStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServer).GetMemberStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/space.v1.Space/GetMemberStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServer).GetMemberStatus(ctx, req.(*GetMemberStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Space_ServiceDesc is the grpc.ServiceDesc for Space service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Space_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "space.v1.Space",
	HandlerType: (*SpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSpaceAndGroup",
			Handler:    _Space_ListSpaceAndGroup_Handler,
		},
		{
			MethodName: "ListPublicSpace",
			Handler:    _Space_ListPublicSpace_Handler,
		},
		{
			MethodName: "CreateSpaceGroup",
			Handler:    _Space_CreateSpaceGroup_Handler,
		},
		{
			MethodName: "SpaceGroupInfo",
			Handler:    _Space_SpaceGroupInfo_Handler,
		},
		{
			MethodName: "DeleteSpaceGroup",
			Handler:    _Space_DeleteSpaceGroup_Handler,
		},
		{
			MethodName: "UpdateSpaceGroup",
			Handler:    _Space_UpdateSpaceGroup_Handler,
		},
		{
			MethodName: "ChangeSpaceGroupSort",
			Handler:    _Space_ChangeSpaceGroupSort_Handler,
		},
		{
			MethodName: "SpaceGroupMemberList",
			Handler:    _Space_SpaceGroupMemberList_Handler,
		},
		{
			MethodName: "AddSpaceGroupMember",
			Handler:    _Space_AddSpaceGroupMember_Handler,
		},
		{
			MethodName: "DeleteSpaceGroupMember",
			Handler:    _Space_DeleteSpaceGroupMember_Handler,
		},
		{
			MethodName: "SearchSpaceGroupMember",
			Handler:    _Space_SearchSpaceGroupMember_Handler,
		},
		{
			MethodName: "CreateSpace",
			Handler:    _Space_CreateSpace_Handler,
		},
		{
			MethodName: "SpaceInfo",
			Handler:    _Space_SpaceInfo_Handler,
		},
		{
			MethodName: "ListSpaceInfo",
			Handler:    _Space_ListSpaceInfo_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _Space_DeleteSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _Space_UpdateSpace_Handler,
		},
		{
			MethodName: "ChangeSpaceSort",
			Handler:    _Space_ChangeSpaceSort_Handler,
		},
		{
			MethodName: "SpaceMemberList",
			Handler:    _Space_SpaceMemberList_Handler,
		},
		{
			MethodName: "AddSpaceMember",
			Handler:    _Space_AddSpaceMember_Handler,
		},
		{
			MethodName: "DeleteSpaceMember",
			Handler:    _Space_DeleteSpaceMember_Handler,
		},
		{
			MethodName: "QuitSpaceMember",
			Handler:    _Space_QuitSpaceMember_Handler,
		},
		{
			MethodName: "SearchSpaceMember",
			Handler:    _Space_SearchSpaceMember_Handler,
		},
		{
			MethodName: "AuditApplySpaceMember",
			Handler:    _Space_AuditApplySpaceMember_Handler,
		},
		{
			MethodName: "AuditListSpaceMember",
			Handler:    _Space_AuditListSpaceMember_Handler,
		},
		{
			MethodName: "AuditPassSpaceMember",
			Handler:    _Space_AuditPassSpaceMember_Handler,
		},
		{
			MethodName: "AuditRejectSpaceMember",
			Handler:    _Space_AuditRejectSpaceMember_Handler,
		},
		{
			MethodName: "AuditMapByIds",
			Handler:    _Space_AuditMapByIds_Handler,
		},
		{
			MethodName: "GetSpacePermissionByUid",
			Handler:    _Space_GetSpacePermissionByUid_Handler,
		},
		{
			MethodName: "TotalInfo",
			Handler:    _Space_TotalInfo_Handler,
		},
		{
			MethodName: "EmojiList",
			Handler:    _Space_EmojiList_Handler,
		},
		{
			MethodName: "GenSpaceAccessOrder",
			Handler:    _Space_GenSpaceAccessOrder_Handler,
		},
		{
			MethodName: "GetMemberStatus",
			Handler:    _Space_GetMemberStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "space/v1/space.proto",
}
