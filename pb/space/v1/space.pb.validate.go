// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: space/v1/space.proto

package spacev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.AUDIT_STATUS(0)
)

// Validate checks the field values on MemberStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberStatusMultiError, or
// nil if none found.
func (m *MemberStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceGuid

	// no validation rules for Uid

	// no validation rules for IsMember

	// no validation rules for IsAllowManage

	if len(errors) > 0 {
		return MemberStatusMultiError(errors)
	}

	return nil
}

// MemberStatusMultiError is an error wrapping multiple validation errors
// returned by MemberStatus.ValidateAll() if the designated constraints aren't met.
type MemberStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberStatusMultiError) AllErrors() []error { return m }

// MemberStatusValidationError is the validation error returned by
// MemberStatus.Validate if the designated constraints aren't met.
type MemberStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberStatusValidationError) ErrorName() string { return "MemberStatusValidationError" }

// Error satisfies the builtin error interface
func (e MemberStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberStatusValidationError{}

// Validate checks the field values on TreeSpaceGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TreeSpaceGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TreeSpaceGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TreeSpaceGroupMultiError,
// or nil if none found.
func (m *TreeSpaceGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *TreeSpaceGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for Visibility

	// no validation rules for IsAllowSet

	// no validation rules for IsAllowCreateSpace

	if len(errors) > 0 {
		return TreeSpaceGroupMultiError(errors)
	}

	return nil
}

// TreeSpaceGroupMultiError is an error wrapping multiple validation errors
// returned by TreeSpaceGroup.ValidateAll() if the designated constraints
// aren't met.
type TreeSpaceGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TreeSpaceGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TreeSpaceGroupMultiError) AllErrors() []error { return m }

// TreeSpaceGroupValidationError is the validation error returned by
// TreeSpaceGroup.Validate if the designated constraints aren't met.
type TreeSpaceGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TreeSpaceGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TreeSpaceGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TreeSpaceGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TreeSpaceGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TreeSpaceGroupValidationError) ErrorName() string { return "TreeSpaceGroupValidationError" }

// Error satisfies the builtin error interface
func (e TreeSpaceGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTreeSpaceGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TreeSpaceGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TreeSpaceGroupValidationError{}

// Validate checks the field values on TreeSpace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TreeSpace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TreeSpace with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TreeSpaceMultiError, or nil
// if none found.
func (m *TreeSpace) ValidateAll() error {
	return m.validate(true)
}

func (m *TreeSpace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for SpaceGroupGuid

	// no validation rules for Icon

	// no validation rules for SpaceType

	// no validation rules for SpaceLayout

	// no validation rules for Visibility

	// no validation rules for MemberCnt

	for idx, item := range m.GetSpaceOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TreeSpaceValidationError{
						field:  fmt.Sprintf("SpaceOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TreeSpaceValidationError{
						field:  fmt.Sprintf("SpaceOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TreeSpaceValidationError{
					field:  fmt.Sprintf("SpaceOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ChargeType

	// no validation rules for OriginPrice

	// no validation rules for Price

	// no validation rules for Desc

	// no validation rules for HeadImage

	// no validation rules for Cover

	// no validation rules for IsAllowSet

	// no validation rules for Access

	// no validation rules for Link

	for idx, item := range m.GetEmojiList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TreeSpaceValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TreeSpaceValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TreeSpaceValidationError{
					field:  fmt.Sprintf("EmojiList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TreeSpaceMultiError(errors)
	}

	return nil
}

// TreeSpaceMultiError is an error wrapping multiple validation errors returned
// by TreeSpace.ValidateAll() if the designated constraints aren't met.
type TreeSpaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TreeSpaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TreeSpaceMultiError) AllErrors() []error { return m }

// TreeSpaceValidationError is the validation error returned by
// TreeSpace.Validate if the designated constraints aren't met.
type TreeSpaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TreeSpaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TreeSpaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TreeSpaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TreeSpaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TreeSpaceValidationError) ErrorName() string { return "TreeSpaceValidationError" }

// Error satisfies the builtin error interface
func (e TreeSpaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTreeSpace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TreeSpaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TreeSpaceValidationError{}

// Validate checks the field values on ListSpaceAndGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceAndGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceAndGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceAndGroupReqMultiError, or nil if none found.
func (m *ListSpaceAndGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceAndGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if len(errors) > 0 {
		return ListSpaceAndGroupReqMultiError(errors)
	}

	return nil
}

// ListSpaceAndGroupReqMultiError is an error wrapping multiple validation
// errors returned by ListSpaceAndGroupReq.ValidateAll() if the designated
// constraints aren't met.
type ListSpaceAndGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceAndGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceAndGroupReqMultiError) AllErrors() []error { return m }

// ListSpaceAndGroupReqValidationError is the validation error returned by
// ListSpaceAndGroupReq.Validate if the designated constraints aren't met.
type ListSpaceAndGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceAndGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceAndGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceAndGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceAndGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceAndGroupReqValidationError) ErrorName() string {
	return "ListSpaceAndGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSpaceAndGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceAndGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceAndGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceAndGroupReqValidationError{}

// Validate checks the field values on ListSpaceAndGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceAndGroupRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceAndGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceAndGroupResMultiError, or nil if none found.
func (m *ListSpaceAndGroupRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceAndGroupRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpaceGroupList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpaceAndGroupResValidationError{
						field:  fmt.Sprintf("SpaceGroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpaceAndGroupResValidationError{
						field:  fmt.Sprintf("SpaceGroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpaceAndGroupResValidationError{
					field:  fmt.Sprintf("SpaceGroupList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpaceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpaceAndGroupResValidationError{
						field:  fmt.Sprintf("SpaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpaceAndGroupResValidationError{
						field:  fmt.Sprintf("SpaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpaceAndGroupResValidationError{
					field:  fmt.Sprintf("SpaceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSpaceAndGroupResMultiError(errors)
	}

	return nil
}

// ListSpaceAndGroupResMultiError is an error wrapping multiple validation
// errors returned by ListSpaceAndGroupRes.ValidateAll() if the designated
// constraints aren't met.
type ListSpaceAndGroupResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceAndGroupResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceAndGroupResMultiError) AllErrors() []error { return m }

// ListSpaceAndGroupResValidationError is the validation error returned by
// ListSpaceAndGroupRes.Validate if the designated constraints aren't met.
type ListSpaceAndGroupResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceAndGroupResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceAndGroupResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceAndGroupResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceAndGroupResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceAndGroupResValidationError) ErrorName() string {
	return "ListSpaceAndGroupResValidationError"
}

// Error satisfies the builtin error interface
func (e ListSpaceAndGroupResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceAndGroupRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceAndGroupResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceAndGroupResValidationError{}

// Validate checks the field values on GetMemberStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemberStatusReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberStatusReqMultiError, or nil if none found.
func (m *GetMemberStatusReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberStatusReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := GetMemberStatusReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSpaceGuids()) < 1 {
		err := GetMemberStatusReqValidationError{
			field:  "SpaceGuids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMemberStatusReqMultiError(errors)
	}

	return nil
}

// GetMemberStatusReqMultiError is an error wrapping multiple validation errors
// returned by GetMemberStatusReq.ValidateAll() if the designated constraints
// aren't met.
type GetMemberStatusReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberStatusReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberStatusReqMultiError) AllErrors() []error { return m }

// GetMemberStatusReqValidationError is the validation error returned by
// GetMemberStatusReq.Validate if the designated constraints aren't met.
type GetMemberStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberStatusReqValidationError) ErrorName() string {
	return "GetMemberStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberStatusReqValidationError{}

// Validate checks the field values on GetMemberStatusRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemberStatusRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberStatusRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberStatusResMultiError, or nil if none found.
func (m *GetMemberStatusRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberStatusRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMemberStatusResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMemberStatusResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMemberStatusResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMemberStatusResMultiError(errors)
	}

	return nil
}

// GetMemberStatusResMultiError is an error wrapping multiple validation errors
// returned by GetMemberStatusRes.ValidateAll() if the designated constraints
// aren't met.
type GetMemberStatusResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberStatusResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberStatusResMultiError) AllErrors() []error { return m }

// GetMemberStatusResValidationError is the validation error returned by
// GetMemberStatusRes.Validate if the designated constraints aren't met.
type GetMemberStatusResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberStatusResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberStatusResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberStatusResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberStatusResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberStatusResValidationError) ErrorName() string {
	return "GetMemberStatusResValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberStatusResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberStatusRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberStatusResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberStatusResValidationError{}

// Validate checks the field values on SpaceGroupInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpaceGroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceGroupInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpaceGroupInfoMultiError,
// or nil if none found.
func (m *SpaceGroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceGroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceGroupInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceGroupInfoValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceGroupInfoValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Visibility

	// no validation rules for IsAllowSet

	// no validation rules for IsAllowCreateSpace

	if len(errors) > 0 {
		return SpaceGroupInfoMultiError(errors)
	}

	return nil
}

// SpaceGroupInfoMultiError is an error wrapping multiple validation errors
// returned by SpaceGroupInfo.ValidateAll() if the designated constraints
// aren't met.
type SpaceGroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceGroupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceGroupInfoMultiError) AllErrors() []error { return m }

// SpaceGroupInfoValidationError is the validation error returned by
// SpaceGroupInfo.Validate if the designated constraints aren't met.
type SpaceGroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceGroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceGroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceGroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceGroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceGroupInfoValidationError) ErrorName() string { return "SpaceGroupInfoValidationError" }

// Error satisfies the builtin error interface
func (e SpaceGroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceGroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceGroupInfoValidationError{}

// Validate checks the field values on SpaceInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpaceInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpaceInfoReqMultiError, or
// nil if none found.
func (m *SpaceInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := SpaceInfoReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SpaceInfoReqMultiError(errors)
	}

	return nil
}

// SpaceInfoReqMultiError is an error wrapping multiple validation errors
// returned by SpaceInfoReq.ValidateAll() if the designated constraints aren't met.
type SpaceInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceInfoReqMultiError) AllErrors() []error { return m }

// SpaceInfoReqValidationError is the validation error returned by
// SpaceInfoReq.Validate if the designated constraints aren't met.
type SpaceInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceInfoReqValidationError) ErrorName() string { return "SpaceInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e SpaceInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceInfoReqValidationError{}

// Validate checks the field values on SpaceInfoRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpaceInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceInfoRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpaceInfoResMultiError, or
// nil if none found.
func (m *SpaceInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpaceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceInfoResValidationError{
					field:  "SpaceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceInfoResValidationError{
					field:  "SpaceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpaceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceInfoResValidationError{
				field:  "SpaceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceInfoResMultiError(errors)
	}

	return nil
}

// SpaceInfoResMultiError is an error wrapping multiple validation errors
// returned by SpaceInfoRes.ValidateAll() if the designated constraints aren't met.
type SpaceInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceInfoResMultiError) AllErrors() []error { return m }

// SpaceInfoResValidationError is the validation error returned by
// SpaceInfoRes.Validate if the designated constraints aren't met.
type SpaceInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceInfoResValidationError) ErrorName() string { return "SpaceInfoResValidationError" }

// Error satisfies the builtin error interface
func (e SpaceInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceInfoResValidationError{}

// Validate checks the field values on ListSpaceInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceInfoReqMultiError, or nil if none found.
func (m *ListSpaceInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if len(errors) > 0 {
		return ListSpaceInfoReqMultiError(errors)
	}

	return nil
}

// ListSpaceInfoReqMultiError is an error wrapping multiple validation errors
// returned by ListSpaceInfoReq.ValidateAll() if the designated constraints
// aren't met.
type ListSpaceInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceInfoReqMultiError) AllErrors() []error { return m }

// ListSpaceInfoReqValidationError is the validation error returned by
// ListSpaceInfoReq.Validate if the designated constraints aren't met.
type ListSpaceInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceInfoReqValidationError) ErrorName() string { return "ListSpaceInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSpaceInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceInfoReqValidationError{}

// Validate checks the field values on ListSpaceInfoRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceInfoResMultiError, or nil if none found.
func (m *ListSpaceInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpaceInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpaceInfoResValidationError{
						field:  fmt.Sprintf("SpaceInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpaceInfoResValidationError{
						field:  fmt.Sprintf("SpaceInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpaceInfoResValidationError{
					field:  fmt.Sprintf("SpaceInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSpaceInfoResMultiError(errors)
	}

	return nil
}

// ListSpaceInfoResMultiError is an error wrapping multiple validation errors
// returned by ListSpaceInfoRes.ValidateAll() if the designated constraints
// aren't met.
type ListSpaceInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceInfoResMultiError) AllErrors() []error { return m }

// ListSpaceInfoResValidationError is the validation error returned by
// ListSpaceInfoRes.Validate if the designated constraints aren't met.
type ListSpaceInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceInfoResValidationError) ErrorName() string { return "ListSpaceInfoResValidationError" }

// Error satisfies the builtin error interface
func (e ListSpaceInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceInfoResValidationError{}

// Validate checks the field values on ListSpaceGuidsByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceGuidsByUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceGuidsByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceGuidsByUidReqMultiError, or nil if none found.
func (m *ListSpaceGuidsByUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceGuidsByUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListSpaceGuidsByUidReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSpaceGuidsByUidReqMultiError(errors)
	}

	return nil
}

// ListSpaceGuidsByUidReqMultiError is an error wrapping multiple validation
// errors returned by ListSpaceGuidsByUidReq.ValidateAll() if the designated
// constraints aren't met.
type ListSpaceGuidsByUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceGuidsByUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceGuidsByUidReqMultiError) AllErrors() []error { return m }

// ListSpaceGuidsByUidReqValidationError is the validation error returned by
// ListSpaceGuidsByUidReq.Validate if the designated constraints aren't met.
type ListSpaceGuidsByUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceGuidsByUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceGuidsByUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceGuidsByUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceGuidsByUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceGuidsByUidReqValidationError) ErrorName() string {
	return "ListSpaceGuidsByUidReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSpaceGuidsByUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceGuidsByUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceGuidsByUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceGuidsByUidReqValidationError{}

// Validate checks the field values on ListSpaceGuidsByUidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSpaceGuidsByUidRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpaceGuidsByUidRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpaceGuidsByUidResMultiError, or nil if none found.
func (m *ListSpaceGuidsByUidRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpaceGuidsByUidRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSpaceGuidsByUidResMultiError(errors)
	}

	return nil
}

// ListSpaceGuidsByUidResMultiError is an error wrapping multiple validation
// errors returned by ListSpaceGuidsByUidRes.ValidateAll() if the designated
// constraints aren't met.
type ListSpaceGuidsByUidResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpaceGuidsByUidResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpaceGuidsByUidResMultiError) AllErrors() []error { return m }

// ListSpaceGuidsByUidResValidationError is the validation error returned by
// ListSpaceGuidsByUidRes.Validate if the designated constraints aren't met.
type ListSpaceGuidsByUidResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpaceGuidsByUidResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpaceGuidsByUidResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpaceGuidsByUidResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpaceGuidsByUidResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpaceGuidsByUidResValidationError) ErrorName() string {
	return "ListSpaceGuidsByUidResValidationError"
}

// Error satisfies the builtin error interface
func (e ListSpaceGuidsByUidResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpaceGuidsByUidRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpaceGuidsByUidResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpaceGuidsByUidResValidationError{}

// Validate checks the field values on SimpleSpaceInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SimpleSpaceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimpleSpaceInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SimpleSpaceInfoMultiError, or nil if none found.
func (m *SimpleSpaceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SimpleSpaceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceGuid

	// no validation rules for Name

	if len(errors) > 0 {
		return SimpleSpaceInfoMultiError(errors)
	}

	return nil
}

// SimpleSpaceInfoMultiError is an error wrapping multiple validation errors
// returned by SimpleSpaceInfo.ValidateAll() if the designated constraints
// aren't met.
type SimpleSpaceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimpleSpaceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimpleSpaceInfoMultiError) AllErrors() []error { return m }

// SimpleSpaceInfoValidationError is the validation error returned by
// SimpleSpaceInfo.Validate if the designated constraints aren't met.
type SimpleSpaceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimpleSpaceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimpleSpaceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimpleSpaceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimpleSpaceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimpleSpaceInfoValidationError) ErrorName() string { return "SimpleSpaceInfoValidationError" }

// Error satisfies the builtin error interface
func (e SimpleSpaceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimpleSpaceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimpleSpaceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimpleSpaceInfoValidationError{}

// Validate checks the field values on ListPublicSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicSpaceReqMultiError, or nil if none found.
func (m *ListPublicSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return ListPublicSpaceReqMultiError(errors)
	}

	return nil
}

// ListPublicSpaceReqMultiError is an error wrapping multiple validation errors
// returned by ListPublicSpaceReq.ValidateAll() if the designated constraints
// aren't met.
type ListPublicSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicSpaceReqMultiError) AllErrors() []error { return m }

// ListPublicSpaceReqValidationError is the validation error returned by
// ListPublicSpaceReq.Validate if the designated constraints aren't met.
type ListPublicSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicSpaceReqValidationError) ErrorName() string {
	return "ListPublicSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicSpaceReqValidationError{}

// Validate checks the field values on ListPublicSpaceRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicSpaceRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicSpaceRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicSpaceResMultiError, or nil if none found.
func (m *ListPublicSpaceRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicSpaceRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSimpleSpaceInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicSpaceResValidationError{
						field:  fmt.Sprintf("SimpleSpaceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicSpaceResValidationError{
						field:  fmt.Sprintf("SimpleSpaceInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicSpaceResValidationError{
					field:  fmt.Sprintf("SimpleSpaceInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPublicSpaceResMultiError(errors)
	}

	return nil
}

// ListPublicSpaceResMultiError is an error wrapping multiple validation errors
// returned by ListPublicSpaceRes.ValidateAll() if the designated constraints
// aren't met.
type ListPublicSpaceResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicSpaceResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicSpaceResMultiError) AllErrors() []error { return m }

// ListPublicSpaceResValidationError is the validation error returned by
// ListPublicSpaceRes.Validate if the designated constraints aren't met.
type ListPublicSpaceResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicSpaceResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicSpaceResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicSpaceResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicSpaceResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicSpaceResValidationError) ErrorName() string {
	return "ListPublicSpaceResValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicSpaceResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicSpaceRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicSpaceResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicSpaceResValidationError{}

// Validate checks the field values on ListTreeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTreeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTreeReqMultiError, or
// nil if none found.
func (m *ListTreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if len(errors) > 0 {
		return ListTreeReqMultiError(errors)
	}

	return nil
}

// ListTreeReqMultiError is an error wrapping multiple validation errors
// returned by ListTreeReq.ValidateAll() if the designated constraints aren't met.
type ListTreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTreeReqMultiError) AllErrors() []error { return m }

// ListTreeReqValidationError is the validation error returned by
// ListTreeReq.Validate if the designated constraints aren't met.
type ListTreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTreeReqValidationError) ErrorName() string { return "ListTreeReqValidationError" }

// Error satisfies the builtin error interface
func (e ListTreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTreeReqValidationError{}

// Validate checks the field values on ListTreeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTreeRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTreeRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTreeResMultiError, or
// nil if none found.
func (m *ListTreeRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTreeRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTree() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTreeResValidationError{
						field:  fmt.Sprintf("Tree[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTreeResValidationError{
						field:  fmt.Sprintf("Tree[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTreeResValidationError{
					field:  fmt.Sprintf("Tree[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTreeResMultiError(errors)
	}

	return nil
}

// ListTreeResMultiError is an error wrapping multiple validation errors
// returned by ListTreeRes.ValidateAll() if the designated constraints aren't met.
type ListTreeResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTreeResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTreeResMultiError) AllErrors() []error { return m }

// ListTreeResValidationError is the validation error returned by
// ListTreeRes.Validate if the designated constraints aren't met.
type ListTreeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTreeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTreeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTreeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTreeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTreeResValidationError) ErrorName() string { return "ListTreeResValidationError" }

// Error satisfies the builtin error interface
func (e ListTreeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTreeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTreeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTreeResValidationError{}

// Validate checks the field values on TreeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TreeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TreeReqMultiError, or nil if none found.
func (m *TreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if len(errors) > 0 {
		return TreeReqMultiError(errors)
	}

	return nil
}

// TreeReqMultiError is an error wrapping multiple validation errors returned
// by TreeReq.ValidateAll() if the designated constraints aren't met.
type TreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TreeReqMultiError) AllErrors() []error { return m }

// TreeReqValidationError is the validation error returned by TreeReq.Validate
// if the designated constraints aren't met.
type TreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TreeReqValidationError) ErrorName() string { return "TreeReqValidationError" }

// Error satisfies the builtin error interface
func (e TreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TreeReqValidationError{}

// Validate checks the field values on TreeRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TreeRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TreeRes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TreeResMultiError, or nil if none found.
func (m *TreeRes) ValidateAll() error {
	return m.validate(true)
}

func (m *TreeRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTree() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TreeResValidationError{
						field:  fmt.Sprintf("Tree[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TreeResValidationError{
						field:  fmt.Sprintf("Tree[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TreeResValidationError{
					field:  fmt.Sprintf("Tree[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TreeResMultiError(errors)
	}

	return nil
}

// TreeResMultiError is an error wrapping multiple validation errors returned
// by TreeRes.ValidateAll() if the designated constraints aren't met.
type TreeResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TreeResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TreeResMultiError) AllErrors() []error { return m }

// TreeResValidationError is the validation error returned by TreeRes.Validate
// if the designated constraints aren't met.
type TreeResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TreeResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TreeResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TreeResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TreeResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TreeResValidationError) ErrorName() string { return "TreeResValidationError" }

// Error satisfies the builtin error interface
func (e TreeResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTreeRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TreeResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TreeResValidationError{}

// Validate checks the field values on AntSpaceGroupInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AntSpaceGroupInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AntSpaceGroupInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AntSpaceGroupInfoMultiError, or nil if none found.
func (m *AntSpaceGroupInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AntSpaceGroupInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for IconType

	// no validation rules for Icon

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AntSpaceGroupInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AntSpaceGroupInfoValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AntSpaceGroupInfoValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Visibility

	// no validation rules for IsAllowSet

	// no validation rules for IsAllowCreateSpace

	// no validation rules for Access

	if len(errors) > 0 {
		return AntSpaceGroupInfoMultiError(errors)
	}

	return nil
}

// AntSpaceGroupInfoMultiError is an error wrapping multiple validation errors
// returned by AntSpaceGroupInfo.ValidateAll() if the designated constraints
// aren't met.
type AntSpaceGroupInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AntSpaceGroupInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AntSpaceGroupInfoMultiError) AllErrors() []error { return m }

// AntSpaceGroupInfoValidationError is the validation error returned by
// AntSpaceGroupInfo.Validate if the designated constraints aren't met.
type AntSpaceGroupInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AntSpaceGroupInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AntSpaceGroupInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AntSpaceGroupInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AntSpaceGroupInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AntSpaceGroupInfoValidationError) ErrorName() string {
	return "AntSpaceGroupInfoValidationError"
}

// Error satisfies the builtin error interface
func (e AntSpaceGroupInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAntSpaceGroupInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AntSpaceGroupInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AntSpaceGroupInfoValidationError{}

// Validate checks the field values on AntSpaceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AntSpaceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AntSpaceInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AntSpaceInfoMultiError, or
// nil if none found.
func (m *AntSpaceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AntSpaceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for IconType

	// no validation rules for Icon

	// no validation rules for SpaceType

	// no validation rules for SpaceLayout

	// no validation rules for Visibility

	// no validation rules for IsAllowSet

	// no validation rules for Access

	for idx, item := range m.GetSpaceOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AntSpaceInfoValidationError{
						field:  fmt.Sprintf("SpaceOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AntSpaceInfoValidationError{
						field:  fmt.Sprintf("SpaceOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AntSpaceInfoValidationError{
					field:  fmt.Sprintf("SpaceOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HeadImage

	// no validation rules for Link

	if len(errors) > 0 {
		return AntSpaceInfoMultiError(errors)
	}

	return nil
}

// AntSpaceInfoMultiError is an error wrapping multiple validation errors
// returned by AntSpaceInfo.ValidateAll() if the designated constraints aren't met.
type AntSpaceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AntSpaceInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AntSpaceInfoMultiError) AllErrors() []error { return m }

// AntSpaceInfoValidationError is the validation error returned by
// AntSpaceInfo.Validate if the designated constraints aren't met.
type AntSpaceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AntSpaceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AntSpaceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AntSpaceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AntSpaceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AntSpaceInfoValidationError) ErrorName() string { return "AntSpaceInfoValidationError" }

// Error satisfies the builtin error interface
func (e AntSpaceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAntSpaceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AntSpaceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AntSpaceInfoValidationError{}

// Validate checks the field values on CreateSpaceGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceGroupReqMultiError, or nil if none found.
func (m *CreateSpaceGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := CreateSpaceGroupReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSpaceGroupReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IconType

	// no validation rules for Icon

	// no validation rules for Visibility

	// no validation rules for IsAllowReadMemberList

	if len(errors) > 0 {
		return CreateSpaceGroupReqMultiError(errors)
	}

	return nil
}

// CreateSpaceGroupReqMultiError is an error wrapping multiple validation
// errors returned by CreateSpaceGroupReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSpaceGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceGroupReqMultiError) AllErrors() []error { return m }

// CreateSpaceGroupReqValidationError is the validation error returned by
// CreateSpaceGroupReq.Validate if the designated constraints aren't met.
type CreateSpaceGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceGroupReqValidationError) ErrorName() string {
	return "CreateSpaceGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceGroupReqValidationError{}

// Validate checks the field values on CreateSpaceGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceGroupRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpaceGroupResMultiError, or nil if none found.
func (m *CreateSpaceGroupRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceGroupRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSpaceGroupResValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSpaceGroupResValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSpaceGroupResValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSpaceGroupResMultiError(errors)
	}

	return nil
}

// CreateSpaceGroupResMultiError is an error wrapping multiple validation
// errors returned by CreateSpaceGroupRes.ValidateAll() if the designated
// constraints aren't met.
type CreateSpaceGroupResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceGroupResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceGroupResMultiError) AllErrors() []error { return m }

// CreateSpaceGroupResValidationError is the validation error returned by
// CreateSpaceGroupRes.Validate if the designated constraints aren't met.
type CreateSpaceGroupResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceGroupResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceGroupResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceGroupResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceGroupResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceGroupResValidationError) ErrorName() string {
	return "CreateSpaceGroupResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpaceGroupResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceGroupRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceGroupResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceGroupResValidationError{}

// Validate checks the field values on SpaceGroupInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpaceGroupInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceGroupInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceGroupInfoReqMultiError, or nil if none found.
func (m *SpaceGroupInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceGroupInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := SpaceGroupInfoReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SpaceGroupInfoReqMultiError(errors)
	}

	return nil
}

// SpaceGroupInfoReqMultiError is an error wrapping multiple validation errors
// returned by SpaceGroupInfoReq.ValidateAll() if the designated constraints
// aren't met.
type SpaceGroupInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceGroupInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceGroupInfoReqMultiError) AllErrors() []error { return m }

// SpaceGroupInfoReqValidationError is the validation error returned by
// SpaceGroupInfoReq.Validate if the designated constraints aren't met.
type SpaceGroupInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceGroupInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceGroupInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceGroupInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceGroupInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceGroupInfoReqValidationError) ErrorName() string {
	return "SpaceGroupInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceGroupInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceGroupInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceGroupInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceGroupInfoReqValidationError{}

// Validate checks the field values on SpaceGroupInfoRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpaceGroupInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceGroupInfoRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceGroupInfoResMultiError, or nil if none found.
func (m *SpaceGroupInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceGroupInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	// no validation rules for IconType

	// no validation rules for Icon

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceGroupInfoResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceGroupInfoResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceGroupInfoResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Visibility

	// no validation rules for MemberCnt

	if len(errors) > 0 {
		return SpaceGroupInfoResMultiError(errors)
	}

	return nil
}

// SpaceGroupInfoResMultiError is an error wrapping multiple validation errors
// returned by SpaceGroupInfoRes.ValidateAll() if the designated constraints
// aren't met.
type SpaceGroupInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceGroupInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceGroupInfoResMultiError) AllErrors() []error { return m }

// SpaceGroupInfoResValidationError is the validation error returned by
// SpaceGroupInfoRes.Validate if the designated constraints aren't met.
type SpaceGroupInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceGroupInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceGroupInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceGroupInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceGroupInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceGroupInfoResValidationError) ErrorName() string {
	return "SpaceGroupInfoResValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceGroupInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceGroupInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceGroupInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceGroupInfoResValidationError{}

// Validate checks the field values on DeleteSpaceGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpaceGroupReqMultiError, or nil if none found.
func (m *DeleteSpaceGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := DeleteSpaceGroupReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := DeleteSpaceGroupReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSpaceGroupReqMultiError(errors)
	}

	return nil
}

// DeleteSpaceGroupReqMultiError is an error wrapping multiple validation
// errors returned by DeleteSpaceGroupReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteSpaceGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceGroupReqMultiError) AllErrors() []error { return m }

// DeleteSpaceGroupReqValidationError is the validation error returned by
// DeleteSpaceGroupReq.Validate if the designated constraints aren't met.
type DeleteSpaceGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceGroupReqValidationError) ErrorName() string {
	return "DeleteSpaceGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpaceGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceGroupReqValidationError{}

// Validate checks the field values on DeleteSpaceGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceGroupRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpaceGroupResMultiError, or nil if none found.
func (m *DeleteSpaceGroupRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceGroupRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSpaceGroupResMultiError(errors)
	}

	return nil
}

// DeleteSpaceGroupResMultiError is an error wrapping multiple validation
// errors returned by DeleteSpaceGroupRes.ValidateAll() if the designated
// constraints aren't met.
type DeleteSpaceGroupResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceGroupResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceGroupResMultiError) AllErrors() []error { return m }

// DeleteSpaceGroupResValidationError is the validation error returned by
// DeleteSpaceGroupRes.Validate if the designated constraints aren't met.
type DeleteSpaceGroupResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceGroupResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceGroupResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceGroupResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceGroupResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceGroupResValidationError) ErrorName() string {
	return "DeleteSpaceGroupResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpaceGroupResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceGroupRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceGroupResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceGroupResValidationError{}

// Validate checks the field values on UpdateSpaceGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpaceGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpaceGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpaceGroupReqMultiError, or nil if none found.
func (m *UpdateSpaceGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpaceGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := UpdateSpaceGroupReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := UpdateSpaceGroupReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for IconType

	// no validation rules for Icon

	// no validation rules for Visibility

	// no validation rules for IsAllowReadMemberList

	if len(errors) > 0 {
		return UpdateSpaceGroupReqMultiError(errors)
	}

	return nil
}

// UpdateSpaceGroupReqMultiError is an error wrapping multiple validation
// errors returned by UpdateSpaceGroupReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateSpaceGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpaceGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpaceGroupReqMultiError) AllErrors() []error { return m }

// UpdateSpaceGroupReqValidationError is the validation error returned by
// UpdateSpaceGroupReq.Validate if the designated constraints aren't met.
type UpdateSpaceGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpaceGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpaceGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpaceGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpaceGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpaceGroupReqValidationError) ErrorName() string {
	return "UpdateSpaceGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpaceGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpaceGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpaceGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpaceGroupReqValidationError{}

// Validate checks the field values on UpdateSpaceGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpaceGroupRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpaceGroupRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpaceGroupResMultiError, or nil if none found.
func (m *UpdateSpaceGroupRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpaceGroupRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSpaceGroupResMultiError(errors)
	}

	return nil
}

// UpdateSpaceGroupResMultiError is an error wrapping multiple validation
// errors returned by UpdateSpaceGroupRes.ValidateAll() if the designated
// constraints aren't met.
type UpdateSpaceGroupResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpaceGroupResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpaceGroupResMultiError) AllErrors() []error { return m }

// UpdateSpaceGroupResValidationError is the validation error returned by
// UpdateSpaceGroupRes.Validate if the designated constraints aren't met.
type UpdateSpaceGroupResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpaceGroupResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpaceGroupResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpaceGroupResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpaceGroupResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpaceGroupResValidationError) ErrorName() string {
	return "UpdateSpaceGroupResValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpaceGroupResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpaceGroupRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpaceGroupResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpaceGroupResValidationError{}

// Validate checks the field values on ChangeSpaceGroupSortReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSpaceGroupSortReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSpaceGroupSortReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSpaceGroupSortReqMultiError, or nil if none found.
func (m *ChangeSpaceGroupSortReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSpaceGroupSortReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := ChangeSpaceGroupSortReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := ChangeSpaceGroupSortReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TargetSpaceGroupGuid

	// no validation rules for DropPosition

	if len(errors) > 0 {
		return ChangeSpaceGroupSortReqMultiError(errors)
	}

	return nil
}

// ChangeSpaceGroupSortReqMultiError is an error wrapping multiple validation
// errors returned by ChangeSpaceGroupSortReq.ValidateAll() if the designated
// constraints aren't met.
type ChangeSpaceGroupSortReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSpaceGroupSortReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSpaceGroupSortReqMultiError) AllErrors() []error { return m }

// ChangeSpaceGroupSortReqValidationError is the validation error returned by
// ChangeSpaceGroupSortReq.Validate if the designated constraints aren't met.
type ChangeSpaceGroupSortReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSpaceGroupSortReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSpaceGroupSortReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSpaceGroupSortReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSpaceGroupSortReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSpaceGroupSortReqValidationError) ErrorName() string {
	return "ChangeSpaceGroupSortReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSpaceGroupSortReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSpaceGroupSortReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSpaceGroupSortReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSpaceGroupSortReqValidationError{}

// Validate checks the field values on ChangeSpaceGroupSortRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSpaceGroupSortRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSpaceGroupSortRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSpaceGroupSortResMultiError, or nil if none found.
func (m *ChangeSpaceGroupSortRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSpaceGroupSortRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeSpaceGroupSortResMultiError(errors)
	}

	return nil
}

// ChangeSpaceGroupSortResMultiError is an error wrapping multiple validation
// errors returned by ChangeSpaceGroupSortRes.ValidateAll() if the designated
// constraints aren't met.
type ChangeSpaceGroupSortResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSpaceGroupSortResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSpaceGroupSortResMultiError) AllErrors() []error { return m }

// ChangeSpaceGroupSortResValidationError is the validation error returned by
// ChangeSpaceGroupSortRes.Validate if the designated constraints aren't met.
type ChangeSpaceGroupSortResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSpaceGroupSortResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSpaceGroupSortResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSpaceGroupSortResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSpaceGroupSortResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSpaceGroupSortResValidationError) ErrorName() string {
	return "ChangeSpaceGroupSortResValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSpaceGroupSortResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSpaceGroupSortRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSpaceGroupSortResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSpaceGroupSortResValidationError{}

// Validate checks the field values on CreateSpaceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateSpaceReqMultiError,
// or nil if none found.
func (m *CreateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := CreateSpaceReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSpaceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := CreateSpaceReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IconType

	// no validation rules for Icon

	// no validation rules for SpaceType

	// no validation rules for SpaceLayout

	// no validation rules for Visibility

	// no validation rules for Link

	// no validation rules for Cover

	if len(errors) > 0 {
		return CreateSpaceReqMultiError(errors)
	}

	return nil
}

// CreateSpaceReqMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceReq.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceReqMultiError) AllErrors() []error { return m }

// CreateSpaceReqValidationError is the validation error returned by
// CreateSpaceReq.Validate if the designated constraints aren't met.
type CreateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceReqValidationError) ErrorName() string { return "CreateSpaceReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceReqValidationError{}

// Validate checks the field values on CreateSpaceRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSpaceRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpaceRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateSpaceResMultiError,
// or nil if none found.
func (m *CreateSpaceRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpaceRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSpaceResValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSpaceResValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSpaceResValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSpaceResMultiError(errors)
	}

	return nil
}

// CreateSpaceResMultiError is an error wrapping multiple validation errors
// returned by CreateSpaceRes.ValidateAll() if the designated constraints
// aren't met.
type CreateSpaceResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpaceResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpaceResMultiError) AllErrors() []error { return m }

// CreateSpaceResValidationError is the validation error returned by
// CreateSpaceRes.Validate if the designated constraints aren't met.
type CreateSpaceResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpaceResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpaceResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpaceResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpaceResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpaceResValidationError) ErrorName() string { return "CreateSpaceResValidationError" }

// Error satisfies the builtin error interface
func (e CreateSpaceResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpaceRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpaceResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpaceResValidationError{}

// Validate checks the field values on DeleteSpaceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteSpaceReqMultiError,
// or nil if none found.
func (m *DeleteSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := DeleteSpaceReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := DeleteSpaceReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSpaceReqMultiError(errors)
	}

	return nil
}

// DeleteSpaceReqMultiError is an error wrapping multiple validation errors
// returned by DeleteSpaceReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceReqMultiError) AllErrors() []error { return m }

// DeleteSpaceReqValidationError is the validation error returned by
// DeleteSpaceReq.Validate if the designated constraints aren't met.
type DeleteSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceReqValidationError) ErrorName() string { return "DeleteSpaceReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceReqValidationError{}

// Validate checks the field values on DeleteSpaceRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteSpaceResMultiError,
// or nil if none found.
func (m *DeleteSpaceRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSpaceResMultiError(errors)
	}

	return nil
}

// DeleteSpaceResMultiError is an error wrapping multiple validation errors
// returned by DeleteSpaceRes.ValidateAll() if the designated constraints
// aren't met.
type DeleteSpaceResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceResMultiError) AllErrors() []error { return m }

// DeleteSpaceResValidationError is the validation error returned by
// DeleteSpaceRes.Validate if the designated constraints aren't met.
type DeleteSpaceResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceResValidationError) ErrorName() string { return "DeleteSpaceResValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSpaceResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceResValidationError{}

// Validate checks the field values on UpdateSpaceReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpaceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSpaceReqMultiError,
// or nil if none found.
func (m *UpdateSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := UpdateSpaceReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := UpdateSpaceReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSpaceOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSpaceReqValidationError{
						field:  fmt.Sprintf("SpaceOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSpaceReqValidationError{
						field:  fmt.Sprintf("SpaceOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSpaceReqValidationError{
					field:  fmt.Sprintf("SpaceOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.SpaceGroupGuid != nil {
		// no validation rules for SpaceGroupGuid
	}

	if m.IconType != nil {
		// no validation rules for IconType
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.ChargeType != nil {
		// no validation rules for ChargeType
	}

	if m.OriginPrice != nil {
		// no validation rules for OriginPrice
	}

	if m.Price != nil {
		// no validation rules for Price
	}

	if m.Desc != nil {
		// no validation rules for Desc
	}

	if m.HeadImage != nil {
		// no validation rules for HeadImage
	}

	if m.Cover != nil {
		// no validation rules for Cover
	}

	if m.SpaceType != nil {
		// no validation rules for SpaceType
	}

	if m.SpaceLayout != nil {
		// no validation rules for SpaceLayout
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.IsAllowReadMemberList != nil {
		// no validation rules for IsAllowReadMemberList
	}

	if m.Access != nil {
		// no validation rules for Access
	}

	if m.Link != nil {
		// no validation rules for Link
	}

	if len(errors) > 0 {
		return UpdateSpaceReqMultiError(errors)
	}

	return nil
}

// UpdateSpaceReqMultiError is an error wrapping multiple validation errors
// returned by UpdateSpaceReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpaceReqMultiError) AllErrors() []error { return m }

// UpdateSpaceReqValidationError is the validation error returned by
// UpdateSpaceReq.Validate if the designated constraints aren't met.
type UpdateSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpaceReqValidationError) ErrorName() string { return "UpdateSpaceReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpaceReqValidationError{}

// Validate checks the field values on UpdateSpaceRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSpaceRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpaceRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSpaceResMultiError,
// or nil if none found.
func (m *UpdateSpaceRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpaceRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSpaceResMultiError(errors)
	}

	return nil
}

// UpdateSpaceResMultiError is an error wrapping multiple validation errors
// returned by UpdateSpaceRes.ValidateAll() if the designated constraints
// aren't met.
type UpdateSpaceResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpaceResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpaceResMultiError) AllErrors() []error { return m }

// UpdateSpaceResValidationError is the validation error returned by
// UpdateSpaceRes.Validate if the designated constraints aren't met.
type UpdateSpaceResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpaceResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpaceResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpaceResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpaceResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpaceResValidationError) ErrorName() string { return "UpdateSpaceResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSpaceResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpaceRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpaceResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpaceResValidationError{}

// Validate checks the field values on ChangeSpaceSortReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSpaceSortReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSpaceSortReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSpaceSortReqMultiError, or nil if none found.
func (m *ChangeSpaceSortReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSpaceSortReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := ChangeSpaceSortReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := ChangeSpaceSortReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.TargetSpaceGuid != nil {
		// no validation rules for TargetSpaceGuid
	}

	if m.DropPosition != nil {
		// no validation rules for DropPosition
	}

	if m.ParentSpaceGroupGuid != nil {
		// no validation rules for ParentSpaceGroupGuid
	}

	if len(errors) > 0 {
		return ChangeSpaceSortReqMultiError(errors)
	}

	return nil
}

// ChangeSpaceSortReqMultiError is an error wrapping multiple validation errors
// returned by ChangeSpaceSortReq.ValidateAll() if the designated constraints
// aren't met.
type ChangeSpaceSortReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSpaceSortReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSpaceSortReqMultiError) AllErrors() []error { return m }

// ChangeSpaceSortReqValidationError is the validation error returned by
// ChangeSpaceSortReq.Validate if the designated constraints aren't met.
type ChangeSpaceSortReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSpaceSortReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSpaceSortReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSpaceSortReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSpaceSortReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSpaceSortReqValidationError) ErrorName() string {
	return "ChangeSpaceSortReqValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSpaceSortReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSpaceSortReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSpaceSortReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSpaceSortReqValidationError{}

// Validate checks the field values on ChangeSpaceSortRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeSpaceSortRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeSpaceSortRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeSpaceSortResMultiError, or nil if none found.
func (m *ChangeSpaceSortRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeSpaceSortRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeSpaceSortResMultiError(errors)
	}

	return nil
}

// ChangeSpaceSortResMultiError is an error wrapping multiple validation errors
// returned by ChangeSpaceSortRes.ValidateAll() if the designated constraints
// aren't met.
type ChangeSpaceSortResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeSpaceSortResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeSpaceSortResMultiError) AllErrors() []error { return m }

// ChangeSpaceSortResValidationError is the validation error returned by
// ChangeSpaceSortRes.Validate if the designated constraints aren't met.
type ChangeSpaceSortResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSpaceSortResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSpaceSortResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSpaceSortResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSpaceSortResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSpaceSortResValidationError) ErrorName() string {
	return "ChangeSpaceSortResValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSpaceSortResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSpaceSortRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSpaceSortResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSpaceSortResValidationError{}

// Validate checks the field values on SpaceGroupMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceGroupMemberListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceGroupMemberListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceGroupMemberListReqMultiError, or nil if none found.
func (m *SpaceGroupMemberListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceGroupMemberListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := SpaceGroupMemberListReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := SpaceGroupMemberListReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceGroupMemberListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceGroupMemberListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceGroupMemberListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceGroupMemberListReqMultiError(errors)
	}

	return nil
}

// SpaceGroupMemberListReqMultiError is an error wrapping multiple validation
// errors returned by SpaceGroupMemberListReq.ValidateAll() if the designated
// constraints aren't met.
type SpaceGroupMemberListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceGroupMemberListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceGroupMemberListReqMultiError) AllErrors() []error { return m }

// SpaceGroupMemberListReqValidationError is the validation error returned by
// SpaceGroupMemberListReq.Validate if the designated constraints aren't met.
type SpaceGroupMemberListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceGroupMemberListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceGroupMemberListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceGroupMemberListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceGroupMemberListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceGroupMemberListReqValidationError) ErrorName() string {
	return "SpaceGroupMemberListReqValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceGroupMemberListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceGroupMemberListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceGroupMemberListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceGroupMemberListReqValidationError{}

// Validate checks the field values on SpaceGroupMemberListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceGroupMemberListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceGroupMemberListRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceGroupMemberListResMultiError, or nil if none found.
func (m *SpaceGroupMemberListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceGroupMemberListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceGroupMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceGroupMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceGroupMemberListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceGroupMemberListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceGroupMemberListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceGroupMemberListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceGroupMemberListResMultiError(errors)
	}

	return nil
}

// SpaceGroupMemberListResMultiError is an error wrapping multiple validation
// errors returned by SpaceGroupMemberListRes.ValidateAll() if the designated
// constraints aren't met.
type SpaceGroupMemberListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceGroupMemberListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceGroupMemberListResMultiError) AllErrors() []error { return m }

// SpaceGroupMemberListResValidationError is the validation error returned by
// SpaceGroupMemberListRes.Validate if the designated constraints aren't met.
type SpaceGroupMemberListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceGroupMemberListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceGroupMemberListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceGroupMemberListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceGroupMemberListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceGroupMemberListResValidationError) ErrorName() string {
	return "SpaceGroupMemberListResValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceGroupMemberListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceGroupMemberListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceGroupMemberListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceGroupMemberListResValidationError{}

// Validate checks the field values on AddSpaceGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSpaceGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSpaceGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSpaceGroupMemberReqMultiError, or nil if none found.
func (m *AddSpaceGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSpaceGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := AddSpaceGroupMemberReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetAddUids()); l < 1 || l > 100 {
		err := AddSpaceGroupMemberReqValidationError{
			field:  "AddUids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddSpaceGroupMemberReqMultiError(errors)
	}

	return nil
}

// AddSpaceGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by AddSpaceGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type AddSpaceGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSpaceGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSpaceGroupMemberReqMultiError) AllErrors() []error { return m }

// AddSpaceGroupMemberReqValidationError is the validation error returned by
// AddSpaceGroupMemberReq.Validate if the designated constraints aren't met.
type AddSpaceGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSpaceGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSpaceGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSpaceGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSpaceGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSpaceGroupMemberReqValidationError) ErrorName() string {
	return "AddSpaceGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddSpaceGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSpaceGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSpaceGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSpaceGroupMemberReqValidationError{}

// Validate checks the field values on AddSpaceGroupMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSpaceGroupMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSpaceGroupMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSpaceGroupMemberResMultiError, or nil if none found.
func (m *AddSpaceGroupMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSpaceGroupMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddSpaceGroupMemberResMultiError(errors)
	}

	return nil
}

// AddSpaceGroupMemberResMultiError is an error wrapping multiple validation
// errors returned by AddSpaceGroupMemberRes.ValidateAll() if the designated
// constraints aren't met.
type AddSpaceGroupMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSpaceGroupMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSpaceGroupMemberResMultiError) AllErrors() []error { return m }

// AddSpaceGroupMemberResValidationError is the validation error returned by
// AddSpaceGroupMemberRes.Validate if the designated constraints aren't met.
type AddSpaceGroupMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSpaceGroupMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSpaceGroupMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSpaceGroupMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSpaceGroupMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSpaceGroupMemberResValidationError) ErrorName() string {
	return "AddSpaceGroupMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e AddSpaceGroupMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSpaceGroupMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSpaceGroupMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSpaceGroupMemberResValidationError{}

// Validate checks the field values on DeleteSpaceGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpaceGroupMemberReqMultiError, or nil if none found.
func (m *DeleteSpaceGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := DeleteSpaceGroupMemberReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetDeleteUids()); l < 1 || l > 100 {
		err := DeleteSpaceGroupMemberReqValidationError{
			field:  "DeleteUids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSpaceGroupMemberReqMultiError(errors)
	}

	return nil
}

// DeleteSpaceGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by DeleteSpaceGroupMemberReq.ValidateAll() if the
// designated constraints aren't met.
type DeleteSpaceGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceGroupMemberReqMultiError) AllErrors() []error { return m }

// DeleteSpaceGroupMemberReqValidationError is the validation error returned by
// DeleteSpaceGroupMemberReq.Validate if the designated constraints aren't met.
type DeleteSpaceGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceGroupMemberReqValidationError) ErrorName() string {
	return "DeleteSpaceGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpaceGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceGroupMemberReqValidationError{}

// Validate checks the field values on DeleteSpaceGroupMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceGroupMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceGroupMemberRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpaceGroupMemberResMultiError, or nil if none found.
func (m *DeleteSpaceGroupMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceGroupMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSpaceGroupMemberResMultiError(errors)
	}

	return nil
}

// DeleteSpaceGroupMemberResMultiError is an error wrapping multiple validation
// errors returned by DeleteSpaceGroupMemberRes.ValidateAll() if the
// designated constraints aren't met.
type DeleteSpaceGroupMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceGroupMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceGroupMemberResMultiError) AllErrors() []error { return m }

// DeleteSpaceGroupMemberResValidationError is the validation error returned by
// DeleteSpaceGroupMemberRes.Validate if the designated constraints aren't met.
type DeleteSpaceGroupMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceGroupMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceGroupMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceGroupMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceGroupMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceGroupMemberResValidationError) ErrorName() string {
	return "DeleteSpaceGroupMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpaceGroupMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceGroupMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceGroupMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceGroupMemberResValidationError{}

// Validate checks the field values on SearchSpaceGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSpaceGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSpaceGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSpaceGroupMemberReqMultiError, or nil if none found.
func (m *SearchSpaceGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSpaceGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := SearchSpaceGroupMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGroupGuid()) < 1 {
		err := SearchSpaceGroupMemberReqValidationError{
			field:  "SpaceGroupGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := SearchSpaceGroupMemberReqValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchSpaceGroupMemberReqMultiError(errors)
	}

	return nil
}

// SearchSpaceGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by SearchSpaceGroupMemberReq.ValidateAll() if the
// designated constraints aren't met.
type SearchSpaceGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSpaceGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSpaceGroupMemberReqMultiError) AllErrors() []error { return m }

// SearchSpaceGroupMemberReqValidationError is the validation error returned by
// SearchSpaceGroupMemberReq.Validate if the designated constraints aren't met.
type SearchSpaceGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSpaceGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSpaceGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSpaceGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSpaceGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSpaceGroupMemberReqValidationError) ErrorName() string {
	return "SearchSpaceGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSpaceGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSpaceGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSpaceGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSpaceGroupMemberReqValidationError{}

// Validate checks the field values on SearchSpaceGroupMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSpaceGroupMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSpaceGroupMemberRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSpaceGroupMemberResMultiError, or nil if none found.
func (m *SearchSpaceGroupMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSpaceGroupMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchSpaceGroupMemberResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchSpaceGroupMemberResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchSpaceGroupMemberResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchSpaceGroupMemberResMultiError(errors)
	}

	return nil
}

// SearchSpaceGroupMemberResMultiError is an error wrapping multiple validation
// errors returned by SearchSpaceGroupMemberRes.ValidateAll() if the
// designated constraints aren't met.
type SearchSpaceGroupMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSpaceGroupMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSpaceGroupMemberResMultiError) AllErrors() []error { return m }

// SearchSpaceGroupMemberResValidationError is the validation error returned by
// SearchSpaceGroupMemberRes.Validate if the designated constraints aren't met.
type SearchSpaceGroupMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSpaceGroupMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSpaceGroupMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSpaceGroupMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSpaceGroupMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSpaceGroupMemberResValidationError) ErrorName() string {
	return "SearchSpaceGroupMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSpaceGroupMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSpaceGroupMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSpaceGroupMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSpaceGroupMemberResValidationError{}

// Validate checks the field values on SpaceMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceMemberListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceMemberListReqMultiError, or nil if none found.
func (m *SpaceMemberListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceMemberListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := SpaceMemberListReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := SpaceMemberListReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceMemberListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceMemberListReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceMemberListReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceMemberListReqMultiError(errors)
	}

	return nil
}

// SpaceMemberListReqMultiError is an error wrapping multiple validation errors
// returned by SpaceMemberListReq.ValidateAll() if the designated constraints
// aren't met.
type SpaceMemberListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceMemberListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceMemberListReqMultiError) AllErrors() []error { return m }

// SpaceMemberListReqValidationError is the validation error returned by
// SpaceMemberListReq.Validate if the designated constraints aren't met.
type SpaceMemberListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceMemberListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceMemberListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceMemberListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceMemberListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceMemberListReqValidationError) ErrorName() string {
	return "SpaceMemberListReqValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceMemberListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceMemberListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceMemberListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceMemberListReqValidationError{}

// Validate checks the field values on SpaceMemberListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceMemberListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceMemberListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceMemberListResMultiError, or nil if none found.
func (m *SpaceMemberListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceMemberListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceMemberListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpaceMemberListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpaceMemberListResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpaceMemberListResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SpaceMemberListResMultiError(errors)
	}

	return nil
}

// SpaceMemberListResMultiError is an error wrapping multiple validation errors
// returned by SpaceMemberListRes.ValidateAll() if the designated constraints
// aren't met.
type SpaceMemberListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceMemberListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceMemberListResMultiError) AllErrors() []error { return m }

// SpaceMemberListResValidationError is the validation error returned by
// SpaceMemberListRes.Validate if the designated constraints aren't met.
type SpaceMemberListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceMemberListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceMemberListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceMemberListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceMemberListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceMemberListResValidationError) ErrorName() string {
	return "SpaceMemberListResValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceMemberListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceMemberListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceMemberListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceMemberListResValidationError{}

// Validate checks the field values on AddSpaceMemberReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSpaceMemberReqMultiError, or nil if none found.
func (m *AddSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := AddSpaceMemberReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetAddUids()); l < 1 || l > 100 {
		err := AddSpaceMemberReqValidationError{
			field:  "AddUids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddSpaceMemberReqMultiError(errors)
	}

	return nil
}

// AddSpaceMemberReqMultiError is an error wrapping multiple validation errors
// returned by AddSpaceMemberReq.ValidateAll() if the designated constraints
// aren't met.
type AddSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSpaceMemberReqMultiError) AllErrors() []error { return m }

// AddSpaceMemberReqValidationError is the validation error returned by
// AddSpaceMemberReq.Validate if the designated constraints aren't met.
type AddSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSpaceMemberReqValidationError) ErrorName() string {
	return "AddSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSpaceMemberReqValidationError{}

// Validate checks the field values on AddSpaceMemberRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSpaceMemberResMultiError, or nil if none found.
func (m *AddSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddSpaceMemberResMultiError(errors)
	}

	return nil
}

// AddSpaceMemberResMultiError is an error wrapping multiple validation errors
// returned by AddSpaceMemberRes.ValidateAll() if the designated constraints
// aren't met.
type AddSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSpaceMemberResMultiError) AllErrors() []error { return m }

// AddSpaceMemberResValidationError is the validation error returned by
// AddSpaceMemberRes.Validate if the designated constraints aren't met.
type AddSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSpaceMemberResValidationError) ErrorName() string {
	return "AddSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e AddSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSpaceMemberResValidationError{}

// Validate checks the field values on DeleteSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpaceMemberReqMultiError, or nil if none found.
func (m *DeleteSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := DeleteSpaceMemberReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetDeleteUids()); l < 1 || l > 100 {
		err := DeleteSpaceMemberReqValidationError{
			field:  "DeleteUids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSpaceMemberReqMultiError(errors)
	}

	return nil
}

// DeleteSpaceMemberReqMultiError is an error wrapping multiple validation
// errors returned by DeleteSpaceMemberReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceMemberReqMultiError) AllErrors() []error { return m }

// DeleteSpaceMemberReqValidationError is the validation error returned by
// DeleteSpaceMemberReq.Validate if the designated constraints aren't met.
type DeleteSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceMemberReqValidationError) ErrorName() string {
	return "DeleteSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceMemberReqValidationError{}

// Validate checks the field values on DeleteSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpaceMemberResMultiError, or nil if none found.
func (m *DeleteSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSpaceMemberResMultiError(errors)
	}

	return nil
}

// DeleteSpaceMemberResMultiError is an error wrapping multiple validation
// errors returned by DeleteSpaceMemberRes.ValidateAll() if the designated
// constraints aren't met.
type DeleteSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpaceMemberResMultiError) AllErrors() []error { return m }

// DeleteSpaceMemberResValidationError is the validation error returned by
// DeleteSpaceMemberRes.Validate if the designated constraints aren't met.
type DeleteSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpaceMemberResValidationError) ErrorName() string {
	return "DeleteSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpaceMemberResValidationError{}

// Validate checks the field values on QuitSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuitSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuitSpaceMemberReqMultiError, or nil if none found.
func (m *QuitSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := QuitSpaceMemberReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := QuitSpaceMemberReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QuitSpaceMemberReqMultiError(errors)
	}

	return nil
}

// QuitSpaceMemberReqMultiError is an error wrapping multiple validation errors
// returned by QuitSpaceMemberReq.ValidateAll() if the designated constraints
// aren't met.
type QuitSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitSpaceMemberReqMultiError) AllErrors() []error { return m }

// QuitSpaceMemberReqValidationError is the validation error returned by
// QuitSpaceMemberReq.Validate if the designated constraints aren't met.
type QuitSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitSpaceMemberReqValidationError) ErrorName() string {
	return "QuitSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e QuitSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitSpaceMemberReqValidationError{}

// Validate checks the field values on QuitSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuitSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuitSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuitSpaceMemberResMultiError, or nil if none found.
func (m *QuitSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *QuitSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuitSpaceMemberResMultiError(errors)
	}

	return nil
}

// QuitSpaceMemberResMultiError is an error wrapping multiple validation errors
// returned by QuitSpaceMemberRes.ValidateAll() if the designated constraints
// aren't met.
type QuitSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuitSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuitSpaceMemberResMultiError) AllErrors() []error { return m }

// QuitSpaceMemberResValidationError is the validation error returned by
// QuitSpaceMemberRes.Validate if the designated constraints aren't met.
type QuitSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuitSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuitSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuitSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuitSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuitSpaceMemberResValidationError) ErrorName() string {
	return "QuitSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e QuitSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuitSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuitSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuitSpaceMemberResValidationError{}

// Validate checks the field values on SearchSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSpaceMemberReqMultiError, or nil if none found.
func (m *SearchSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := SearchSpaceMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSpaceGuid()) < 1 {
		err := SearchSpaceMemberReqValidationError{
			field:  "SpaceGuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := SearchSpaceMemberReqValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchSpaceMemberReqMultiError(errors)
	}

	return nil
}

// SearchSpaceMemberReqMultiError is an error wrapping multiple validation
// errors returned by SearchSpaceMemberReq.ValidateAll() if the designated
// constraints aren't met.
type SearchSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSpaceMemberReqMultiError) AllErrors() []error { return m }

// SearchSpaceMemberReqValidationError is the validation error returned by
// SearchSpaceMemberReq.Validate if the designated constraints aren't met.
type SearchSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSpaceMemberReqValidationError) ErrorName() string {
	return "SearchSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSpaceMemberReqValidationError{}

// Validate checks the field values on SearchSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSpaceMemberResMultiError, or nil if none found.
func (m *SearchSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchSpaceMemberResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchSpaceMemberResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchSpaceMemberResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchSpaceMemberResMultiError(errors)
	}

	return nil
}

// SearchSpaceMemberResMultiError is an error wrapping multiple validation
// errors returned by SearchSpaceMemberRes.ValidateAll() if the designated
// constraints aren't met.
type SearchSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSpaceMemberResMultiError) AllErrors() []error { return m }

// SearchSpaceMemberResValidationError is the validation error returned by
// SearchSpaceMemberRes.Validate if the designated constraints aren't met.
type SearchSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSpaceMemberResValidationError) ErrorName() string {
	return "SearchSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSpaceMemberResValidationError{}

// Validate checks the field values on AuditApplySpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditApplySpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditApplySpaceMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditApplySpaceMemberReqMultiError, or nil if none found.
func (m *AuditApplySpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditApplySpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := AuditApplySpaceMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TargetGuid

	if m.GetAuditType() != 3 {
		err := AuditApplySpaceMemberReqValidationError{
			field:  "AuditType",
			reason: "value must equal 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return AuditApplySpaceMemberReqMultiError(errors)
	}

	return nil
}

// AuditApplySpaceMemberReqMultiError is an error wrapping multiple validation
// errors returned by AuditApplySpaceMemberReq.ValidateAll() if the designated
// constraints aren't met.
type AuditApplySpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditApplySpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditApplySpaceMemberReqMultiError) AllErrors() []error { return m }

// AuditApplySpaceMemberReqValidationError is the validation error returned by
// AuditApplySpaceMemberReq.Validate if the designated constraints aren't met.
type AuditApplySpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditApplySpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditApplySpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditApplySpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditApplySpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditApplySpaceMemberReqValidationError) ErrorName() string {
	return "AuditApplySpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuditApplySpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditApplySpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditApplySpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditApplySpaceMemberReqValidationError{}

// Validate checks the field values on AuditApplySpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditApplySpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditApplySpaceMemberRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditApplySpaceMemberResMultiError, or nil if none found.
func (m *AuditApplySpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditApplySpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizCode

	if len(errors) > 0 {
		return AuditApplySpaceMemberResMultiError(errors)
	}

	return nil
}

// AuditApplySpaceMemberResMultiError is an error wrapping multiple validation
// errors returned by AuditApplySpaceMemberRes.ValidateAll() if the designated
// constraints aren't met.
type AuditApplySpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditApplySpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditApplySpaceMemberResMultiError) AllErrors() []error { return m }

// AuditApplySpaceMemberResValidationError is the validation error returned by
// AuditApplySpaceMemberRes.Validate if the designated constraints aren't met.
type AuditApplySpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditApplySpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditApplySpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditApplySpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditApplySpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditApplySpaceMemberResValidationError) ErrorName() string {
	return "AuditApplySpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e AuditApplySpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditApplySpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditApplySpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditApplySpaceMemberResValidationError{}

// Validate checks the field values on AuditListSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditListSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditListSpaceMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditListSpaceMemberReqMultiError, or nil if none found.
func (m *AuditListSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditListSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetGuid

	// no validation rules for AuditType

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuditListSpaceMemberReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuditListSpaceMemberReqValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuditListSpaceMemberReqValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuditListSpaceMemberReqMultiError(errors)
	}

	return nil
}

// AuditListSpaceMemberReqMultiError is an error wrapping multiple validation
// errors returned by AuditListSpaceMemberReq.ValidateAll() if the designated
// constraints aren't met.
type AuditListSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditListSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditListSpaceMemberReqMultiError) AllErrors() []error { return m }

// AuditListSpaceMemberReqValidationError is the validation error returned by
// AuditListSpaceMemberReq.Validate if the designated constraints aren't met.
type AuditListSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditListSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditListSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditListSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditListSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditListSpaceMemberReqValidationError) ErrorName() string {
	return "AuditListSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuditListSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditListSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditListSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditListSpaceMemberReqValidationError{}

// Validate checks the field values on AuditListSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditListSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditListSpaceMemberRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditListSpaceMemberResMultiError, or nil if none found.
func (m *AuditListSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditListSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuditListSpaceMemberResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuditListSpaceMemberResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuditListSpaceMemberResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuditListSpaceMemberResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuditListSpaceMemberResValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuditListSpaceMemberResValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuditListSpaceMemberResMultiError(errors)
	}

	return nil
}

// AuditListSpaceMemberResMultiError is an error wrapping multiple validation
// errors returned by AuditListSpaceMemberRes.ValidateAll() if the designated
// constraints aren't met.
type AuditListSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditListSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditListSpaceMemberResMultiError) AllErrors() []error { return m }

// AuditListSpaceMemberResValidationError is the validation error returned by
// AuditListSpaceMemberRes.Validate if the designated constraints aren't met.
type AuditListSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditListSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditListSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditListSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditListSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditListSpaceMemberResValidationError) ErrorName() string {
	return "AuditListSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e AuditListSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditListSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditListSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditListSpaceMemberResValidationError{}

// Validate checks the field values on AuditMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditMember with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditMemberMultiError, or
// nil if none found.
func (m *AuditMember) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Reason

	if len(errors) > 0 {
		return AuditMemberMultiError(errors)
	}

	return nil
}

// AuditMemberMultiError is an error wrapping multiple validation errors
// returned by AuditMember.ValidateAll() if the designated constraints aren't met.
type AuditMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditMemberMultiError) AllErrors() []error { return m }

// AuditMemberValidationError is the validation error returned by
// AuditMember.Validate if the designated constraints aren't met.
type AuditMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditMemberValidationError) ErrorName() string { return "AuditMemberValidationError" }

// Error satisfies the builtin error interface
func (e AuditMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditMemberValidationError{}

// Validate checks the field values on AuditPassSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditPassSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditPassSpaceMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditPassSpaceMemberReqMultiError, or nil if none found.
func (m *AuditPassSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditPassSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AuditPassSpaceMemberReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TargetGuid

	// no validation rules for AuditType

	if m.GetOperateUid() <= 0 {
		err := AuditPassSpaceMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OpReason

	if len(errors) > 0 {
		return AuditPassSpaceMemberReqMultiError(errors)
	}

	return nil
}

// AuditPassSpaceMemberReqMultiError is an error wrapping multiple validation
// errors returned by AuditPassSpaceMemberReq.ValidateAll() if the designated
// constraints aren't met.
type AuditPassSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditPassSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditPassSpaceMemberReqMultiError) AllErrors() []error { return m }

// AuditPassSpaceMemberReqValidationError is the validation error returned by
// AuditPassSpaceMemberReq.Validate if the designated constraints aren't met.
type AuditPassSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditPassSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditPassSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditPassSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditPassSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditPassSpaceMemberReqValidationError) ErrorName() string {
	return "AuditPassSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuditPassSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditPassSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditPassSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditPassSpaceMemberReqValidationError{}

// Validate checks the field values on AuditPassSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditPassSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditPassSpaceMemberRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditPassSpaceMemberResMultiError, or nil if none found.
func (m *AuditPassSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditPassSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditPassSpaceMemberResMultiError(errors)
	}

	return nil
}

// AuditPassSpaceMemberResMultiError is an error wrapping multiple validation
// errors returned by AuditPassSpaceMemberRes.ValidateAll() if the designated
// constraints aren't met.
type AuditPassSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditPassSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditPassSpaceMemberResMultiError) AllErrors() []error { return m }

// AuditPassSpaceMemberResValidationError is the validation error returned by
// AuditPassSpaceMemberRes.Validate if the designated constraints aren't met.
type AuditPassSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditPassSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditPassSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditPassSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditPassSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditPassSpaceMemberResValidationError) ErrorName() string {
	return "AuditPassSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e AuditPassSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditPassSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditPassSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditPassSpaceMemberResValidationError{}

// Validate checks the field values on AuditRejectSpaceMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditRejectSpaceMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditRejectSpaceMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditRejectSpaceMemberReqMultiError, or nil if none found.
func (m *AuditRejectSpaceMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditRejectSpaceMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AuditRejectSpaceMemberReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TargetGuid

	// no validation rules for AuditType

	if m.GetOperateUid() <= 0 {
		err := AuditRejectSpaceMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OpReason

	if len(errors) > 0 {
		return AuditRejectSpaceMemberReqMultiError(errors)
	}

	return nil
}

// AuditRejectSpaceMemberReqMultiError is an error wrapping multiple validation
// errors returned by AuditRejectSpaceMemberReq.ValidateAll() if the
// designated constraints aren't met.
type AuditRejectSpaceMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditRejectSpaceMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditRejectSpaceMemberReqMultiError) AllErrors() []error { return m }

// AuditRejectSpaceMemberReqValidationError is the validation error returned by
// AuditRejectSpaceMemberReq.Validate if the designated constraints aren't met.
type AuditRejectSpaceMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditRejectSpaceMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditRejectSpaceMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditRejectSpaceMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditRejectSpaceMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditRejectSpaceMemberReqValidationError) ErrorName() string {
	return "AuditRejectSpaceMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AuditRejectSpaceMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditRejectSpaceMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditRejectSpaceMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditRejectSpaceMemberReqValidationError{}

// Validate checks the field values on AuditRejectSpaceMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditRejectSpaceMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditRejectSpaceMemberRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditRejectSpaceMemberResMultiError, or nil if none found.
func (m *AuditRejectSpaceMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditRejectSpaceMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditRejectSpaceMemberResMultiError(errors)
	}

	return nil
}

// AuditRejectSpaceMemberResMultiError is an error wrapping multiple validation
// errors returned by AuditRejectSpaceMemberRes.ValidateAll() if the
// designated constraints aren't met.
type AuditRejectSpaceMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditRejectSpaceMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditRejectSpaceMemberResMultiError) AllErrors() []error { return m }

// AuditRejectSpaceMemberResValidationError is the validation error returned by
// AuditRejectSpaceMemberRes.Validate if the designated constraints aren't met.
type AuditRejectSpaceMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditRejectSpaceMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditRejectSpaceMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditRejectSpaceMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditRejectSpaceMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditRejectSpaceMemberResValidationError) ErrorName() string {
	return "AuditRejectSpaceMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e AuditRejectSpaceMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditRejectSpaceMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditRejectSpaceMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditRejectSpaceMemberResValidationError{}

// Validate checks the field values on AuditMapByIdsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuditMapByIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditMapByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditMapByIdsReqMultiError, or nil if none found.
func (m *AuditMapByIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditMapByIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAuditIds()) < 1 {
		err := AuditMapByIdsReqValidationError{
			field:  "AuditIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuditMapByIdsReqMultiError(errors)
	}

	return nil
}

// AuditMapByIdsReqMultiError is an error wrapping multiple validation errors
// returned by AuditMapByIdsReq.ValidateAll() if the designated constraints
// aren't met.
type AuditMapByIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditMapByIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditMapByIdsReqMultiError) AllErrors() []error { return m }

// AuditMapByIdsReqValidationError is the validation error returned by
// AuditMapByIdsReq.Validate if the designated constraints aren't met.
type AuditMapByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditMapByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditMapByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditMapByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditMapByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditMapByIdsReqValidationError) ErrorName() string { return "AuditMapByIdsReqValidationError" }

// Error satisfies the builtin error interface
func (e AuditMapByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditMapByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditMapByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditMapByIdsReqValidationError{}

// Validate checks the field values on AuditMapByIdsRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuditMapByIdsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditMapByIdsRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditMapByIdsResMultiError, or nil if none found.
func (m *AuditMapByIdsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditMapByIdsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetAuditMap()))
		i := 0
		for key := range m.GetAuditMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAuditMap()[key]
			_ = val

			// no validation rules for AuditMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AuditMapByIdsResValidationError{
							field:  fmt.Sprintf("AuditMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AuditMapByIdsResValidationError{
							field:  fmt.Sprintf("AuditMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AuditMapByIdsResValidationError{
						field:  fmt.Sprintf("AuditMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return AuditMapByIdsResMultiError(errors)
	}

	return nil
}

// AuditMapByIdsResMultiError is an error wrapping multiple validation errors
// returned by AuditMapByIdsRes.ValidateAll() if the designated constraints
// aren't met.
type AuditMapByIdsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditMapByIdsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditMapByIdsResMultiError) AllErrors() []error { return m }

// AuditMapByIdsResValidationError is the validation error returned by
// AuditMapByIdsRes.Validate if the designated constraints aren't met.
type AuditMapByIdsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditMapByIdsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditMapByIdsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditMapByIdsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditMapByIdsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditMapByIdsResValidationError) ErrorName() string { return "AuditMapByIdsResValidationError" }

// Error satisfies the builtin error interface
func (e AuditMapByIdsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditMapByIdsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditMapByIdsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditMapByIdsResValidationError{}

// Validate checks the field values on AuditIndex with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditIndex) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditIndex with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditIndexMultiError, or
// nil if none found.
func (m *AuditIndex) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditIndex) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	// no validation rules for Status

	// no validation rules for Reason

	// no validation rules for OpReason

	if len(errors) > 0 {
		return AuditIndexMultiError(errors)
	}

	return nil
}

// AuditIndexMultiError is an error wrapping multiple validation errors
// returned by AuditIndex.ValidateAll() if the designated constraints aren't met.
type AuditIndexMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditIndexMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditIndexMultiError) AllErrors() []error { return m }

// AuditIndexValidationError is the validation error returned by
// AuditIndex.Validate if the designated constraints aren't met.
type AuditIndexValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditIndexValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditIndexValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditIndexValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditIndexValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditIndexValidationError) ErrorName() string { return "AuditIndexValidationError" }

// Error satisfies the builtin error interface
func (e AuditIndexValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditIndex.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditIndexValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditIndexValidationError{}

// Validate checks the field values on GetSpacePermissionByUidReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpacePermissionByUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpacePermissionByUidReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpacePermissionByUidReqMultiError, or nil if none found.
func (m *GetSpacePermissionByUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpacePermissionByUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	// no validation rules for TargetGuid

	// no validation rules for GuidType

	if len(errors) > 0 {
		return GetSpacePermissionByUidReqMultiError(errors)
	}

	return nil
}

// GetSpacePermissionByUidReqMultiError is an error wrapping multiple
// validation errors returned by GetSpacePermissionByUidReq.ValidateAll() if
// the designated constraints aren't met.
type GetSpacePermissionByUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpacePermissionByUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpacePermissionByUidReqMultiError) AllErrors() []error { return m }

// GetSpacePermissionByUidReqValidationError is the validation error returned
// by GetSpacePermissionByUidReq.Validate if the designated constraints aren't met.
type GetSpacePermissionByUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpacePermissionByUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpacePermissionByUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpacePermissionByUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpacePermissionByUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpacePermissionByUidReqValidationError) ErrorName() string {
	return "GetSpacePermissionByUidReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpacePermissionByUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpacePermissionByUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpacePermissionByUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpacePermissionByUidReqValidationError{}

// Validate checks the field values on GetSpacePermissionByUidRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpacePermissionByUidRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpacePermissionByUidRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpacePermissionByUidResMultiError, or nil if none found.
func (m *GetSpacePermissionByUidRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpacePermissionByUidRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowManage

	// no validation rules for IsAllowView

	// no validation rules for IsAllowWrite

	// no validation rules for IsAllowCreateFile

	// no validation rules for IsMember

	// no validation rules for AuditStatus

	// no validation rules for IsAllowReadMemberList

	switch v := m.Payload.(type) {
	case *GetSpacePermissionByUidRes_Article:
		if v == nil {
			err := GetSpacePermissionByUidResValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArticle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpacePermissionByUidResValidationError{
						field:  "Article",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpacePermissionByUidResValidationError{
						field:  "Article",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArticle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpacePermissionByUidResValidationError{
					field:  "Article",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetSpacePermissionByUidRes_Question:
		if v == nil {
			err := GetSpacePermissionByUidResValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQuestion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSpacePermissionByUidResValidationError{
						field:  "Question",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSpacePermissionByUidResValidationError{
						field:  "Question",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuestion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSpacePermissionByUidResValidationError{
					field:  "Question",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetSpacePermissionByUidResMultiError(errors)
	}

	return nil
}

// GetSpacePermissionByUidResMultiError is an error wrapping multiple
// validation errors returned by GetSpacePermissionByUidRes.ValidateAll() if
// the designated constraints aren't met.
type GetSpacePermissionByUidResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpacePermissionByUidResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpacePermissionByUidResMultiError) AllErrors() []error { return m }

// GetSpacePermissionByUidResValidationError is the validation error returned
// by GetSpacePermissionByUidRes.Validate if the designated constraints aren't met.
type GetSpacePermissionByUidResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpacePermissionByUidResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpacePermissionByUidResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpacePermissionByUidResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpacePermissionByUidResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpacePermissionByUidResValidationError) ErrorName() string {
	return "GetSpacePermissionByUidResValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpacePermissionByUidResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpacePermissionByUidRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpacePermissionByUidResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpacePermissionByUidResValidationError{}

// Validate checks the field values on SpaceArticlePermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceArticlePermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceArticlePermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceArticlePermissionMultiError, or nil if none found.
func (m *SpaceArticlePermission) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceArticlePermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowCreateFile

	if len(errors) > 0 {
		return SpaceArticlePermissionMultiError(errors)
	}

	return nil
}

// SpaceArticlePermissionMultiError is an error wrapping multiple validation
// errors returned by SpaceArticlePermission.ValidateAll() if the designated
// constraints aren't met.
type SpaceArticlePermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceArticlePermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceArticlePermissionMultiError) AllErrors() []error { return m }

// SpaceArticlePermissionValidationError is the validation error returned by
// SpaceArticlePermission.Validate if the designated constraints aren't met.
type SpaceArticlePermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceArticlePermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceArticlePermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceArticlePermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceArticlePermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceArticlePermissionValidationError) ErrorName() string {
	return "SpaceArticlePermissionValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceArticlePermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceArticlePermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceArticlePermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceArticlePermissionValidationError{}

// Validate checks the field values on SpaceQuestionPermission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpaceQuestionPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceQuestionPermission with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceQuestionPermissionMultiError, or nil if none found.
func (m *SpaceQuestionPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceQuestionPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowCreateFile

	if len(errors) > 0 {
		return SpaceQuestionPermissionMultiError(errors)
	}

	return nil
}

// SpaceQuestionPermissionMultiError is an error wrapping multiple validation
// errors returned by SpaceQuestionPermission.ValidateAll() if the designated
// constraints aren't met.
type SpaceQuestionPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceQuestionPermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceQuestionPermissionMultiError) AllErrors() []error { return m }

// SpaceQuestionPermissionValidationError is the validation error returned by
// SpaceQuestionPermission.Validate if the designated constraints aren't met.
type SpaceQuestionPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceQuestionPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceQuestionPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceQuestionPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceQuestionPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceQuestionPermissionValidationError) ErrorName() string {
	return "SpaceQuestionPermissionValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceQuestionPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceQuestionPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceQuestionPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceQuestionPermissionValidationError{}

// Validate checks the field values on TotalInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TotalInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TotalInfoReqMultiError, or
// nil if none found.
func (m *TotalInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return TotalInfoReqMultiError(errors)
	}

	return nil
}

// TotalInfoReqMultiError is an error wrapping multiple validation errors
// returned by TotalInfoReq.ValidateAll() if the designated constraints aren't met.
type TotalInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalInfoReqMultiError) AllErrors() []error { return m }

// TotalInfoReqValidationError is the validation error returned by
// TotalInfoReq.Validate if the designated constraints aren't met.
type TotalInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalInfoReqValidationError) ErrorName() string { return "TotalInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e TotalInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalInfoReqValidationError{}

// Validate checks the field values on TotalInfoRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TotalInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalInfoRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TotalInfoResMultiError, or
// nil if none found.
func (m *TotalInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceCnt

	if len(errors) > 0 {
		return TotalInfoResMultiError(errors)
	}

	return nil
}

// TotalInfoResMultiError is an error wrapping multiple validation errors
// returned by TotalInfoRes.ValidateAll() if the designated constraints aren't met.
type TotalInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalInfoResMultiError) AllErrors() []error { return m }

// TotalInfoResValidationError is the validation error returned by
// TotalInfoRes.Validate if the designated constraints aren't met.
type TotalInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalInfoResValidationError) ErrorName() string { return "TotalInfoResValidationError" }

// Error satisfies the builtin error interface
func (e TotalInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalInfoResValidationError{}

// Validate checks the field values on EmojiListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmojiListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmojiListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmojiListReqMultiError, or
// nil if none found.
func (m *EmojiListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EmojiListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := EmojiListReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EmojiListReqMultiError(errors)
	}

	return nil
}

// EmojiListReqMultiError is an error wrapping multiple validation errors
// returned by EmojiListReq.ValidateAll() if the designated constraints aren't met.
type EmojiListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmojiListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmojiListReqMultiError) AllErrors() []error { return m }

// EmojiListReqValidationError is the validation error returned by
// EmojiListReq.Validate if the designated constraints aren't met.
type EmojiListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmojiListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmojiListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmojiListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmojiListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmojiListReqValidationError) ErrorName() string { return "EmojiListReqValidationError" }

// Error satisfies the builtin error interface
func (e EmojiListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmojiListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmojiListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmojiListReqValidationError{}

// Validate checks the field values on SpaceEmojiList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpaceEmojiList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceEmojiList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpaceEmojiListMultiError,
// or nil if none found.
func (m *SpaceEmojiList) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceEmojiList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceGuid

	for idx, item := range m.GetEmojiList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceEmojiListValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceEmojiListValidationError{
						field:  fmt.Sprintf("EmojiList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceEmojiListValidationError{
					field:  fmt.Sprintf("EmojiList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpaceEmojiListMultiError(errors)
	}

	return nil
}

// SpaceEmojiListMultiError is an error wrapping multiple validation errors
// returned by SpaceEmojiList.ValidateAll() if the designated constraints
// aren't met.
type SpaceEmojiListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceEmojiListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceEmojiListMultiError) AllErrors() []error { return m }

// SpaceEmojiListValidationError is the validation error returned by
// SpaceEmojiList.Validate if the designated constraints aren't met.
type SpaceEmojiListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceEmojiListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceEmojiListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceEmojiListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceEmojiListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceEmojiListValidationError) ErrorName() string { return "SpaceEmojiListValidationError" }

// Error satisfies the builtin error interface
func (e SpaceEmojiListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceEmojiList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceEmojiListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceEmojiListValidationError{}

// Validate checks the field values on EmojiListRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmojiListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmojiListRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmojiListResMultiError, or
// nil if none found.
func (m *EmojiListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *EmojiListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpaceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmojiListResValidationError{
						field:  fmt.Sprintf("SpaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmojiListResValidationError{
						field:  fmt.Sprintf("SpaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmojiListResValidationError{
					field:  fmt.Sprintf("SpaceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EmojiListResMultiError(errors)
	}

	return nil
}

// EmojiListResMultiError is an error wrapping multiple validation errors
// returned by EmojiListRes.ValidateAll() if the designated constraints aren't met.
type EmojiListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmojiListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmojiListResMultiError) AllErrors() []error { return m }

// EmojiListResValidationError is the validation error returned by
// EmojiListRes.Validate if the designated constraints aren't met.
type EmojiListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmojiListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmojiListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmojiListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmojiListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmojiListResValidationError) ErrorName() string { return "EmojiListResValidationError" }

// Error satisfies the builtin error interface
func (e EmojiListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmojiListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmojiListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmojiListResValidationError{}

// Validate checks the field values on GenSpaceAccessOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenSpaceAccessOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenSpaceAccessOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenSpaceAccessOrderReqMultiError, or nil if none found.
func (m *GenSpaceAccessOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenSpaceAccessOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := GenSpaceAccessOrderReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenSpaceAccessOrderReqMultiError(errors)
	}

	return nil
}

// GenSpaceAccessOrderReqMultiError is an error wrapping multiple validation
// errors returned by GenSpaceAccessOrderReq.ValidateAll() if the designated
// constraints aren't met.
type GenSpaceAccessOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenSpaceAccessOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenSpaceAccessOrderReqMultiError) AllErrors() []error { return m }

// GenSpaceAccessOrderReqValidationError is the validation error returned by
// GenSpaceAccessOrderReq.Validate if the designated constraints aren't met.
type GenSpaceAccessOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenSpaceAccessOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenSpaceAccessOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenSpaceAccessOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenSpaceAccessOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenSpaceAccessOrderReqValidationError) ErrorName() string {
	return "GenSpaceAccessOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e GenSpaceAccessOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenSpaceAccessOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenSpaceAccessOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenSpaceAccessOrderReqValidationError{}

// Validate checks the field values on GenSpaceAccessOrderRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenSpaceAccessOrderRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenSpaceAccessOrderRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenSpaceAccessOrderResMultiError, or nil if none found.
func (m *GenSpaceAccessOrderRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GenSpaceAccessOrderRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Discount

	// no validation rules for OriginalAmount

	// no validation rules for DiscountAmount

	// no validation rules for TradeAmount

	// no validation rules for Currency

	// no validation rules for CurrencyPrecision

	// no validation rules for CurrencySymbol

	// no validation rules for OrderSn

	if len(errors) > 0 {
		return GenSpaceAccessOrderResMultiError(errors)
	}

	return nil
}

// GenSpaceAccessOrderResMultiError is an error wrapping multiple validation
// errors returned by GenSpaceAccessOrderRes.ValidateAll() if the designated
// constraints aren't met.
type GenSpaceAccessOrderResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenSpaceAccessOrderResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenSpaceAccessOrderResMultiError) AllErrors() []error { return m }

// GenSpaceAccessOrderResValidationError is the validation error returned by
// GenSpaceAccessOrderRes.Validate if the designated constraints aren't met.
type GenSpaceAccessOrderResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenSpaceAccessOrderResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenSpaceAccessOrderResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenSpaceAccessOrderResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenSpaceAccessOrderResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenSpaceAccessOrderResValidationError) ErrorName() string {
	return "GenSpaceAccessOrderResValidationError"
}

// Error satisfies the builtin error interface
func (e GenSpaceAccessOrderResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenSpaceAccessOrderRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenSpaceAccessOrderResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenSpaceAccessOrderResValidationError{}
