// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pms/v1/pms.proto

package pmsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.PMS_ACT(0)
)

// Validate checks the field values on GetManagerMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetManagerMemberListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManagerMemberListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetManagerMemberListReqMultiError, or nil if none found.
func (m *GetManagerMemberListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManagerMemberListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if len(errors) > 0 {
		return GetManagerMemberListReqMultiError(errors)
	}

	return nil
}

// GetManagerMemberListReqMultiError is an error wrapping multiple validation
// errors returned by GetManagerMemberListReq.ValidateAll() if the designated
// constraints aren't met.
type GetManagerMemberListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManagerMemberListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManagerMemberListReqMultiError) AllErrors() []error { return m }

// GetManagerMemberListReqValidationError is the validation error returned by
// GetManagerMemberListReq.Validate if the designated constraints aren't met.
type GetManagerMemberListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagerMemberListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagerMemberListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagerMemberListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagerMemberListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagerMemberListReqValidationError) ErrorName() string {
	return "GetManagerMemberListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagerMemberListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagerMemberListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagerMemberListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagerMemberListReqValidationError{}

// Validate checks the field values on GetManagerMemberListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetManagerMemberListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetManagerMemberListRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetManagerMemberListResMultiError, or nil if none found.
func (m *GetManagerMemberListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetManagerMemberListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetManagerMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetManagerMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetManagerMemberListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetManagerMemberListResMultiError(errors)
	}

	return nil
}

// GetManagerMemberListResMultiError is an error wrapping multiple validation
// errors returned by GetManagerMemberListRes.ValidateAll() if the designated
// constraints aren't met.
type GetManagerMemberListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetManagerMemberListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetManagerMemberListResMultiError) AllErrors() []error { return m }

// GetManagerMemberListResValidationError is the validation error returned by
// GetManagerMemberListRes.Validate if the designated constraints aren't met.
type GetManagerMemberListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetManagerMemberListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetManagerMemberListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetManagerMemberListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetManagerMemberListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetManagerMemberListResValidationError) ErrorName() string {
	return "GetManagerMemberListResValidationError"
}

// Error satisfies the builtin error interface
func (e GetManagerMemberListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetManagerMemberListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetManagerMemberListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetManagerMemberListResValidationError{}

// Validate checks the field values on MemberInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemberInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemberInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemberInfoMultiError, or
// nil if none found.
func (m *MemberInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MemberInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Ctime

	// no validation rules for PmsManagerType

	// no validation rules for Position

	// no validation rules for ActiveTime

	if len(errors) > 0 {
		return MemberInfoMultiError(errors)
	}

	return nil
}

// MemberInfoMultiError is an error wrapping multiple validation errors
// returned by MemberInfo.ValidateAll() if the designated constraints aren't met.
type MemberInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberInfoMultiError) AllErrors() []error { return m }

// MemberInfoValidationError is the validation error returned by
// MemberInfo.Validate if the designated constraints aren't met.
type MemberInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberInfoValidationError) ErrorName() string { return "MemberInfoValidationError" }

// Error satisfies the builtin error interface
func (e MemberInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemberInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberInfoValidationError{}

// Validate checks the field values on CreateManagerMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateManagerMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateManagerMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateManagerMemberReqMultiError, or nil if none found.
func (m *CreateManagerMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateManagerMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := CreateManagerMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUids()) < 1 {
		err := CreateManagerMemberReqValidationError{
			field:  "Uids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateManagerMemberReqMultiError(errors)
	}

	return nil
}

// CreateManagerMemberReqMultiError is an error wrapping multiple validation
// errors returned by CreateManagerMemberReq.ValidateAll() if the designated
// constraints aren't met.
type CreateManagerMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateManagerMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateManagerMemberReqMultiError) AllErrors() []error { return m }

// CreateManagerMemberReqValidationError is the validation error returned by
// CreateManagerMemberReq.Validate if the designated constraints aren't met.
type CreateManagerMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateManagerMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateManagerMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateManagerMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateManagerMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateManagerMemberReqValidationError) ErrorName() string {
	return "CreateManagerMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateManagerMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateManagerMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateManagerMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateManagerMemberReqValidationError{}

// Validate checks the field values on CreateManagerMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateManagerMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateManagerMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateManagerMemberResMultiError, or nil if none found.
func (m *CreateManagerMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateManagerMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateManagerMemberResMultiError(errors)
	}

	return nil
}

// CreateManagerMemberResMultiError is an error wrapping multiple validation
// errors returned by CreateManagerMemberRes.ValidateAll() if the designated
// constraints aren't met.
type CreateManagerMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateManagerMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateManagerMemberResMultiError) AllErrors() []error { return m }

// CreateManagerMemberResValidationError is the validation error returned by
// CreateManagerMemberRes.Validate if the designated constraints aren't met.
type CreateManagerMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateManagerMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateManagerMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateManagerMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateManagerMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateManagerMemberResValidationError) ErrorName() string {
	return "CreateManagerMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateManagerMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateManagerMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateManagerMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateManagerMemberResValidationError{}

// Validate checks the field values on DeleteManagerMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteManagerMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteManagerMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteManagerMemberReqMultiError, or nil if none found.
func (m *DeleteManagerMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteManagerMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := DeleteManagerMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := DeleteManagerMemberReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteManagerMemberReqMultiError(errors)
	}

	return nil
}

// DeleteManagerMemberReqMultiError is an error wrapping multiple validation
// errors returned by DeleteManagerMemberReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteManagerMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteManagerMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteManagerMemberReqMultiError) AllErrors() []error { return m }

// DeleteManagerMemberReqValidationError is the validation error returned by
// DeleteManagerMemberReq.Validate if the designated constraints aren't met.
type DeleteManagerMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteManagerMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteManagerMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteManagerMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteManagerMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteManagerMemberReqValidationError) ErrorName() string {
	return "DeleteManagerMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteManagerMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteManagerMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteManagerMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteManagerMemberReqValidationError{}

// Validate checks the field values on DeleteManagerMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteManagerMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteManagerMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteManagerMemberResMultiError, or nil if none found.
func (m *DeleteManagerMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteManagerMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteManagerMemberResMultiError(errors)
	}

	return nil
}

// DeleteManagerMemberResMultiError is an error wrapping multiple validation
// errors returned by DeleteManagerMemberRes.ValidateAll() if the designated
// constraints aren't met.
type DeleteManagerMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteManagerMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteManagerMemberResMultiError) AllErrors() []error { return m }

// DeleteManagerMemberResValidationError is the validation error returned by
// DeleteManagerMemberRes.Validate if the designated constraints aren't met.
type DeleteManagerMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteManagerMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteManagerMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteManagerMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteManagerMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteManagerMemberResValidationError) ErrorName() string {
	return "DeleteManagerMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteManagerMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteManagerMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteManagerMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteManagerMemberResValidationError{}

// Validate checks the field values on GetRoleListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleListReqMultiError,
// or nil if none found.
func (m *GetRoleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if len(errors) > 0 {
		return GetRoleListReqMultiError(errors)
	}

	return nil
}

// GetRoleListReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetRoleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleListReqMultiError) AllErrors() []error { return m }

// GetRoleListReqValidationError is the validation error returned by
// GetRoleListReq.Validate if the designated constraints aren't met.
type GetRoleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleListReqValidationError) ErrorName() string { return "GetRoleListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleListReqValidationError{}

// Validate checks the field values on GetRoleListRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleListRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleListResMultiError,
// or nil if none found.
func (m *GetRoleListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleListResMultiError(errors)
	}

	return nil
}

// GetRoleListResMultiError is an error wrapping multiple validation errors
// returned by GetRoleListRes.ValidateAll() if the designated constraints
// aren't met.
type GetRoleListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleListResMultiError) AllErrors() []error { return m }

// GetRoleListResValidationError is the validation error returned by
// GetRoleListRes.Validate if the designated constraints aren't met.
type GetRoleListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleListResValidationError) ErrorName() string { return "GetRoleListResValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleListResValidationError{}

// Validate checks the field values on GetRoleIdsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleIdsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleIdsReqMultiError, or
// nil if none found.
func (m *GetRoleIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := GetRoleIdsReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoleIdsReqMultiError(errors)
	}

	return nil
}

// GetRoleIdsReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleIdsReq.ValidateAll() if the designated constraints
// aren't met.
type GetRoleIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleIdsReqMultiError) AllErrors() []error { return m }

// GetRoleIdsReqValidationError is the validation error returned by
// GetRoleIdsReq.Validate if the designated constraints aren't met.
type GetRoleIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleIdsReqValidationError) ErrorName() string { return "GetRoleIdsReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleIdsReqValidationError{}

// Validate checks the field values on GetRoleIdsRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleIdsRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleIdsRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleIdsResMultiError, or
// nil if none found.
func (m *GetRoleIdsRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleIdsRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRoleIdsResMultiError(errors)
	}

	return nil
}

// GetRoleIdsResMultiError is an error wrapping multiple validation errors
// returned by GetRoleIdsRes.ValidateAll() if the designated constraints
// aren't met.
type GetRoleIdsResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleIdsResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleIdsResMultiError) AllErrors() []error { return m }

// GetRoleIdsResValidationError is the validation error returned by
// GetRoleIdsRes.Validate if the designated constraints aren't met.
type GetRoleIdsResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleIdsResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleIdsResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleIdsResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleIdsResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleIdsResValidationError) ErrorName() string { return "GetRoleIdsResValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleIdsResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleIdsRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleIdsResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleIdsResValidationError{}

// Validate checks the field values on CreateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleReqMultiError, or
// nil if none found.
func (m *CreateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := CreateRoleReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateRoleReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleReqMultiError(errors)
	}

	return nil
}

// CreateRoleReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReqMultiError) AllErrors() []error { return m }

// CreateRoleReqValidationError is the validation error returned by
// CreateRoleReq.Validate if the designated constraints aren't met.
type CreateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReqValidationError) ErrorName() string { return "CreateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReqValidationError{}

// Validate checks the field values on CreateRoleRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleResMultiError, or
// nil if none found.
func (m *CreateRoleRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateRoleResMultiError(errors)
	}

	return nil
}

// CreateRoleResMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRes.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResMultiError) AllErrors() []error { return m }

// CreateRoleResValidationError is the validation error returned by
// CreateRoleRes.Validate if the designated constraints aren't met.
type CreateRoleResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResValidationError) ErrorName() string { return "CreateRoleResValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := UpdateRoleReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleId

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleResMultiError, or
// nil if none found.
func (m *UpdateRoleRes) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleResMultiError(errors)
	}

	return nil
}

// UpdateRoleResMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRes.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResMultiError) AllErrors() []error { return m }

// UpdateRoleResValidationError is the validation error returned by
// UpdateRoleRes.Validate if the designated constraints aren't met.
type UpdateRoleResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResValidationError) ErrorName() string { return "UpdateRoleResValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleReqMultiError, or
// nil if none found.
func (m *DeleteRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := DeleteRoleReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := DeleteRoleReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoleReqMultiError(errors)
	}

	return nil
}

// DeleteRoleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReqMultiError) AllErrors() []error { return m }

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on DeleteRoleRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleResMultiError, or
// nil if none found.
func (m *DeleteRoleRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleResMultiError(errors)
	}

	return nil
}

// DeleteRoleResMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRes.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResMultiError) AllErrors() []error { return m }

// DeleteRoleResValidationError is the validation error returned by
// DeleteRoleRes.Validate if the designated constraints aren't met.
type DeleteRoleResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResValidationError) ErrorName() string { return "DeleteRoleResValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResValidationError{}

// Validate checks the field values on GetRoleMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMemberListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMemberListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMemberListReqMultiError, or nil if none found.
func (m *GetRoleMemberListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMemberListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	if m.GetRoleId() <= 0 {
		err := GetRoleMemberListReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoleMemberListReqMultiError(errors)
	}

	return nil
}

// GetRoleMemberListReqMultiError is an error wrapping multiple validation
// errors returned by GetRoleMemberListReq.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMemberListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMemberListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMemberListReqMultiError) AllErrors() []error { return m }

// GetRoleMemberListReqValidationError is the validation error returned by
// GetRoleMemberListReq.Validate if the designated constraints aren't met.
type GetRoleMemberListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMemberListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMemberListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMemberListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMemberListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMemberListReqValidationError) ErrorName() string {
	return "GetRoleMemberListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMemberListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMemberListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMemberListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMemberListReqValidationError{}

// Validate checks the field values on GetRoleMemberListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleMemberListRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleMemberListRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleMemberListResMultiError, or nil if none found.
func (m *GetRoleMemberListRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleMemberListRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoleMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoleMemberListResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoleMemberListResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoleMemberListResMultiError(errors)
	}

	return nil
}

// GetRoleMemberListResMultiError is an error wrapping multiple validation
// errors returned by GetRoleMemberListRes.ValidateAll() if the designated
// constraints aren't met.
type GetRoleMemberListResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleMemberListResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleMemberListResMultiError) AllErrors() []error { return m }

// GetRoleMemberListResValidationError is the validation error returned by
// GetRoleMemberListRes.Validate if the designated constraints aren't met.
type GetRoleMemberListResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleMemberListResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleMemberListResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleMemberListResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleMemberListResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleMemberListResValidationError) ErrorName() string {
	return "GetRoleMemberListResValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleMemberListResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleMemberListRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleMemberListResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleMemberListResValidationError{}

// Validate checks the field values on RoleInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInfoMultiError, or nil
// if none found.
func (m *RoleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return RoleInfoMultiError(errors)
	}

	return nil
}

// RoleInfoMultiError is an error wrapping multiple validation errors returned
// by RoleInfo.ValidateAll() if the designated constraints aren't met.
type RoleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInfoMultiError) AllErrors() []error { return m }

// RoleInfoValidationError is the validation error returned by
// RoleInfo.Validate if the designated constraints aren't met.
type RoleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInfoValidationError) ErrorName() string { return "RoleInfoValidationError" }

// Error satisfies the builtin error interface
func (e RoleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInfoValidationError{}

// Validate checks the field values on CreateRoleMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleMemberReqMultiError, or nil if none found.
func (m *CreateRoleMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := CreateRoleMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUids()) < 1 {
		err := CreateRoleMemberReqValidationError{
			field:  "Uids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleId

	if len(errors) > 0 {
		return CreateRoleMemberReqMultiError(errors)
	}

	return nil
}

// CreateRoleMemberReqMultiError is an error wrapping multiple validation
// errors returned by CreateRoleMemberReq.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMemberReqMultiError) AllErrors() []error { return m }

// CreateRoleMemberReqValidationError is the validation error returned by
// CreateRoleMemberReq.Validate if the designated constraints aren't met.
type CreateRoleMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleMemberReqValidationError) ErrorName() string {
	return "CreateRoleMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleMemberReqValidationError{}

// Validate checks the field values on CreateRoleMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleMemberResMultiError, or nil if none found.
func (m *CreateRoleMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleMemberResMultiError(errors)
	}

	return nil
}

// CreateRoleMemberResMultiError is an error wrapping multiple validation
// errors returned by CreateRoleMemberRes.ValidateAll() if the designated
// constraints aren't met.
type CreateRoleMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleMemberResMultiError) AllErrors() []error { return m }

// CreateRoleMemberResValidationError is the validation error returned by
// CreateRoleMemberRes.Validate if the designated constraints aren't met.
type CreateRoleMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleMemberResValidationError) ErrorName() string {
	return "CreateRoleMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleMemberResValidationError{}

// Validate checks the field values on DeleteRoleMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleMemberReqMultiError, or nil if none found.
func (m *DeleteRoleMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := DeleteRoleMemberReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DeleteRoleMemberReqMultiError(errors)
	}

	return nil
}

// DeleteRoleMemberReqMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleMemberReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleMemberReqMultiError) AllErrors() []error { return m }

// DeleteRoleMemberReqValidationError is the validation error returned by
// DeleteRoleMemberReq.Validate if the designated constraints aren't met.
type DeleteRoleMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleMemberReqValidationError) ErrorName() string {
	return "DeleteRoleMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleMemberReqValidationError{}

// Validate checks the field values on DeleteRoleMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleMemberRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleMemberRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleMemberResMultiError, or nil if none found.
func (m *DeleteRoleMemberRes) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleMemberRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleMemberResMultiError(errors)
	}

	return nil
}

// DeleteRoleMemberResMultiError is an error wrapping multiple validation
// errors returned by DeleteRoleMemberRes.ValidateAll() if the designated
// constraints aren't met.
type DeleteRoleMemberResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleMemberResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleMemberResMultiError) AllErrors() []error { return m }

// DeleteRoleMemberResValidationError is the validation error returned by
// DeleteRoleMemberRes.Validate if the designated constraints aren't met.
type DeleteRoleMemberResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleMemberResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleMemberResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleMemberResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleMemberResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleMemberResValidationError) ErrorName() string {
	return "DeleteRoleMemberResValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleMemberResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleMemberRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleMemberResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleMemberResValidationError{}

// Validate checks the field values on GetRolePermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolePermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolePermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolePermissionReqMultiError, or nil if none found.
func (m *GetRolePermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolePermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := GetRolePermissionReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := GetRolePermissionReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRolePermissionReqMultiError(errors)
	}

	return nil
}

// GetRolePermissionReqMultiError is an error wrapping multiple validation
// errors returned by GetRolePermissionReq.ValidateAll() if the designated
// constraints aren't met.
type GetRolePermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolePermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolePermissionReqMultiError) AllErrors() []error { return m }

// GetRolePermissionReqValidationError is the validation error returned by
// GetRolePermissionReq.Validate if the designated constraints aren't met.
type GetRolePermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolePermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolePermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolePermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolePermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolePermissionReqValidationError) ErrorName() string {
	return "GetRolePermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolePermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolePermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolePermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolePermissionReqValidationError{}

// Validate checks the field values on GetRolePermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRolePermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolePermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolePermissionResMultiError, or nil if none found.
func (m *GetRolePermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolePermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRolePermissionResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRolePermissionResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRolePermissionResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpaceList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRolePermissionResValidationError{
						field:  fmt.Sprintf("SpaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRolePermissionResValidationError{
						field:  fmt.Sprintf("SpaceList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRolePermissionResValidationError{
					field:  fmt.Sprintf("SpaceList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpaceGroupList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRolePermissionResValidationError{
						field:  fmt.Sprintf("SpaceGroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRolePermissionResValidationError{
						field:  fmt.Sprintf("SpaceGroupList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRolePermissionResValidationError{
					field:  fmt.Sprintf("SpaceGroupList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRolePermissionResMultiError(errors)
	}

	return nil
}

// GetRolePermissionResMultiError is an error wrapping multiple validation
// errors returned by GetRolePermissionRes.ValidateAll() if the designated
// constraints aren't met.
type GetRolePermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolePermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolePermissionResMultiError) AllErrors() []error { return m }

// GetRolePermissionResValidationError is the validation error returned by
// GetRolePermissionRes.Validate if the designated constraints aren't met.
type GetRolePermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolePermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolePermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolePermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolePermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolePermissionResValidationError) ErrorName() string {
	return "GetRolePermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e GetRolePermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolePermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolePermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolePermissionResValidationError{}

// Validate checks the field values on GetInitActionOptionPermissionReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInitActionOptionPermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInitActionOptionPermissionReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInitActionOptionPermissionReqMultiError, or nil if none found.
func (m *GetInitActionOptionPermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInitActionOptionPermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperateUid

	// no validation rules for Guid

	// no validation rules for Type

	if len(errors) > 0 {
		return GetInitActionOptionPermissionReqMultiError(errors)
	}

	return nil
}

// GetInitActionOptionPermissionReqMultiError is an error wrapping multiple
// validation errors returned by
// GetInitActionOptionPermissionReq.ValidateAll() if the designated
// constraints aren't met.
type GetInitActionOptionPermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInitActionOptionPermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInitActionOptionPermissionReqMultiError) AllErrors() []error { return m }

// GetInitActionOptionPermissionReqValidationError is the validation error
// returned by GetInitActionOptionPermissionReq.Validate if the designated
// constraints aren't met.
type GetInitActionOptionPermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInitActionOptionPermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInitActionOptionPermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInitActionOptionPermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInitActionOptionPermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInitActionOptionPermissionReqValidationError) ErrorName() string {
	return "GetInitActionOptionPermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetInitActionOptionPermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInitActionOptionPermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInitActionOptionPermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInitActionOptionPermissionReqValidationError{}

// Validate checks the field values on GetInitActionOptionPermissionRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInitActionOptionPermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInitActionOptionPermissionRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInitActionOptionPermissionResMultiError, or nil if none found.
func (m *GetInitActionOptionPermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInitActionOptionPermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInitActionOptionPermissionResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInitActionOptionPermissionResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInitActionOptionPermissionResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetInitActionOptionPermissionResMultiError(errors)
	}

	return nil
}

// GetInitActionOptionPermissionResMultiError is an error wrapping multiple
// validation errors returned by
// GetInitActionOptionPermissionRes.ValidateAll() if the designated
// constraints aren't met.
type GetInitActionOptionPermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInitActionOptionPermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInitActionOptionPermissionResMultiError) AllErrors() []error { return m }

// GetInitActionOptionPermissionResValidationError is the validation error
// returned by GetInitActionOptionPermissionRes.Validate if the designated
// constraints aren't met.
type GetInitActionOptionPermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInitActionOptionPermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInitActionOptionPermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInitActionOptionPermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInitActionOptionPermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInitActionOptionPermissionResValidationError) ErrorName() string {
	return "GetInitActionOptionPermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e GetInitActionOptionPermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInitActionOptionPermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInitActionOptionPermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInitActionOptionPermissionResValidationError{}

// Validate checks the field values on PutRolePermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutRolePermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRolePermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutRolePermissionReqMultiError, or nil if none found.
func (m *PutRolePermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRolePermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := PutRolePermissionReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := PutRolePermissionReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PutRolePermissionReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PutRolePermissionReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PutRolePermissionReqValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PutRolePermissionReqMultiError(errors)
	}

	return nil
}

// PutRolePermissionReqMultiError is an error wrapping multiple validation
// errors returned by PutRolePermissionReq.ValidateAll() if the designated
// constraints aren't met.
type PutRolePermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRolePermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRolePermissionReqMultiError) AllErrors() []error { return m }

// PutRolePermissionReqValidationError is the validation error returned by
// PutRolePermissionReq.Validate if the designated constraints aren't met.
type PutRolePermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRolePermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRolePermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRolePermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRolePermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRolePermissionReqValidationError) ErrorName() string {
	return "PutRolePermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e PutRolePermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRolePermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRolePermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRolePermissionReqValidationError{}

// Validate checks the field values on PutRoleSpaceGroupPermissionReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutRoleSpaceGroupPermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRoleSpaceGroupPermissionReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PutRoleSpaceGroupPermissionReqMultiError, or nil if none found.
func (m *PutRoleSpaceGroupPermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRoleSpaceGroupPermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := PutRoleSpaceGroupPermissionReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := PutRoleSpaceGroupPermissionReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PutRoleSpaceGroupPermissionReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PutRoleSpaceGroupPermissionReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PutRoleSpaceGroupPermissionReqValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PutRoleSpaceGroupPermissionReqMultiError(errors)
	}

	return nil
}

// PutRoleSpaceGroupPermissionReqMultiError is an error wrapping multiple
// validation errors returned by PutRoleSpaceGroupPermissionReq.ValidateAll()
// if the designated constraints aren't met.
type PutRoleSpaceGroupPermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRoleSpaceGroupPermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRoleSpaceGroupPermissionReqMultiError) AllErrors() []error { return m }

// PutRoleSpaceGroupPermissionReqValidationError is the validation error
// returned by PutRoleSpaceGroupPermissionReq.Validate if the designated
// constraints aren't met.
type PutRoleSpaceGroupPermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRoleSpaceGroupPermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRoleSpaceGroupPermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRoleSpaceGroupPermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRoleSpaceGroupPermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRoleSpaceGroupPermissionReqValidationError) ErrorName() string {
	return "PutRoleSpaceGroupPermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e PutRoleSpaceGroupPermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRoleSpaceGroupPermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRoleSpaceGroupPermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRoleSpaceGroupPermissionReqValidationError{}

// Validate checks the field values on PutRoleSpacePermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutRoleSpacePermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRoleSpacePermissionReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutRoleSpacePermissionReqMultiError, or nil if none found.
func (m *PutRoleSpacePermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRoleSpacePermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOperateUid() <= 0 {
		err := PutRoleSpacePermissionReqValidationError{
			field:  "OperateUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoleId() <= 0 {
		err := PutRoleSpacePermissionReqValidationError{
			field:  "RoleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PutRoleSpacePermissionReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PutRoleSpacePermissionReqValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PutRoleSpacePermissionReqValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PutRoleSpacePermissionReqMultiError(errors)
	}

	return nil
}

// PutRoleSpacePermissionReqMultiError is an error wrapping multiple validation
// errors returned by PutRoleSpacePermissionReq.ValidateAll() if the
// designated constraints aren't met.
type PutRoleSpacePermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRoleSpacePermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRoleSpacePermissionReqMultiError) AllErrors() []error { return m }

// PutRoleSpacePermissionReqValidationError is the validation error returned by
// PutRoleSpacePermissionReq.Validate if the designated constraints aren't met.
type PutRoleSpacePermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRoleSpacePermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRoleSpacePermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRoleSpacePermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRoleSpacePermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRoleSpacePermissionReqValidationError) ErrorName() string {
	return "PutRoleSpacePermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e PutRoleSpacePermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRoleSpacePermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRoleSpacePermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRoleSpacePermissionReqValidationError{}

// Validate checks the field values on SpacePmsItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpacePmsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpacePmsItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpacePmsItemMultiError, or
// nil if none found.
func (m *SpacePmsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SpacePmsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpacePmsItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpacePmsItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpacePmsItemValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpacePmsItemMultiError(errors)
	}

	return nil
}

// SpacePmsItemMultiError is an error wrapping multiple validation errors
// returned by SpacePmsItem.ValidateAll() if the designated constraints aren't met.
type SpacePmsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpacePmsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpacePmsItemMultiError) AllErrors() []error { return m }

// SpacePmsItemValidationError is the validation error returned by
// SpacePmsItem.Validate if the designated constraints aren't met.
type SpacePmsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpacePmsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpacePmsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpacePmsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpacePmsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpacePmsItemValidationError) ErrorName() string { return "SpacePmsItemValidationError" }

// Error satisfies the builtin error interface
func (e SpacePmsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpacePmsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpacePmsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpacePmsItemValidationError{}

// Validate checks the field values on SpaceGroupPmsItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SpaceGroupPmsItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpaceGroupPmsItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpaceGroupPmsItemMultiError, or nil if none found.
func (m *SpaceGroupPmsItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SpaceGroupPmsItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Guid

	// no validation rules for Name

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpaceGroupPmsItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpaceGroupPmsItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpaceGroupPmsItemValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpaceGroupPmsItemMultiError(errors)
	}

	return nil
}

// SpaceGroupPmsItemMultiError is an error wrapping multiple validation errors
// returned by SpaceGroupPmsItem.ValidateAll() if the designated constraints
// aren't met.
type SpaceGroupPmsItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpaceGroupPmsItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpaceGroupPmsItemMultiError) AllErrors() []error { return m }

// SpaceGroupPmsItemValidationError is the validation error returned by
// SpaceGroupPmsItem.Validate if the designated constraints aren't met.
type SpaceGroupPmsItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpaceGroupPmsItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpaceGroupPmsItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpaceGroupPmsItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpaceGroupPmsItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpaceGroupPmsItemValidationError) ErrorName() string {
	return "SpaceGroupPmsItemValidationError"
}

// Error satisfies the builtin error interface
func (e SpaceGroupPmsItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpaceGroupPmsItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpaceGroupPmsItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpaceGroupPmsItemValidationError{}

// Validate checks the field values on PutRolePermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutRolePermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRolePermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutRolePermissionResMultiError, or nil if none found.
func (m *PutRolePermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRolePermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutRolePermissionResMultiError(errors)
	}

	return nil
}

// PutRolePermissionResMultiError is an error wrapping multiple validation
// errors returned by PutRolePermissionRes.ValidateAll() if the designated
// constraints aren't met.
type PutRolePermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRolePermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRolePermissionResMultiError) AllErrors() []error { return m }

// PutRolePermissionResValidationError is the validation error returned by
// PutRolePermissionRes.Validate if the designated constraints aren't met.
type PutRolePermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRolePermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRolePermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRolePermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRolePermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRolePermissionResValidationError) ErrorName() string {
	return "PutRolePermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e PutRolePermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRolePermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRolePermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRolePermissionResValidationError{}

// Validate checks the field values on PutRoleSpaceGroupPermissionRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutRoleSpaceGroupPermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRoleSpaceGroupPermissionRes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PutRoleSpaceGroupPermissionResMultiError, or nil if none found.
func (m *PutRoleSpaceGroupPermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRoleSpaceGroupPermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutRoleSpaceGroupPermissionResMultiError(errors)
	}

	return nil
}

// PutRoleSpaceGroupPermissionResMultiError is an error wrapping multiple
// validation errors returned by PutRoleSpaceGroupPermissionRes.ValidateAll()
// if the designated constraints aren't met.
type PutRoleSpaceGroupPermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRoleSpaceGroupPermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRoleSpaceGroupPermissionResMultiError) AllErrors() []error { return m }

// PutRoleSpaceGroupPermissionResValidationError is the validation error
// returned by PutRoleSpaceGroupPermissionRes.Validate if the designated
// constraints aren't met.
type PutRoleSpaceGroupPermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRoleSpaceGroupPermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRoleSpaceGroupPermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRoleSpaceGroupPermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRoleSpaceGroupPermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRoleSpaceGroupPermissionResValidationError) ErrorName() string {
	return "PutRoleSpaceGroupPermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e PutRoleSpaceGroupPermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRoleSpaceGroupPermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRoleSpaceGroupPermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRoleSpaceGroupPermissionResValidationError{}

// Validate checks the field values on PutRoleSpacePermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutRoleSpacePermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutRoleSpacePermissionRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutRoleSpacePermissionResMultiError, or nil if none found.
func (m *PutRoleSpacePermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *PutRoleSpacePermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutRoleSpacePermissionResMultiError(errors)
	}

	return nil
}

// PutRoleSpacePermissionResMultiError is an error wrapping multiple validation
// errors returned by PutRoleSpacePermissionRes.ValidateAll() if the
// designated constraints aren't met.
type PutRoleSpacePermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutRoleSpacePermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutRoleSpacePermissionResMultiError) AllErrors() []error { return m }

// PutRoleSpacePermissionResValidationError is the validation error returned by
// PutRoleSpacePermissionRes.Validate if the designated constraints aren't met.
type PutRoleSpacePermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutRoleSpacePermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutRoleSpacePermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutRoleSpacePermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutRoleSpacePermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutRoleSpacePermissionResValidationError) ErrorName() string {
	return "PutRoleSpacePermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e PutRoleSpacePermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutRoleSpacePermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutRoleSpacePermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutRoleSpacePermissionResValidationError{}

// Validate checks the field values on CheckReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckReqMultiError, or nil
// if none found.
func (m *CheckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CheckReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ActionName

	if utf8.RuneCountInString(m.GetGuid()) < 1 {
		err := CheckReqValidationError{
			field:  "Guid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckReqMultiError(errors)
	}

	return nil
}

// CheckReqMultiError is an error wrapping multiple validation errors returned
// by CheckReq.ValidateAll() if the designated constraints aren't met.
type CheckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckReqMultiError) AllErrors() []error { return m }

// CheckReqValidationError is the validation error returned by
// CheckReq.Validate if the designated constraints aren't met.
type CheckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckReqValidationError) ErrorName() string { return "CheckReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckReqValidationError{}

// Validate checks the field values on CheckRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResMultiError, or nil
// if none found.
func (m *CheckRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Flag

	if len(errors) > 0 {
		return CheckResMultiError(errors)
	}

	return nil
}

// CheckResMultiError is an error wrapping multiple validation errors returned
// by CheckRes.ValidateAll() if the designated constraints aren't met.
type CheckResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResMultiError) AllErrors() []error { return m }

// CheckResValidationError is the validation error returned by
// CheckRes.Validate if the designated constraints aren't met.
type CheckResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResValidationError) ErrorName() string { return "CheckResValidationError" }

// Error satisfies the builtin error interface
func (e CheckResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResValidationError{}

// Validate checks the field values on TotalInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TotalInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TotalInfoReqMultiError, or
// nil if none found.
func (m *TotalInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return TotalInfoReqMultiError(errors)
	}

	return nil
}

// TotalInfoReqMultiError is an error wrapping multiple validation errors
// returned by TotalInfoReq.ValidateAll() if the designated constraints aren't met.
type TotalInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalInfoReqMultiError) AllErrors() []error { return m }

// TotalInfoReqValidationError is the validation error returned by
// TotalInfoReq.Validate if the designated constraints aren't met.
type TotalInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalInfoReqValidationError) ErrorName() string { return "TotalInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e TotalInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalInfoReqValidationError{}

// Validate checks the field values on TotalInfoRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TotalInfoRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TotalInfoRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TotalInfoResMultiError, or
// nil if none found.
func (m *TotalInfoRes) ValidateAll() error {
	return m.validate(true)
}

func (m *TotalInfoRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SuperAdminCnt

	// no validation rules for RoleMemberCnt

	if len(errors) > 0 {
		return TotalInfoResMultiError(errors)
	}

	return nil
}

// TotalInfoResMultiError is an error wrapping multiple validation errors
// returned by TotalInfoRes.ValidateAll() if the designated constraints aren't met.
type TotalInfoResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TotalInfoResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TotalInfoResMultiError) AllErrors() []error { return m }

// TotalInfoResValidationError is the validation error returned by
// TotalInfoRes.Validate if the designated constraints aren't met.
type TotalInfoResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalInfoResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalInfoResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalInfoResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalInfoResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalInfoResValidationError) ErrorName() string { return "TotalInfoResValidationError" }

// Error satisfies the builtin error interface
func (e TotalInfoResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalInfoRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalInfoResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalInfoResValidationError{}

// Validate checks the field values on CommunityPermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommunityPermissionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityPermissionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommunityPermissionReqMultiError, or nil if none found.
func (m *CommunityPermissionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityPermissionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := CommunityPermissionReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommunityPermissionReqMultiError(errors)
	}

	return nil
}

// CommunityPermissionReqMultiError is an error wrapping multiple validation
// errors returned by CommunityPermissionReq.ValidateAll() if the designated
// constraints aren't met.
type CommunityPermissionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityPermissionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityPermissionReqMultiError) AllErrors() []error { return m }

// CommunityPermissionReqValidationError is the validation error returned by
// CommunityPermissionReq.Validate if the designated constraints aren't met.
type CommunityPermissionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityPermissionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityPermissionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityPermissionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityPermissionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityPermissionReqValidationError) ErrorName() string {
	return "CommunityPermissionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CommunityPermissionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityPermissionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityPermissionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityPermissionReqValidationError{}

// Validate checks the field values on CommunityPermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommunityPermissionRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommunityPermissionRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommunityPermissionResMultiError, or nil if none found.
func (m *CommunityPermissionRes) ValidateAll() error {
	return m.validate(true)
}

func (m *CommunityPermissionRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAllowManageCommunity

	// no validation rules for IsAllowCreateSpaceGroup

	// no validation rules for IsAllowCreateSpace

	// no validation rules for IsAllowUpgradeEdition

	if len(errors) > 0 {
		return CommunityPermissionResMultiError(errors)
	}

	return nil
}

// CommunityPermissionResMultiError is an error wrapping multiple validation
// errors returned by CommunityPermissionRes.ValidateAll() if the designated
// constraints aren't met.
type CommunityPermissionResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommunityPermissionResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommunityPermissionResMultiError) AllErrors() []error { return m }

// CommunityPermissionResValidationError is the validation error returned by
// CommunityPermissionRes.Validate if the designated constraints aren't met.
type CommunityPermissionResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommunityPermissionResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommunityPermissionResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommunityPermissionResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommunityPermissionResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommunityPermissionResValidationError) ErrorName() string {
	return "CommunityPermissionResValidationError"
}

// Error satisfies the builtin error interface
func (e CommunityPermissionResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommunityPermissionRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommunityPermissionResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommunityPermissionResValidationError{}
