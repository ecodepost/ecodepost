// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pmsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PmsClient is the client API for Pms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PmsClient interface {
	// 添加管理员的成员
	CreateManagerMember(ctx context.Context, in *CreateManagerMemberReq, opts ...grpc.CallOption) (*CreateManagerMemberRes, error)
	// 删除管理员的成员
	DeleteManagerMember(ctx context.Context, in *DeleteManagerMemberReq, opts ...grpc.CallOption) (*DeleteManagerMemberRes, error)
	// 获取某个用户的role list
	GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...grpc.CallOption) (*GetRoleListRes, error)
	// 获取某个用户的role ids
	GetRoleIds(ctx context.Context, in *GetRoleIdsReq, opts ...grpc.CallOption) (*GetRoleIdsRes, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleRes, error)
	// 更新角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleRes, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleRes, error)
	// 获取角色成员列表
	GetRoleMemberList(ctx context.Context, in *GetRoleMemberListReq, opts ...grpc.CallOption) (*GetRoleMemberListRes, error)
	// 获取角色的权限
	GetRolePermission(ctx context.Context, in *GetRolePermissionReq, opts ...grpc.CallOption) (*GetRolePermissionRes, error)
	// 获取某种类型的初始权限列表
	GetInitActionOptionPermission(ctx context.Context, in *GetInitActionOptionPermissionReq, opts ...grpc.CallOption) (*GetInitActionOptionPermissionRes, error)
	// 为成员赋予角色
	CreateRoleMember(ctx context.Context, in *CreateRoleMemberReq, opts ...grpc.CallOption) (*CreateRoleMemberRes, error)
	// 为成员删除角色
	DeleteRoleMember(ctx context.Context, in *DeleteRoleMemberReq, opts ...grpc.CallOption) (*DeleteRoleMemberRes, error)
	// 设置一个role的权限
	PutRolePermission(ctx context.Context, in *PutRolePermissionReq, opts ...grpc.CallOption) (*PutRolePermissionRes, error)
	// 设置一个role space的权限
	PutRoleSpaceGroupPermission(ctx context.Context, in *PutRoleSpaceGroupPermissionReq, opts ...grpc.CallOption) (*PutRoleSpaceGroupPermissionRes, error)
	// 设置一个role space的权限
	PutRoleSpacePermission(ctx context.Context, in *PutRoleSpacePermissionReq, opts ...grpc.CallOption) (*PutRoleSpacePermissionRes, error)
	// 校验是否有权限
	Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckRes, error)
	// 统计信息
	TotalInfo(ctx context.Context, in *TotalInfoReq, opts ...grpc.CallOption) (*TotalInfoRes, error)
	// 社区
	CommunityPermission(ctx context.Context, in *CommunityPermissionReq, opts ...grpc.CallOption) (*CommunityPermissionRes, error)
	// 超级会员
	GetManagerMemberList(ctx context.Context, in *GetManagerMemberListReq, opts ...grpc.CallOption) (*GetManagerMemberListRes, error)
}

type pmsClient struct {
	cc grpc.ClientConnInterface
}

func NewPmsClient(cc grpc.ClientConnInterface) PmsClient {
	return &pmsClient{cc}
}

func (c *pmsClient) CreateManagerMember(ctx context.Context, in *CreateManagerMemberReq, opts ...grpc.CallOption) (*CreateManagerMemberRes, error) {
	out := new(CreateManagerMemberRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/CreateManagerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) DeleteManagerMember(ctx context.Context, in *DeleteManagerMemberReq, opts ...grpc.CallOption) (*DeleteManagerMemberRes, error) {
	out := new(DeleteManagerMemberRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/DeleteManagerMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...grpc.CallOption) (*GetRoleListRes, error) {
	out := new(GetRoleListRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/GetRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetRoleIds(ctx context.Context, in *GetRoleIdsReq, opts ...grpc.CallOption) (*GetRoleIdsRes, error) {
	out := new(GetRoleIdsRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/GetRoleIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleRes, error) {
	out := new(CreateRoleRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleRes, error) {
	out := new(UpdateRoleRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleRes, error) {
	out := new(DeleteRoleRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetRoleMemberList(ctx context.Context, in *GetRoleMemberListReq, opts ...grpc.CallOption) (*GetRoleMemberListRes, error) {
	out := new(GetRoleMemberListRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/GetRoleMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetRolePermission(ctx context.Context, in *GetRolePermissionReq, opts ...grpc.CallOption) (*GetRolePermissionRes, error) {
	out := new(GetRolePermissionRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/GetRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetInitActionOptionPermission(ctx context.Context, in *GetInitActionOptionPermissionReq, opts ...grpc.CallOption) (*GetInitActionOptionPermissionRes, error) {
	out := new(GetInitActionOptionPermissionRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/GetInitActionOptionPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CreateRoleMember(ctx context.Context, in *CreateRoleMemberReq, opts ...grpc.CallOption) (*CreateRoleMemberRes, error) {
	out := new(CreateRoleMemberRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/CreateRoleMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) DeleteRoleMember(ctx context.Context, in *DeleteRoleMemberReq, opts ...grpc.CallOption) (*DeleteRoleMemberRes, error) {
	out := new(DeleteRoleMemberRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/DeleteRoleMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) PutRolePermission(ctx context.Context, in *PutRolePermissionReq, opts ...grpc.CallOption) (*PutRolePermissionRes, error) {
	out := new(PutRolePermissionRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/PutRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) PutRoleSpaceGroupPermission(ctx context.Context, in *PutRoleSpaceGroupPermissionReq, opts ...grpc.CallOption) (*PutRoleSpaceGroupPermissionRes, error) {
	out := new(PutRoleSpaceGroupPermissionRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/PutRoleSpaceGroupPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) PutRoleSpacePermission(ctx context.Context, in *PutRoleSpacePermissionReq, opts ...grpc.CallOption) (*PutRoleSpacePermissionRes, error) {
	out := new(PutRoleSpacePermissionRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/PutRoleSpacePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckRes, error) {
	out := new(CheckRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) TotalInfo(ctx context.Context, in *TotalInfoReq, opts ...grpc.CallOption) (*TotalInfoRes, error) {
	out := new(TotalInfoRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/TotalInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) CommunityPermission(ctx context.Context, in *CommunityPermissionReq, opts ...grpc.CallOption) (*CommunityPermissionRes, error) {
	out := new(CommunityPermissionRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/CommunityPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmsClient) GetManagerMemberList(ctx context.Context, in *GetManagerMemberListReq, opts ...grpc.CallOption) (*GetManagerMemberListRes, error) {
	out := new(GetManagerMemberListRes)
	err := c.cc.Invoke(ctx, "/pms.v1.Pms/GetManagerMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmsServer is the server API for Pms service.
// All implementations should embed UnimplementedPmsServer
// for forward compatibility
type PmsServer interface {
	// 添加管理员的成员
	CreateManagerMember(context.Context, *CreateManagerMemberReq) (*CreateManagerMemberRes, error)
	// 删除管理员的成员
	DeleteManagerMember(context.Context, *DeleteManagerMemberReq) (*DeleteManagerMemberRes, error)
	// 获取某个用户的role list
	GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListRes, error)
	// 获取某个用户的role ids
	GetRoleIds(context.Context, *GetRoleIdsReq) (*GetRoleIdsRes, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleRes, error)
	// 更新角色
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleRes, error)
	// 删除角色
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleRes, error)
	// 获取角色成员列表
	GetRoleMemberList(context.Context, *GetRoleMemberListReq) (*GetRoleMemberListRes, error)
	// 获取角色的权限
	GetRolePermission(context.Context, *GetRolePermissionReq) (*GetRolePermissionRes, error)
	// 获取某种类型的初始权限列表
	GetInitActionOptionPermission(context.Context, *GetInitActionOptionPermissionReq) (*GetInitActionOptionPermissionRes, error)
	// 为成员赋予角色
	CreateRoleMember(context.Context, *CreateRoleMemberReq) (*CreateRoleMemberRes, error)
	// 为成员删除角色
	DeleteRoleMember(context.Context, *DeleteRoleMemberReq) (*DeleteRoleMemberRes, error)
	// 设置一个role的权限
	PutRolePermission(context.Context, *PutRolePermissionReq) (*PutRolePermissionRes, error)
	// 设置一个role space的权限
	PutRoleSpaceGroupPermission(context.Context, *PutRoleSpaceGroupPermissionReq) (*PutRoleSpaceGroupPermissionRes, error)
	// 设置一个role space的权限
	PutRoleSpacePermission(context.Context, *PutRoleSpacePermissionReq) (*PutRoleSpacePermissionRes, error)
	// 校验是否有权限
	Check(context.Context, *CheckReq) (*CheckRes, error)
	// 统计信息
	TotalInfo(context.Context, *TotalInfoReq) (*TotalInfoRes, error)
	// 社区
	CommunityPermission(context.Context, *CommunityPermissionReq) (*CommunityPermissionRes, error)
	// 超级会员
	GetManagerMemberList(context.Context, *GetManagerMemberListReq) (*GetManagerMemberListRes, error)
}

// UnimplementedPmsServer should be embedded to have forward compatible implementations.
type UnimplementedPmsServer struct {
}

func (UnimplementedPmsServer) CreateManagerMember(context.Context, *CreateManagerMemberReq) (*CreateManagerMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManagerMember not implemented")
}
func (UnimplementedPmsServer) DeleteManagerMember(context.Context, *DeleteManagerMemberReq) (*DeleteManagerMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManagerMember not implemented")
}
func (UnimplementedPmsServer) GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedPmsServer) GetRoleIds(context.Context, *GetRoleIdsReq) (*GetRoleIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleIds not implemented")
}
func (UnimplementedPmsServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedPmsServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedPmsServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedPmsServer) GetRoleMemberList(context.Context, *GetRoleMemberListReq) (*GetRoleMemberListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMemberList not implemented")
}
func (UnimplementedPmsServer) GetRolePermission(context.Context, *GetRolePermissionReq) (*GetRolePermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolePermission not implemented")
}
func (UnimplementedPmsServer) GetInitActionOptionPermission(context.Context, *GetInitActionOptionPermissionReq) (*GetInitActionOptionPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitActionOptionPermission not implemented")
}
func (UnimplementedPmsServer) CreateRoleMember(context.Context, *CreateRoleMemberReq) (*CreateRoleMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleMember not implemented")
}
func (UnimplementedPmsServer) DeleteRoleMember(context.Context, *DeleteRoleMemberReq) (*DeleteRoleMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleMember not implemented")
}
func (UnimplementedPmsServer) PutRolePermission(context.Context, *PutRolePermissionReq) (*PutRolePermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRolePermission not implemented")
}
func (UnimplementedPmsServer) PutRoleSpaceGroupPermission(context.Context, *PutRoleSpaceGroupPermissionReq) (*PutRoleSpaceGroupPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRoleSpaceGroupPermission not implemented")
}
func (UnimplementedPmsServer) PutRoleSpacePermission(context.Context, *PutRoleSpacePermissionReq) (*PutRoleSpacePermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRoleSpacePermission not implemented")
}
func (UnimplementedPmsServer) Check(context.Context, *CheckReq) (*CheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedPmsServer) TotalInfo(context.Context, *TotalInfoReq) (*TotalInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalInfo not implemented")
}
func (UnimplementedPmsServer) CommunityPermission(context.Context, *CommunityPermissionReq) (*CommunityPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityPermission not implemented")
}
func (UnimplementedPmsServer) GetManagerMemberList(context.Context, *GetManagerMemberListReq) (*GetManagerMemberListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagerMemberList not implemented")
}

// UnsafePmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PmsServer will
// result in compilation errors.
type UnsafePmsServer interface {
	mustEmbedUnimplementedPmsServer()
}

func RegisterPmsServer(s grpc.ServiceRegistrar, srv PmsServer) {
	s.RegisterService(&Pms_ServiceDesc, srv)
}

func _Pms_CreateManagerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CreateManagerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/CreateManagerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CreateManagerMember(ctx, req.(*CreateManagerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_DeleteManagerMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagerMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).DeleteManagerMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/DeleteManagerMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).DeleteManagerMember(ctx, req.(*DeleteManagerMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/GetRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetRoleList(ctx, req.(*GetRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetRoleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetRoleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/GetRoleIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetRoleIds(ctx, req.(*GetRoleIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetRoleMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetRoleMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/GetRoleMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetRoleMemberList(ctx, req.(*GetRoleMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/GetRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetRolePermission(ctx, req.(*GetRolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetInitActionOptionPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInitActionOptionPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetInitActionOptionPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/GetInitActionOptionPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetInitActionOptionPermission(ctx, req.(*GetInitActionOptionPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CreateRoleMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CreateRoleMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/CreateRoleMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CreateRoleMember(ctx, req.(*CreateRoleMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_DeleteRoleMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).DeleteRoleMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/DeleteRoleMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).DeleteRoleMember(ctx, req.(*DeleteRoleMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_PutRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).PutRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/PutRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).PutRolePermission(ctx, req.(*PutRolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_PutRoleSpaceGroupPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRoleSpaceGroupPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).PutRoleSpaceGroupPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/PutRoleSpaceGroupPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).PutRoleSpaceGroupPermission(ctx, req.(*PutRoleSpaceGroupPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_PutRoleSpacePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRoleSpacePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).PutRoleSpacePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/PutRoleSpacePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).PutRoleSpacePermission(ctx, req.(*PutRoleSpacePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).Check(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_TotalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).TotalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/TotalInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).TotalInfo(ctx, req.(*TotalInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_CommunityPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).CommunityPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/CommunityPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).CommunityPermission(ctx, req.(*CommunityPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pms_GetManagerMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagerMemberListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmsServer).GetManagerMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pms.v1.Pms/GetManagerMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmsServer).GetManagerMemberList(ctx, req.(*GetManagerMemberListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pms_ServiceDesc is the grpc.ServiceDesc for Pms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pms.v1.Pms",
	HandlerType: (*PmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManagerMember",
			Handler:    _Pms_CreateManagerMember_Handler,
		},
		{
			MethodName: "DeleteManagerMember",
			Handler:    _Pms_DeleteManagerMember_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _Pms_GetRoleList_Handler,
		},
		{
			MethodName: "GetRoleIds",
			Handler:    _Pms_GetRoleIds_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Pms_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Pms_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Pms_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleMemberList",
			Handler:    _Pms_GetRoleMemberList_Handler,
		},
		{
			MethodName: "GetRolePermission",
			Handler:    _Pms_GetRolePermission_Handler,
		},
		{
			MethodName: "GetInitActionOptionPermission",
			Handler:    _Pms_GetInitActionOptionPermission_Handler,
		},
		{
			MethodName: "CreateRoleMember",
			Handler:    _Pms_CreateRoleMember_Handler,
		},
		{
			MethodName: "DeleteRoleMember",
			Handler:    _Pms_DeleteRoleMember_Handler,
		},
		{
			MethodName: "PutRolePermission",
			Handler:    _Pms_PutRolePermission_Handler,
		},
		{
			MethodName: "PutRoleSpaceGroupPermission",
			Handler:    _Pms_PutRoleSpaceGroupPermission_Handler,
		},
		{
			MethodName: "PutRoleSpacePermission",
			Handler:    _Pms_PutRoleSpacePermission_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Pms_Check_Handler,
		},
		{
			MethodName: "TotalInfo",
			Handler:    _Pms_TotalInfo_Handler,
		},
		{
			MethodName: "CommunityPermission",
			Handler:    _Pms_CommunityPermission_Handler,
		},
		{
			MethodName: "GetManagerMemberList",
			Handler:    _Pms_GetManagerMemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pms/v1/pms.proto",
}
