// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sso/v1/sso.proto

package ssov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	commonv1 "ecodepost/pb/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = commonv1.SSO_Platform(0)
)

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for RedirectUri

	// no validation rules for ParentToken

	// no validation rules for Uid

	// no validation rules for Password

	// no validation rules for ClientIp

	// no validation rules for UserAgent

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResMultiError, or nil
// if none found.
func (m *LoginRes) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResValidationError{
				field:  "Parent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResMultiError(errors)
	}

	return nil
}

// LoginResMultiError is an error wrapping multiple validation errors returned
// by LoginRes.ValidateAll() if the designated constraints aren't met.
type LoginResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResMultiError) AllErrors() []error { return m }

// LoginResValidationError is the validation error returned by
// LoginRes.Validate if the designated constraints aren't met.
type LoginResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResValidationError) ErrorName() string { return "LoginResValidationError" }

// Error satisfies the builtin error interface
func (e LoginResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentToken

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResMultiError, or nil
// if none found.
func (m *LogoutRes) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if len(errors) > 0 {
		return LogoutResMultiError(errors)
	}

	return nil
}

// LogoutResMultiError is an error wrapping multiple validation errors returned
// by LogoutRes.ValidateAll() if the designated constraints aren't met.
type LogoutResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResMultiError) AllErrors() []error { return m }

// LogoutResValidationError is the validation error returned by
// LogoutRes.Validate if the designated constraints aren't met.
type LogoutResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResValidationError) ErrorName() string { return "LogoutResValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResValidationError{}

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Domain

	// no validation rules for AuthAt

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on VerifyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyReqMultiError, or nil
// if none found.
func (m *VerifyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Password

	// no validation rules for PasswordHash

	if len(errors) > 0 {
		return VerifyReqMultiError(errors)
	}

	return nil
}

// VerifyReqMultiError is an error wrapping multiple validation errors returned
// by VerifyReq.ValidateAll() if the designated constraints aren't met.
type VerifyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyReqMultiError) AllErrors() []error { return m }

// VerifyReqValidationError is the validation error returned by
// VerifyReq.Validate if the designated constraints aren't met.
type VerifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyReqValidationError) ErrorName() string { return "VerifyReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyReqValidationError{}

// Validate checks the field values on VerifyRes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyResMultiError, or nil
// if none found.
func (m *VerifyRes) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyResMultiError(errors)
	}

	return nil
}

// VerifyResMultiError is an error wrapping multiple validation errors returned
// by VerifyRes.ValidateAll() if the designated constraints aren't met.
type VerifyResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyResMultiError) AllErrors() []error { return m }

// VerifyResValidationError is the validation error returned by
// VerifyRes.Validate if the designated constraints aren't met.
type VerifyResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyResValidationError) ErrorName() string { return "VerifyResValidationError" }

// Error satisfies the builtin error interface
func (e VerifyResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyResValidationError{}

// Validate checks the field values on GetUserByParentTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByParentTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByParentTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByParentTokenReqMultiError, or nil if none found.
func (m *GetUserByParentTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByParentTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentToken

	if len(errors) > 0 {
		return GetUserByParentTokenReqMultiError(errors)
	}

	return nil
}

// GetUserByParentTokenReqMultiError is an error wrapping multiple validation
// errors returned by GetUserByParentTokenReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserByParentTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByParentTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByParentTokenReqMultiError) AllErrors() []error { return m }

// GetUserByParentTokenReqValidationError is the validation error returned by
// GetUserByParentTokenReq.Validate if the designated constraints aren't met.
type GetUserByParentTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByParentTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByParentTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByParentTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByParentTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByParentTokenReqValidationError) ErrorName() string {
	return "GetUserByParentTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByParentTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByParentTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByParentTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByParentTokenReqValidationError{}

// Validate checks the field values on GetUserByParentTokenRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByParentTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByParentTokenRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByParentTokenResMultiError, or nil if none found.
func (m *GetUserByParentTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByParentTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Avatar

	if len(errors) > 0 {
		return GetUserByParentTokenResMultiError(errors)
	}

	return nil
}

// GetUserByParentTokenResMultiError is an error wrapping multiple validation
// errors returned by GetUserByParentTokenRes.ValidateAll() if the designated
// constraints aren't met.
type GetUserByParentTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByParentTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByParentTokenResMultiError) AllErrors() []error { return m }

// GetUserByParentTokenResValidationError is the validation error returned by
// GetUserByParentTokenRes.Validate if the designated constraints aren't met.
type GetUserByParentTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByParentTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByParentTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByParentTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByParentTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByParentTokenResValidationError) ErrorName() string {
	return "GetUserByParentTokenResValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByParentTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByParentTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByParentTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByParentTokenResValidationError{}

// Validate checks the field values on GetTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTokenReqMultiError, or
// nil if none found.
func (m *GetTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Authorization

	// no validation rules for ClientIP

	// no validation rules for ClientUA

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return GetTokenReqMultiError(errors)
	}

	return nil
}

// GetTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetTokenReq.ValidateAll() if the designated constraints aren't met.
type GetTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenReqMultiError) AllErrors() []error { return m }

// GetTokenReqValidationError is the validation error returned by
// GetTokenReq.Validate if the designated constraints aren't met.
type GetTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenReqValidationError) ErrorName() string { return "GetTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenReqValidationError{}

// Validate checks the field values on GetTokenRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenRes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTokenResMultiError, or
// nil if none found.
func (m *GetTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return GetTokenResMultiError(errors)
	}

	return nil
}

// GetTokenResMultiError is an error wrapping multiple validation errors
// returned by GetTokenRes.ValidateAll() if the designated constraints aren't met.
type GetTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenResMultiError) AllErrors() []error { return m }

// GetTokenResValidationError is the validation error returned by
// GetTokenRes.Validate if the designated constraints aren't met.
type GetTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenResValidationError) ErrorName() string { return "GetTokenResValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenResValidationError{}

// Validate checks the field values on RefreshTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReqMultiError, or nil if none found.
func (m *RefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Authorization

	// no validation rules for ClientIP

	// no validation rules for ClientUA

	if len(errors) > 0 {
		return RefreshTokenReqMultiError(errors)
	}

	return nil
}

// RefreshTokenReqMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReqMultiError) AllErrors() []error { return m }

// RefreshTokenReqValidationError is the validation error returned by
// RefreshTokenReq.Validate if the designated constraints aren't met.
type RefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReqValidationError) ErrorName() string { return "RefreshTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReqValidationError{}

// Validate checks the field values on RefreshTokenRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResMultiError, or nil if none found.
func (m *RefreshTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return RefreshTokenResMultiError(errors)
	}

	return nil
}

// RefreshTokenResMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenRes.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResMultiError) AllErrors() []error { return m }

// RefreshTokenResValidationError is the validation error returned by
// RefreshTokenRes.Validate if the designated constraints aren't met.
type RefreshTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResValidationError) ErrorName() string { return "RefreshTokenResValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResValidationError{}

// Validate checks the field values on RemoveTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoveTokenReqMultiError,
// or nil if none found.
func (m *RemoveTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RemoveTokenReqMultiError(errors)
	}

	return nil
}

// RemoveTokenReqMultiError is an error wrapping multiple validation errors
// returned by RemoveTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RemoveTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTokenReqMultiError) AllErrors() []error { return m }

// RemoveTokenReqValidationError is the validation error returned by
// RemoveTokenReq.Validate if the designated constraints aren't met.
type RemoveTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTokenReqValidationError) ErrorName() string { return "RemoveTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RemoveTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTokenReqValidationError{}

// Validate checks the field values on RemoveTokenRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RemoveTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTokenRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RemoveTokenResMultiError,
// or nil if none found.
func (m *RemoveTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveTokenResMultiError(errors)
	}

	return nil
}

// RemoveTokenResMultiError is an error wrapping multiple validation errors
// returned by RemoveTokenRes.ValidateAll() if the designated constraints
// aren't met.
type RemoveTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTokenResMultiError) AllErrors() []error { return m }

// RemoveTokenResValidationError is the validation error returned by
// RemoveTokenRes.Validate if the designated constraints aren't met.
type RemoveTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTokenResValidationError) ErrorName() string { return "RemoveTokenResValidationError" }

// Error satisfies the builtin error interface
func (e RemoveTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTokenResValidationError{}

// Validate checks the field values on GetUserByTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserByTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByTokenReqMultiError, or nil if none found.
func (m *GetUserByTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetUserByTokenReqMultiError(errors)
	}

	return nil
}

// GetUserByTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetUserByTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserByTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByTokenReqMultiError) AllErrors() []error { return m }

// GetUserByTokenReqValidationError is the validation error returned by
// GetUserByTokenReq.Validate if the designated constraints aren't met.
type GetUserByTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByTokenReqValidationError) ErrorName() string {
	return "GetUserByTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByTokenReqValidationError{}

// Validate checks the field values on GetUserByTokenRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserByTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByTokenRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByTokenResMultiError, or nil if none found.
func (m *GetUserByTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Email

	// no validation rules for Name

	if len(errors) > 0 {
		return GetUserByTokenResMultiError(errors)
	}

	return nil
}

// GetUserByTokenResMultiError is an error wrapping multiple validation errors
// returned by GetUserByTokenRes.ValidateAll() if the designated constraints
// aren't met.
type GetUserByTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByTokenResMultiError) AllErrors() []error { return m }

// GetUserByTokenResValidationError is the validation error returned by
// GetUserByTokenRes.Validate if the designated constraints aren't met.
type GetUserByTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByTokenResValidationError) ErrorName() string {
	return "GetUserByTokenResValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByTokenResValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Nickname

	// no validation rules for Username

	// no validation rules for Avatar

	// no validation rules for Email

	// no validation rules for Name

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on ResetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordReqMultiError, or nil if none found.
func (m *ResetPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Password

	if len(errors) > 0 {
		return ResetPasswordReqMultiError(errors)
	}

	return nil
}

// ResetPasswordReqMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordReq.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordReqMultiError) AllErrors() []error { return m }

// ResetPasswordReqValidationError is the validation error returned by
// ResetPasswordReq.Validate if the designated constraints aren't met.
type ResetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReqValidationError) ErrorName() string { return "ResetPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReqValidationError{}

// Validate checks the field values on ResetPasswordRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordResMultiError, or nil if none found.
func (m *ResetPasswordRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordResMultiError(errors)
	}

	return nil
}

// ResetPasswordResMultiError is an error wrapping multiple validation errors
// returned by ResetPasswordRes.ValidateAll() if the designated constraints
// aren't met.
type ResetPasswordResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordResMultiError) AllErrors() []error { return m }

// ResetPasswordResValidationError is the validation error returned by
// ResetPasswordRes.Validate if the designated constraints aren't met.
type ResetPasswordResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResValidationError) ErrorName() string { return "ResetPasswordResValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResValidationError{}

// Validate checks the field values on GetAccessByPTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessByPTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessByPTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessByPTokenReqMultiError, or nil if none found.
func (m *GetAccessByPTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessByPTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for PToken

	// no validation rules for Platform

	// no validation rules for ClientIp

	// no validation rules for ClientUa

	if len(errors) > 0 {
		return GetAccessByPTokenReqMultiError(errors)
	}

	return nil
}

// GetAccessByPTokenReqMultiError is an error wrapping multiple validation
// errors returned by GetAccessByPTokenReq.ValidateAll() if the designated
// constraints aren't met.
type GetAccessByPTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessByPTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessByPTokenReqMultiError) AllErrors() []error { return m }

// GetAccessByPTokenReqValidationError is the validation error returned by
// GetAccessByPTokenReq.Validate if the designated constraints aren't met.
type GetAccessByPTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessByPTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessByPTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessByPTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessByPTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessByPTokenReqValidationError) ErrorName() string {
	return "GetAccessByPTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessByPTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessByPTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessByPTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessByPTokenReqValidationError{}

// Validate checks the field values on GetAccessByPTokenRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessByPTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessByPTokenRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessByPTokenResMultiError, or nil if none found.
func (m *GetAccessByPTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessByPTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return GetAccessByPTokenResMultiError(errors)
	}

	return nil
}

// GetAccessByPTokenResMultiError is an error wrapping multiple validation
// errors returned by GetAccessByPTokenRes.ValidateAll() if the designated
// constraints aren't met.
type GetAccessByPTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessByPTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessByPTokenResMultiError) AllErrors() []error { return m }

// GetAccessByPTokenResValidationError is the validation error returned by
// GetAccessByPTokenRes.Validate if the designated constraints aren't met.
type GetAccessByPTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessByPTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessByPTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessByPTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessByPTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessByPTokenResValidationError) ErrorName() string {
	return "GetAccessByPTokenResValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessByPTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessByPTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessByPTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessByPTokenResValidationError{}
