// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ssov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SsoClient is the client API for Sso service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsoClient interface {
	// Login 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	// Logout 退出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRes, error)
	// Verify 密码
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRes, error)
	// GetUserByParentToken
	GetUserByParentToken(ctx context.Context, in *GetUserByParentTokenReq, opts ...grpc.CallOption) (*GetUserByParentTokenRes, error)
	// 根据Code码，获取Access的Token信息
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error)
	// 根据token，删除access的token信息，退出登录
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error)
	// 根据token，删除access的token信息，退出登录
	RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error)
	// 根据Token信息，获取用户数据
	GetUserByToken(ctx context.Context, in *GetUserByTokenReq, opts ...grpc.CallOption) (*GetUserByTokenRes, error)
	// 通过 pToken 获取subToken
	GetAccessByPToken(ctx context.Context, in *GetAccessByPTokenReq, opts ...grpc.CallOption) (*GetAccessByPTokenRes, error)
	// 修改密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRes, error)
}

type ssoClient struct {
	cc grpc.ClientConnInterface
}

func NewSsoClient(cc grpc.ClientConnInterface) SsoClient {
	return &ssoClient{cc}
}

func (c *ssoClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRes, error) {
	out := new(LogoutRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRes, error) {
	out := new(VerifyRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetUserByParentToken(ctx context.Context, in *GetUserByParentTokenReq, opts ...grpc.CallOption) (*GetUserByParentTokenRes, error) {
	out := new(GetUserByParentTokenRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/GetUserByParentToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error) {
	out := new(GetTokenRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenRes, error) {
	out := new(RefreshTokenRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error) {
	out := new(RemoveTokenRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetUserByToken(ctx context.Context, in *GetUserByTokenReq, opts ...grpc.CallOption) (*GetUserByTokenRes, error) {
	out := new(GetUserByTokenRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/GetUserByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) GetAccessByPToken(ctx context.Context, in *GetAccessByPTokenReq, opts ...grpc.CallOption) (*GetAccessByPTokenRes, error) {
	out := new(GetAccessByPTokenRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/GetAccessByPToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssoClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordRes, error) {
	out := new(ResetPasswordRes)
	err := c.cc.Invoke(ctx, "/sso.v1.Sso/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsoServer is the server API for Sso service.
// All implementations should embed UnimplementedSsoServer
// for forward compatibility
type SsoServer interface {
	// Login 登录
	Login(context.Context, *LoginReq) (*LoginRes, error)
	// Logout 退出
	Logout(context.Context, *LogoutReq) (*LogoutRes, error)
	// Verify 密码
	Verify(context.Context, *VerifyReq) (*VerifyRes, error)
	// GetUserByParentToken
	GetUserByParentToken(context.Context, *GetUserByParentTokenReq) (*GetUserByParentTokenRes, error)
	// 根据Code码，获取Access的Token信息
	GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error)
	// 根据token，删除access的token信息，退出登录
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error)
	// 根据token，删除access的token信息，退出登录
	RemoveToken(context.Context, *RemoveTokenReq) (*RemoveTokenRes, error)
	// 根据Token信息，获取用户数据
	GetUserByToken(context.Context, *GetUserByTokenReq) (*GetUserByTokenRes, error)
	// 通过 pToken 获取subToken
	GetAccessByPToken(context.Context, *GetAccessByPTokenReq) (*GetAccessByPTokenRes, error)
	// 修改密码
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRes, error)
}

// UnimplementedSsoServer should be embedded to have forward compatible implementations.
type UnimplementedSsoServer struct {
}

func (UnimplementedSsoServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSsoServer) Logout(context.Context, *LogoutReq) (*LogoutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSsoServer) Verify(context.Context, *VerifyReq) (*VerifyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedSsoServer) GetUserByParentToken(context.Context, *GetUserByParentTokenReq) (*GetUserByParentTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByParentToken not implemented")
}
func (UnimplementedSsoServer) GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedSsoServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedSsoServer) RemoveToken(context.Context, *RemoveTokenReq) (*RemoveTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (UnimplementedSsoServer) GetUserByToken(context.Context, *GetUserByTokenReq) (*GetUserByTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByToken not implemented")
}
func (UnimplementedSsoServer) GetAccessByPToken(context.Context, *GetAccessByPTokenReq) (*GetAccessByPTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessByPToken not implemented")
}
func (UnimplementedSsoServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}

// UnsafeSsoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsoServer will
// result in compilation errors.
type UnsafeSsoServer interface {
	mustEmbedUnimplementedSsoServer()
}

func RegisterSsoServer(s grpc.ServiceRegistrar, srv SsoServer) {
	s.RegisterService(&Sso_ServiceDesc, srv)
}

func _Sso_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetUserByParentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByParentTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetUserByParentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/GetUserByParentToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetUserByParentToken(ctx, req.(*GetUserByParentTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).RemoveToken(ctx, req.(*RemoveTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/GetUserByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetUserByToken(ctx, req.(*GetUserByTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_GetAccessByPToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessByPTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).GetAccessByPToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/GetAccessByPToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).GetAccessByPToken(ctx, req.(*GetAccessByPTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sso_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sso.v1.Sso/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sso_ServiceDesc is the grpc.ServiceDesc for Sso service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sso_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.v1.Sso",
	HandlerType: (*SsoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Sso_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Sso_Logout_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Sso_Verify_Handler,
		},
		{
			MethodName: "GetUserByParentToken",
			Handler:    _Sso_GetUserByParentToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Sso_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Sso_RefreshToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _Sso_RemoveToken_Handler,
		},
		{
			MethodName: "GetUserByToken",
			Handler:    _Sso_GetUserByToken_Handler,
		},
		{
			MethodName: "GetAccessByPToken",
			Handler:    _Sso_GetAccessByPToken_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Sso_ResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso/v1/sso.proto",
}
